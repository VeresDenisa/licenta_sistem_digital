
// Verilog netlist produced by program ldbanno, Version Diamond (64-bit) 3.13.0.56.2

// ldbanno -n Verilog -o CS_project_CS_implementation_vo.vo -w -neg -gui CS_project_CS_implementation.ncd 
// Netlist created on Sun Jun 23 22:57:41 2024
// Netlist written on Sun Jun 23 23:00:34 2024
// Design is for device LCMXO3D-9400HC
// Design is for package CABGA256
// Design is for performance grade 5

`timescale 1 ns / 1 ps

module CS ( clk, rst_n, btnHS, btnVS, btnUART, btnVGA, in, out, HSYNC, VSYNC, 
            LEDS, RED, GREEN, BLUE );
  input  clk, rst_n, btnHS, btnVS, btnUART, btnVGA, in;
  output out, HSYNC, VSYNC;
  output [7:0] LEDS;
  output [3:0] RED;
  output [3:0] GREEN;
  output [3:0] BLUE;
  wire   Count_h_8, H_left_margin_8, Count_h_7, H_left_margin_7, n7670, n7671, 
         Count_h_6, H_left_margin_6, H_left_margin_5, Count_h_5, n7669, n7735, 
         n1801, counter_23_N_178_10, counter_23, counter_22, n7734, counter_21, 
         counter_20, n7733, counter_19, counter_18, n7732, Count_h_4, 
         H_left_margin_4, H_left_margin_3, Count_h_3, n7668, H_left_margin_2, 
         Count_h_2, Count_h_1, H_left_margin_1, n7667, counter_17, counter_16, 
         n7731, counter_15, counter_14, n7730, counter_13, counter_12, 
         UART_out_data_7, UART_out_data_6, clk_c_enable_81, n2268, clk_c, 
         n7729, \lm/leds_UART_info_6 , leds_UART_info_7, counter_11, 
         counter_10, UART_out_data_5, UART_out_data_4, n7728, 
         \lm/leds_UART_info_4 , \lm/leds_UART_info_5 , counter_23_N_178_9, 
         counter_9, counter_8, counter_23_N_178_8, UART_out_data_3, 
         UART_out_data_2, n7727, \lm/leds_UART_info_2 , \lm/leds_UART_info_3 , 
         counter_7, counter_23_N_178_7, counter_23_N_178_6, counter_6, n7726, 
         counter_23_N_178_5, counter_5, counter_4, counter_23_N_178_4, n7725, 
         counter_23_N_178_3, counter_3, counter_23_N_178_2, counter_2, n7724, 
         counter_23_N_178_1, counter_1, counter_0, Count_h_0, H_left_margin_0, 
         n1947, Count_h_11, \vga/assgncolor/n7712 , 
         \vga/assgncolor/Active_nxt_N_1067 , \vga/H_right_margin_10 , 
         Count_h_10, \vga/H_right_margin_9 , Count_h_9, \vga/assgncolor/n7711 , 
         \vga/H_right_margin_8 , \vga/H_right_margin_7 , 
         \vga/assgncolor/n7710 , \vga/H_right_margin_6 , 
         \vga/H_right_margin_5 , \vga/assgncolor/n7709 , 
         \vga/H_right_margin_4 , \vga/H_right_margin_3 , 
         \vga/assgncolor/n7708 , \vga/H_right_margin_2 , 
         \vga/H_right_margin_1 , \vga/assgncolor/n7707 , 
         \vga/H_right_margin_0 , Count_v_11, \vga/assgncolor/n7706 , 
         \vga/assgncolor/Active_nxt_N_1069 , Count_v_10, Count_v_9, 
         \vga/V_right_margin_9 , \vga/assgncolor/n7705 , 
         \vga/V_right_margin_8 , Count_v_8, \vga/V_right_margin_7 , Count_v_7, 
         \vga/assgncolor/n7704 , \vga/V_right_margin_6 , Count_v_6, 
         \vga/V_right_margin_5 , Count_v_5, \vga/assgncolor/n7703 , Count_v_4, 
         \vga/V_right_margin_4 , \vga/V_right_margin_3 , Count_v_3, 
         \vga/assgncolor/n7702 , Count_v_2, \vga/V_right_margin_2 , Count_v_1, 
         \vga/V_right_margin_1 , \vga/assgncolor/n7701 , 
         \vga/V_right_margin_0 , Count_v_0, \vga/CounterV/n7817 , 
         \vga/CounterV/n54 , \vga/CounterV/n7816 , \vga/CounterV/n56 , 
         \vga/CounterV/n55 , \vga/CounterV/n7815 , \vga/CounterV/n58 , 
         \vga/CounterV/n57 , \vga/CounterV/n7814 , \vga/CounterV/n60 , 
         \vga/CounterV/n59 , \vga/CounterV/n7813 , \vga/CounterV/n62 , 
         \vga/CounterV/n61 , \vga/CounterV/n7812 , \vga/CounterV/n64 , 
         \vga/CounterV/n63 , \vga/CounterV/n65 , \vga/V_count_max_11 , 
         \vga/CounterV/n7723 , \vga/CounterV/n1907 , \vga/V_count_max_10 , 
         \vga/V_count_max_9 , \vga/CounterV/n7722 , \vga/V_count_max_8 , 
         \vga/V_count_max_7 , \vga/CounterV/n7721 , \vga/V_count_max_6 , 
         \vga/V_count_max_5 , \vga/CounterV/n7720 , \vga/V_count_max_4 , 
         V_count_max_3, \vga/CounterV/n7719 , \vga/V_count_max_2 , 
         \vga/V_count_max_1 , \vga/CounterV/n7718 , \vga/V_count_max_0 , 
         \vga/CounterH/n7823 , \vga/CounterH/n54 , \vga/CounterH/n7822 , 
         \vga/CounterH/n56 , \vga/CounterH/n55 , \vga/CounterH/n7821 , 
         \vga/CounterH/n58 , \vga/CounterH/n57 , \vga/CounterH/n7820 , 
         \vga/CounterH/n60 , \vga/CounterH/n59 , \vga/CounterH/n7819 , 
         \vga/CounterH/n62 , \vga/CounterH/n61 , \vga/CounterH/n7818 , 
         \vga/CounterH/n64 , \vga/CounterH/n63 , \vga/CounterH/n65 , 
         \vga/H_count_max_11 , \vga/CounterH/n7773 , \vga/CounterH/n1892 , 
         \vga/H_count_max_10 , \vga/H_count_max_9 , \vga/CounterH/n7772 , 
         H_count_max_8, \vga/H_count_max_7 , \vga/CounterH/n7771 , 
         \vga/H_count_max_6 , \vga/H_count_max_5 , \vga/CounterH/n7770 , 
         \vga/H_count_max_4 , \vga/H_count_max_3 , \vga/CounterH/n7769 , 
         \vga/H_count_max_2 , \vga/H_count_max_1 , \vga/CounterH/n7768 , 
         \vga/H_count_max_0 , \cm/counterV/Count_intern_reg_9 , 
         \cm/counterV/n46 , VSYNC_c, \cm/counterV/n7833 , 
         \cm/counterV/Count_intern_reg_8 , \cm/counterV/Count_intern_reg_7 , 
         \cm/counterV/n47 , \cm/counterV/n48 , \cm/counterV/n7832 , 
         \cm/counterV/Count_intern_reg_6 , \cm/counterV/Count_intern_reg_5 , 
         \cm/counterV/n49 , \cm/counterV/n50 , \cm/counterV/n7831 , 
         \cm/counterV/Count_intern_reg_4 , \cm/counterV/Count_intern_reg_3 , 
         \cm/counterV/n51 , \cm/counterV/n52 , \cm/counterV/n7830 , 
         \cm/counterV/Count_intern_reg_2 , \cm/counterV/Count_intern_reg_1 , 
         \cm/counterV/n53 , \cm/counterV/n54 , \cm/counterV/n7829 , 
         \cm/counterV/Count_intern_reg_0 , \cm/counterV/n55 , \cm/Counter_Y_9 , 
         \cm/counterV/n46_adj_1114 , \cm/counterV/n4195 , \cm/counterV/n7828 , 
         \cm/Counter_Y_8 , \cm/Counter_Y_7 , \cm/counterV/n47_adj_1116 , 
         \cm/counterV/n48_adj_1115 , \cm/counterV/n7827 , \cm/Counter_Y_6 , 
         \cm/Counter_Y_5 , \cm/counterV/n49_adj_1118 , 
         \cm/counterV/n50_adj_1117 , \cm/counterV/n7826 , \cm/Counter_Y_4 , 
         \cm/Counter_Y_3 , \cm/counterV/n51_adj_1120 , 
         \cm/counterV/n52_adj_1119 , \cm/counterV/n7825 , \cm/Counter_Y_2 , 
         \cm/Counter_Y_1 , \cm/counterV/n53_adj_1122 , 
         \cm/counterV/n54_adj_1121 , \cm/counterV/n7824 , \cm/Counter_Y_0 , 
         \cm/counterV/n55_adj_1123 , \cm/counterV/n7811 , \cm/counterV/n1864 , 
         \cm/H_BackPorch_4 , \cm/H_BackPorch_5 , \cm/counterV/n7810 , 
         \cm/H_BackPorch_3 , \cm/counterV/n7809 , \cm/H_BackPorch_7 , 
         \cm/counterV/n7808 , \cm/counterV/n7807 , \cm/counterV/n7806 , 
         \cm/counterV/n1877 , \cm/counterV/n7805 , \cm/counterV/n7804 , 
         \cm/counterV/n7803 , \cm/V_BackPorch_1 , \cm/counterV/n7802 , 
         \cm/counterH/Count_intern_reg_9 , \cm/counterH/Count_intern_reg_8 , 
         \cm/counterH/n7694 , \cm/counterH/n7695 , 
         \cm/counterH/Count_intern_reg_7 , \cm/counterH/Count_intern_reg_6 , 
         \cm/counterH/n7693 , \cm/counterH/n46 , HSYNC_c, \cm/counterH/n7843 , 
         \cm/counterH/Count_intern_reg_5 , \cm/counterH/Count_intern_reg_4 , 
         \cm/counterH/n7692 , \cm/counterH/n47 , \cm/counterH/n48 , 
         \cm/counterH/n7842 , \cm/counterH/Count_intern_reg_3 , 
         \cm/counterH/Count_intern_reg_2 , \cm/counterH/n7691 , 
         \cm/counterH/n49 , \cm/counterH/n50 , \cm/counterH/n7841 , 
         \cm/counterH/n51 , \cm/counterH/n52 , \cm/counterH/n7840 , 
         \cm/counterH/Count_intern_reg_1 , \cm/counterH/n53 , 
         \cm/counterH/n54 , \cm/counterH/n7839 , 
         \cm/counterH/Count_intern_reg_0 , \cm/counterH/n55 , \cm/Counter_X_9 , 
         \cm/counterH/n46_adj_1103 , \cm/counterH/n4197 , \cm/counterH/n7838 , 
         \cm/Counter_X_8 , \cm/Counter_X_7 , \cm/counterH/n47_adj_1105 , 
         \cm/counterH/n48_adj_1104 , \cm/counterH/n7837 , \cm/Counter_X_6 , 
         \cm/Counter_X_5 , \cm/counterH/n49_adj_1107 , 
         \cm/counterH/n50_adj_1106 , \cm/counterH/n7836 , \cm/Counter_X_4 , 
         \cm/Counter_X_3 , \cm/counterH/n51_adj_1109 , 
         \cm/counterH/n52_adj_1108 , \cm/counterH/n7835 , \cm/Counter_X_2 , 
         \cm/Counter_X_1 , \cm/counterH/n53_adj_1111 , 
         \cm/counterH/n54_adj_1110 , \cm/counterH/n7834 , \cm/Counter_X_0 , 
         \cm/counterH/n55_adj_1112 , \cm/counterH/n7666 , \cm/counterH/n1851 , 
         \cm/counterH/n7665 , \cm/H_BackPorch_6 , \cm/counterH/n7664 , 
         \cm/counterH/n7663 , \cm/counterH/n1838 , \cm/c_data_3 , c_data_2, 
         \cm/assignCM/clk_c_enable_106 , \cm/assignCM/n7717 , 
         \cm/assignCM/n523 , \cm/assignCM/Right_DOWN_reg_2 , 
         \cm/assignCM/Right_DOWN_reg_3 , \cm/c_data_5 , \cm/c_data_4 , 
         \cm/assignCM/clk_c_enable_139 , \cm/assignCM/n7716 , 
         \cm/assignCM/Left_UP_reg_4 , \cm/assignCM/Left_UP_reg_5 , 
         \cm/c_data_11 , \cm/c_data_10 , \cm/assignCM/n7715 , 
         \cm/assignCM/Right_DOWN_reg_10 , \cm/assignCM/Right_DOWN_reg_11 , 
         c_data_1, c_data_0, \cm/assignCM/n7714 , 
         \cm/assignCM/Right_DOWN_reg_0 , \cm/assignCM/Right_DOWN_reg_1 , 
         \cm/c_data_9 , \cm/c_data_8 , \cm/assignCM/n7713 , 
         \cm/assignCM/Left_UP_reg_8 , \cm/assignCM/Left_UP_reg_9 , 
         \cm/c_data_7 , \cm/c_data_6 , \cm/assignCM/Left_UP_reg_6 , 
         \cm/assignCM/Left_UP_reg_7 , \cm/assignCM/clk_c_enable_117 , 
         \cm/assignCM/n7700 , \cm/assignCM/n521 , \cm/assignCM/Right_UP_reg_2 , 
         \cm/assignCM/Right_UP_reg_3 , \cm/assignCM/n7699 , 
         \cm/assignCM/Right_DOWN_reg_4 , \cm/assignCM/Right_DOWN_reg_5 , 
         \cm/assignCM/n7698 , \cm/assignCM/Right_UP_reg_10 , 
         \cm/assignCM/Right_UP_reg_11 , \cm/assignCM/n7697 , 
         \cm/assignCM/Right_UP_reg_0 , \cm/assignCM/Right_UP_reg_1 , 
         \cm/assignCM/n7696 , \cm/assignCM/Right_DOWN_reg_8 , 
         \cm/assignCM/Right_DOWN_reg_9 , \cm/assignCM/Right_DOWN_reg_6 , 
         \cm/assignCM/Right_DOWN_reg_7 , \cd/CNT_VGA/counter_2 , 
         \cd/CNT_VGA/counter_1 , \cd/CNT_VGA/n7752 , \cd/CNT_VGA/n164 , 
         \cd/CNT_VGA/n163 , \cd/CNT_VGA/n7753 , \cd/CNT_VGA/counter_0 , n9153, 
         \vga/config1/H_Left_Margin_nxt_8__N_969 , 
         \vga/config1/V_Count_Max_nxt_0 , \cd/CNT_VGA/n165 , 
         \vga/config1/V_Count_Max_nxt_10 , \cd/CNT_VGA/n7801 , 
         counter_31__N_85, \cd/CNT_VGA/counter_31 , \cd/resolution_0 , 
         \cd/resolution_1 , \cd/CNT_VGA/counter_30 , \cd/CNT_VGA/n7800 , 
         \cd/CNT_VGA/counter_29 , \cd/CNT_VGA/counter_28 , \cd/CNT_VGA/n7799 , 
         \cd/CNT_VGA/counter_27 , \cd/CNT_VGA/counter_26 , \cd/CNT_VGA/n7798 , 
         \cd/CNT_VGA/counter_25 , \cd/CNT_VGA/counter_24 , \cd/CNT_VGA/n7797 , 
         \cd/CNT_VGA/counter_23 , \cd/CNT_VGA/counter_22 , \cd/CNT_VGA/n7796 , 
         \cd/CNT_VGA/counter_21 , \cd/CNT_VGA/counter_20 , \cd/CNT_VGA/n7795 , 
         \cd/CNT_VGA/counter_19 , \cd/CNT_VGA/counter_18 , \cd/CNT_VGA/n7794 , 
         \cd/CNT_VGA/counter_17 , \cd/CNT_VGA/counter_16 , \cd/CNT_VGA/n7793 , 
         \cd/CNT_VGA/counter_15 , \cd/CNT_VGA/counter_14 , \cd/CNT_VGA/n7792 , 
         \cd/CNT_VGA/counter_13 , \cd/CNT_VGA/counter_12 , \cd/CNT_VGA/n7791 , 
         \cd/CNT_VGA/counter_11 , \cd/CNT_VGA/counter_10 , \cd/CNT_VGA/n7790 , 
         \cd/CNT_VGA/counter_9 , \cd/CNT_VGA/counter_8 , \cd/CNT_VGA/n7789 , 
         \cd/CNT_VGA/counter_7 , \cd/CNT_VGA/counter_6 , \cd/CNT_VGA/n7788 , 
         \cd/CNT_VGA/counter_5 , \cd/CNT_VGA/counter_4 , \cd/CNT_VGA/n7787 , 
         \cd/CNT_VGA/counter_3 , \cd/CNT_VGA/n7786 , \cd/CNT_VGA/n7767 , 
         \cd/CNT_VGA/n134 , \cd/CNT_VGA/n7766 , \cd/CNT_VGA/n136 , 
         \cd/CNT_VGA/n135 , \cd/CNT_VGA/n7765 , \cd/CNT_VGA/n138 , 
         \cd/CNT_VGA/n137 , \cd/CNT_VGA/n7764 , \cd/CNT_VGA/n140 , 
         \cd/CNT_VGA/n139 , \cd/CNT_VGA/n7763 , \cd/CNT_VGA/n142 , 
         \cd/CNT_VGA/n141 , \cd/CNT_VGA/n7762 , \cd/CNT_VGA/n144 , 
         \cd/CNT_VGA/n143 , \cd/CNT_VGA/n7761 , \cd/CNT_VGA/n146 , 
         \cd/CNT_VGA/n145 , \cd/CNT_VGA/n7760 , \cd/CNT_VGA/n148 , 
         \cd/CNT_VGA/n147 , \cd/CNT_VGA/n7759 , \cd/CNT_VGA/n150 , 
         \cd/CNT_VGA/n149 , \cd/CNT_VGA/n7758 , \cd/CNT_VGA/n152 , 
         \cd/CNT_VGA/n151 , \cd/CNT_VGA/n7757 , \cd/CNT_VGA/n154 , 
         \cd/CNT_VGA/n153 , \cd/CNT_VGA/n7756 , \cd/CNT_VGA/n156 , 
         \vga/config1/V_Count_Max_nxt_11 , \cd/CNT_VGA/n155 , 
         \vga/config1/V_Count_Max_nxt_7 , \cd/CNT_VGA/n7755 , 
         \cd/CNT_VGA/n158 , \cd/CNT_VGA/n157 , \cd/CNT_VGA/n7754 , 
         \cd/CNT_VGA/n160 , \cd/CNT_VGA/n159 , \cd/CNT_VGA/n162 , 
         \cd/CNT_VGA/n161 , \vga/config1/V_Sync_Pulse_nxt_7 , 
         \cd/CNT_UART/n7690 , V_sync_pulse_7, \cd/baudrate_8 , H_sync_pulse_0, 
         \cd/CNT_UART/n7689 , \vga/config1/H_Right_Margin_nxt_2 , 
         \vga/config1/H_Sync_Pulse_nxt_0 , \cd/baudrate_7 , \cd/baudrate_6 , 
         \cd/CNT_UART/n7688 , \vga/config1/H_Right_Margin_nxt_0 , 
         \vga/config1/H_Right_Margin_nxt_1 , \cd/baudrate_5 , \cd/baudrate_4 , 
         \cd/CNT_UART/n7687 , \vga/config1/H_Left_Margin_nxt_0 , 
         \vga/config1/H_Left_Margin_nxt_1 , \cd/baudrate_3 , \cd/baudrate_2 , 
         \cd/CNT_UART/n7686 , \vga/config1/H_Count_Max_nxt_4 , 
         \vga/config1/H_Count_Max_nxt_6 , \cd/baudrate_1 , 
         \vga/config1/V_Sync_Pulse_nxt_6 , \vga/config1/V_Sync_Pulse_nxt_5 , 
         V_sync_pulse_5, V_sync_pulse_6, \vga/config1/V_Right_Margin_nxt_6 , 
         \vga/config1/V_Right_Margin_nxt_5 , \cd/CNT_UART/n7785 , n102, 
         \vga/config1/V_Right_Margin_nxt_4 , 
         \vga/config1/V_Right_Margin_nxt_3 , \cd/CNT_UART/n7784 , n104, n103, 
         \vga/config1/V_Right_Margin_nxt_2 , 
         \vga/config1/V_Right_Margin_nxt_1 , \cd/CNT_UART/n7783 , n106, n105, 
         \vga/config1/V_Right_Margin_nxt_0 , \vga/config1/V_Left_Margin_nxt_5 , 
         \cd/CNT_UART/n7782 , n108, V_left_margin_5, n107_adj_1145, 
         \vga/config1/V_Left_Margin_nxt_4 , \vga/config1/V_Left_Margin_nxt_3 , 
         \cd/CNT_UART/n7781 , n110, V_left_margin_3, n109_adj_1144, 
         V_left_margin_4, \vga/config1/V_Left_Margin_nxt_2 , 
         \vga/config1/V_Left_Margin_nxt_1 , \cd/CNT_UART/n7780 , n112, 
         V_left_margin_1, n111, V_left_margin_2, 
         \vga/config1/V_Left_Margin_nxt_0 , \vga/config1/V_Count_Max_nxt_9 , 
         \cd/CNT_UART/n7779 , n114, n113, V_left_margin_0, 
         \vga/config1/V_Count_Max_nxt_8 , \cd/CNT_UART/n7778 , n116, n115, 
         \vga/config1/V_Sync_Pulse_nxt_4 , \vga/config1/V_Sync_Pulse_nxt_3 , 
         \cd/CNT_UART/n7777 , n118, V_sync_pulse_3, n117, V_sync_pulse_4, 
         \vga/config1/V_Sync_Pulse_nxt_2 , \vga/config1/V_Sync_Pulse_nxt_1 , 
         \cd/CNT_UART/n7776 , n120, V_sync_pulse_1, n119, V_sync_pulse_2, 
         \vga/config1/V_Sync_Pulse_nxt_0 , \vga/config1/V_Right_Margin_nxt_9 , 
         \cd/CNT_UART/n7775 , n122, n121, V_sync_pulse_0, 
         \vga/config1/V_Right_Margin_nxt_8 , 
         \vga/config1/V_Right_Margin_nxt_7 , \cd/CNT_UART/n7774 , n124, n123, 
         \vga/config1/V_Count_Max_nxt_6 , \vga/config1/V_Count_Max_nxt_5 , 
         n125, \cd/CNT_LM/counter_12 , \cd/CNT_LM/counter_11 , 
         \vga/config1/H_Left_Margin_nxt_7 , \vga/config1/H_Left_Margin_nxt_6 , 
         \cd/CNT_LM/n7675 , \cd/CNT_LM/n7676 , \cd/CNT_LM/counter_31 , 
         \vga/config1/Load_nxt , \cd/CNT_LM/n7685 , Load_config, 
         counter_31__N_85_adj_1140, \cd/CNT_LM/counter_30 , 
         \cd/CNT_LM/counter_29 , \vga/config1/H_Sync_Pulse_nxt_7 , 
         \vga/config1/H_Sync_Pulse_nxt_6 , \cd/CNT_LM/n7684 , H_sync_pulse_6, 
         H_sync_pulse_7, \cd/CNT_LM/counter_28 , \cd/CNT_LM/counter_27 , 
         \vga/config1/H_Sync_Pulse_nxt_5 , \vga/config1/H_Sync_Pulse_nxt_4 , 
         \cd/CNT_LM/n7683 , H_sync_pulse_4, H_sync_pulse_5, 
         \cd/CNT_LM/counter_26 , \cd/CNT_LM/counter_25 , 
         \vga/config1/H_Sync_Pulse_nxt_3 , \vga/config1/H_Sync_Pulse_nxt_2 , 
         \cd/CNT_LM/n7682 , H_sync_pulse_2, H_sync_pulse_3, \cd/CNT_LM/n134 , 
         \cd/CNT_LM/n7875 , \cd/CNT_LM/n135 , \cd/CNT_LM/n136 , 
         \cd/CNT_LM/n7874 , \cd/CNT_LM/n137 , \cd/CNT_LM/n138 , 
         \cd/CNT_LM/n7873 , \cd/CNT_LM/n139 , \cd/CNT_LM/n140 , 
         \cd/CNT_LM/n7872 , \cd/CNT_LM/counter_24 , \cd/CNT_LM/counter_23 , 
         \cd/CNT_LM/n141 , \cd/CNT_LM/n142 , \cd/CNT_LM/n7871 , 
         \vga/config1/H_Sync_Pulse_nxt_1 , \cd/CNT_LM/n7681 , H_sync_pulse_1, 
         \cd/CNT_LM/counter_22 , \cd/CNT_LM/counter_21 , \cd/CNT_LM/n143 , 
         \cd/CNT_LM/n144 , \cd/CNT_LM/n7870 , \cd/CNT_LM/counter_20 , 
         \cd/CNT_LM/counter_19 , \cd/CNT_LM/n145 , \cd/CNT_LM/n146 , 
         \cd/CNT_LM/n7869 , \cd/CNT_LM/counter_18 , \cd/CNT_LM/counter_17 , 
         \cd/CNT_LM/n147 , \cd/CNT_LM/n148 , \cd/CNT_LM/n7868 , 
         \cd/CNT_LM/counter_16 , \cd/CNT_LM/counter_15 , \cd/CNT_LM/n149 , 
         \cd/CNT_LM/n150 , \cd/CNT_LM/n7867 , \cd/CNT_LM/counter_14 , 
         \cd/CNT_LM/counter_13 , \cd/CNT_LM/n151 , \cd/CNT_LM/n152 , 
         \cd/CNT_LM/n7866 , \cd/CNT_LM/n153 , \cd/CNT_LM/n154 , 
         \cd/CNT_LM/n7865 , \cd/CNT_LM/counter_10 , \cd/CNT_LM/counter_9 , 
         \cd/CNT_LM/n155 , \cd/CNT_LM/n156 , \cd/CNT_LM/n7864 , 
         \vga/config1/H_Right_Margin_nxt_9 , 
         \vga/config1/H_Right_Margin_nxt_8 , \cd/CNT_LM/n7680 , 
         \vga/config1/H_Right_Margin_nxt_5 , 
         \vga/config1/H_Right_Margin_nxt_4 , \cd/CNT_LM/n7679 , 
         \cd/CNT_LM/counter_8 , \cd/CNT_LM/counter_7 , \cd/CNT_LM/n157 , 
         \cd/CNT_LM/n158 , \cd/CNT_LM/n7863 , 
         \vga/config1/H_Right_Margin_nxt_3 , \cd/CNT_LM/n7678 , 
         \vga/config1/H_Right_Margin_nxt_10 , \cd/CNT_LM/n7677 , 
         \cd/CNT_LM/counter_6 , \cd/CNT_LM/counter_5 , \cd/CNT_LM/n159 , 
         \cd/CNT_LM/n160 , \cd/CNT_LM/n7862 , 
         \vga/config1/H_Left_Margin_nxt_8 , \cd/CNT_LM/counter_4 , 
         \cd/CNT_LM/counter_3 , \vga/config1/H_Right_Margin_nxt_7 , 
         \vga/config1/H_Right_Margin_nxt_6 , \cd/CNT_LM/n7672 , 
         \cd/CNT_LM/n161 , \cd/CNT_LM/n162 , \cd/CNT_LM/n7861 , 
         \vga/config1/V_Count_Max_nxt_1 , \cd/CNT_LM/n7673 , \cd/CNT_LM/n30 , 
         \cd/CNT_LM/n31 , \cd/CNT_LM/n163 , \cd/CNT_LM/n164 , 
         \cd/CNT_LM/n7860 , \vga/config1/V_Count_Max_nxt_4 , 
         \vga/config1/V_Count_Max_nxt_3 , \cd/CNT_LM/n7674 , \cd/CNT_LM/n32 , 
         \cd/CNT_LM/n165 , \vga/config1/V_Count_Max_nxt_2 , 
         \cd/CNT_DB/counter_4 , \cd/CNT_DB/counter_3 , \cd/CNT_DB/n161 , 
         \cd/CNT_DB/n162 , counter_31__N_85_adj_1141, \cd/CNT_DB/n7845 , 
         \cd/CNT_DB/n7846 , \cd/CNT_DB/counter_2 , \cd/CNT_DB/counter_1 , 
         \cd/CNT_DB/n163 , \cd/CNT_DB/n164 , \cd/CNT_DB/n7844 , 
         \vga/config1/H_Left_Margin_nxt_4 , \vga/config1/H_Left_Margin_nxt_3 , 
         \cd/CNT_DB/n7751 , \cd/CNT_DB/counter_31 , \cd/CNT_DB/counter_30 , 
         \vga/config1/H_Count_Max_nxt_5 , \cd/CNT_DB/n7750 , 
         \cd/CNT_DB/counter_0 , \cd/CNT_DB/n165 , \cd/CNT_DB/counter_29 , 
         \cd/CNT_DB/counter_28 , \cd/CLOCK_DIVIDER_CONFIG/clk_c_enable_219 , 
         \cd/CLOCK_DIVIDER_CONFIG/n4220 , \cd/CNT_DB/n7749 , 
         \cd/CNT_DB/counter_27 , \cd/CNT_DB/counter_26 , 
         \cd/CLOCK_DIVIDER_CONFIG/n4176 , \cd/CLOCK_DIVIDER_CONFIG/n4223 , 
         \cd/CNT_DB/n7748 , \cd/CNT_DB/counter_25 , \cd/CNT_DB/counter_24 , 
         UART_out_7, UART_out_6, \FIFO_UART_info/clk_c_enable_206 , 
         \cd/CNT_DB/n7747 , \FIFO_UART_info/w_data_reg_6 , 
         \FIFO_UART_info/w_data_reg_7 , \cd/CNT_DB/counter_23 , 
         \cd/CNT_DB/counter_22 , UART_out_5, UART_out_4, \cd/CNT_DB/n7746 , 
         \FIFO_UART_info/w_data_reg_4 , \FIFO_UART_info/w_data_reg_5 , 
         \cd/CNT_DB/counter_21 , \cd/CNT_DB/counter_20 , UART_out_3, 
         UART_out_2, \cd/CNT_DB/n7745 , \FIFO_UART_info/w_data_reg_2 , 
         \FIFO_UART_info/w_data_reg_3 , \cd/CNT_DB/counter_19 , 
         \cd/CNT_DB/counter_18 , UART_out_1, UART_out_0, \cd/CNT_DB/n7744 , 
         \FIFO_UART_info/w_data_reg_0 , \FIFO_UART_info/w_data_reg_1 , 
         \cd/CNT_DB/counter_17 , \cd/CNT_DB/counter_16 , 
         \FIFO_UART_info/clk_c_enable_186 , \cd/CNT_DB/n7743 , 
         \cd/CNT_DB/counter_15 , \cd/CNT_DB/counter_14 , \cd/CNT_DB/n7742 , 
         \cd/CNT_DB/counter_13 , \cd/CNT_DB/counter_12 , \cd/CNT_DB/n7741 , 
         \cd/CNT_DB/counter_11 , \cd/CNT_DB/counter_10 , \cd/CNT_DB/n7740 , 
         UART_out_data_0, UART_out_data_1, \cd/CNT_DB/counter_9 , 
         \cd/CNT_DB/counter_8 , UART_error_1, UART_error_0, clk_c_enable_187, 
         \cd/CNT_DB/n7739 , \FIFO_UART_error/w_data_reg_0 , 
         \FIFO_UART_error/w_data_reg_1 , \cd/CNT_DB/counter_7 , 
         \cd/CNT_DB/counter_6 , \vga/config1/H_Left_Margin_nxt_2 , 
         \cd/CNT_DB/n7738 , \cd/CNT_DB/counter_5 , 
         \vga/config1/H_Count_Max_nxt_9 , \cd/CNT_DB/n7737 , 
         \vga/config1/H_Count_Max_nxt_8 , \vga/config1/H_Count_Max_nxt_7 , 
         \cd/CNT_DB/n7736 , \FIFO_UART_info/clk_LM_enable_1 , clk_LM, 
         UART_info_empty, \cd/CNT_DB/n134 , \cd/CNT_DB/n7859 , 
         \cd/CNT_DB/n135 , \cd/CNT_DB/n136 , \cd/CNT_DB/n7858 , 
         \cd/CNT_DB/n137 , \cd/CNT_DB/n138 , \cd/CNT_DB/n7857 , 
         \cd/CNT_DB/n139 , \cd/CNT_DB/n140 , \cd/CNT_DB/n7856 , 
         \cd/CNT_DB/n141 , \cd/CNT_DB/n142 , \cd/CNT_DB/n7855 , 
         \cd/CNT_DB/n143 , \cd/CNT_DB/n144 , \cd/CNT_DB/n7854 , 
         \cd/CNT_DB/n145 , \cd/CNT_DB/n146 , \cd/CNT_DB/n7853 , 
         \cd/CNT_DB/n147 , \cd/CNT_DB/n148 , \cd/CNT_DB/n7852 , 
         \cd/CNT_DB/n149 , \cd/CNT_DB/n150 , \cd/CNT_DB/n7851 , 
         \cd/CNT_DB/n151 , \cd/CNT_DB/n152 , \cd/CNT_DB/n7850 , 
         \cd/CNT_DB/n153 , \cd/CNT_DB/n154 , \cd/CNT_DB/n7849 , 
         \cd/CNT_DB/n155 , \cd/CNT_DB/n156 , \cd/CNT_DB/n7848 , 
         \cd/CNT_DB/n157 , \cd/CNT_DB/n158 , \cd/CNT_DB/n7847 , 
         \cd/CNT_DB/n159 , \cd/CNT_DB/n160 , \cm/configCM/n8442 , 
         \cm/configCM/n9165 , \cm/configCM/n9127 , 
         \cm/configCM/RXD_Data_reg_11 , 
         \cm/configCM/Config_Error_nxt_3_N_559_0 , 
         \cm/configCM/clk_c_enable_207 , Config_Error_0, 
         \cm/configCM/RXD_Data_reg_15 , \cm/configCM/n9138 , 
         \cm/configCM/RXD_Data_reg_8 , \cm/configCM/RXD_Data_reg_9 , 
         \cm/configCM/n9 , \cm/configCM/Config_Error_nxt_3_N_559_1 , 
         \cm/configCM/clk_c_enable_33 , Config_Error_1, \cm/configCM/n3920 , 
         \cm/configCM/n3525 , \cm/configCM/n53 , \cm/configCM/n1490 , 
         \cm/configCM/Config_Error_nxt_3_N_559_2 , 
         \cm/configCM/clk_c_enable_34 , Config_Error_2, 
         \cm/configCM/RXD_Data_reg_12 , \cm/configCM/n1664 , 
         \cm/configCM/clk_c_enable_49 , Config_Notification_1, n9391, 
         \cm/configCM/clk_c_enable_48 , Config_Notification_3, 
         Config_Notification_0, \cm/configCM/n4 , \cm/configCM/n3927 , 
         \cm/configCM/n1618 , \cm/configCM/State_reg_2 , 
         \cm/configCM/State_reg_1 , c_addr_3__N_470, 
         \cm/configCM/Config_Notification_Valid_nxt , 
         \cm/configCM/State_reg_0 , Config_Notification_Valid, 
         \vga/CounterH/n78 , \vga/CounterH/n79 , rst_n_N_1047, 
         \vga/CounterH/n76 , \vga/CounterH/n77 , \vga/CounterH/n74 , 
         \vga/CounterH/n75 , \vga/CounterH/n72 , \vga/CounterH/n73 , 
         \vga/CounterH/n70 , \vga/CounterH/n71 , \vga/CounterH/n68 , 
         \vga/CounterH/n69 , \vga/CounterV/n78 , \vga/CounterV/n79 , 
         \vga/CounterV/n76 , \vga/CounterV/n77 , \vga/CounterV/n74 , 
         \vga/CounterV/n75 , \vga/CounterV/n72 , \vga/CounterV/n73 , 
         \vga/CounterV/n70 , \vga/CounterV/n71 , \vga/CounterV/n68 , 
         \vga/CounterV/n69 , \cm/assignCM/n1343 , \cm/assignCM/Left_UP_reg_0 , 
         \cm/assignCM/n1244 , \cm/assignCM/n1329 , 
         \cm/assignCM/Left_DOWN_reg_0 , \cm/assignCM/n1173 , 
         \cm/assignCM/n8580 , \cm/assignCM/clk_c_enable_151 , Data_VGA_0, 
         \cm/assignCM/n1242 , \cm/assignCM/n9133 , \cm/assignCM/Left_UP_reg_2 , 
         \cm/assignCM/n1243 , \cm/assignCM/Left_UP_reg_1 , \cm/assignCM/n1171 , 
         \cm/assignCM/n1172 , Data_VGA_1, Data_VGA_2, 
         \cm/assignCM/Left_UP_reg_3 , \cm/assignCM/n1241 , 
         \cm/assignCM/Left_DOWN_reg_3 , \cm/assignCM/n1170 , Data_VGA_3, 
         \cm/assignCM/n8965 , \cm/assignCM/Left_DOWN_reg_4 , 
         \cm/assignCM/Right_UP_reg_4 , \cm/assignCM/n8069 , Data_VGA_4, 
         \cm/assignCM/n1238 , \cm/assignCM/n1239 , \cm/assignCM/n1167 , 
         \cm/assignCM/n1168 , Data_VGA_5, Data_VGA_6, \cm/assignCM/n16 , 
         \cm/assignCM/Left_DOWN_reg_7 , \cm/assignCM/Right_UP_reg_7 , 
         \cm/assignCM/n8067 , Data_VGA_7, \cm/assignCM/n1235 , 
         \cm/assignCM/n1236 , \cm/assignCM/n1164 , \cm/assignCM/n1165 , 
         Data_VGA_8, Data_VGA_9, button_signal_DEBUG_VGA, \cm/Counter_X_Valid , 
         \cm/Counter_Y_Valid , \cm/assignCM/Left_UP_reg_10 , 
         \cm/assignCM/n1234 , \cm/assignCM/n1163 , Data_VGA_10, 
         \cm/assignCM/n9 , \cm/assignCM/Left_UP_reg_11 , 
         \cm/assignCM/Left_DOWN_reg_11 , \cm/assignCM/n1162 , Data_VGA_11, 
         \cm/configCM/n2850 , Error_Valid, VGA_error_data_3_N_13_1, 
         VGA_Notification_1, VGA_Notification_Valid, VGA_error_data_3_N_13_0, 
         VGA_Notification_0, VGA_error_data_3_N_6_1, VGA_error_data_3_N_6_0, 
         \FIFO_CM_error/clk_c_enable_210 , \FIFO_CM_error/w_data_reg_0 , 
         \FIFO_CM_error/w_data_reg_1 , VGA_error_data_3_N_13_2, n8439, 
         \FIFO_CM_error/w_data_reg_2 , n9174, VGA_Notification_3, 
         VGA_error_data_3_N_6_3, \FIFO_CM_error/w_data_reg_3 , clk_VGA, 
         \FIFO_CM_error/n9162 , button_signal_DEBUG_UART, 
         \FIFO_CM_error/w_empty_reg , \FIFO_UART_CM/n9172 , 
         \FIFO_UART_CM/w_empty_reg , UART_valid_out, clk_UART, 
         \FIFO_UART_CM/clk_c_enable_221 , \FIFO_UART_info/n9167 , 
         \FIFO_UART_info/w_empty_reg , n8410, n1364, \vga/CounterH/n2351 , 
         n9150, n472, data, n8008, \uart/n130 , n4737, n4218, 
         \uart/UART_STATE/n4184 , clk_c_enable_222, rst_n_N_350, n9113, n474, 
         n476, n4237, n4239, clk_c_enable_224, n4233, n4235, n4229, n4231, 
         \uart/UART_STATE/wait_iteration_step_reg_1 , 
         \uart/UART_STATE/wait_iteration_step_reg_0 , n4227, n2, valid_data, 
         valid_error_next_N_411, \uart/n2346 , 
         \uart/UART_STATE/clk_UART_enable_2 , UART_valid_error, 
         \uart/UART_STATE/n9173 , \uart/UART_STATE/n7917 , 
         \uart/UART_STATE/clk_UART_enable_5 , \n9391\000/BUF1 , 
         \cm/assignCM/Current_Qudran_Config_reg_0 , 
         \cm/assignCM/clk_c_enable_157 , 
         \cm/assignCM/VGA_Notification_nxt_3__N_893 , 
         \cm/assignCM/VGA_Notification_nxt_3_N_889_1 , 
         \cm/assignCM/Previous_Qudran_Config_reg_1 , 
         \cm/assignCM/Previous_Qudran_Config_reg_0 , n1367, n8407, 
         \vga/CounterV/n2353 , \cd/CLOCK_DIVIDER_CONFIG/n9130 , n9112, 
         c_addr_3, c_addr_1, c_addr_0, c_addr_2, c_valid, c_UART_ready, n9163, 
         n5259, \cd/CLOCK_DIVIDER_CONFIG/n9142 , c_VGA_ready, 
         \cm/configCM/n2084 , \cm/configCM/clk_c_enable_208 , 
         \cm/configCM/RXD_Data_reg_14 , \cm/configCM/RXD_Data_reg_13 , 
         \cm/configCM/n3931 , \cm/configCM/n8513 , \cm/configCM/n4942 , 
         \cm/configCM/n9194 , \cm/configCM/n8488 , 
         \cm/configCM/RXD_Data_reg_0 , \cm/configCM/n8541 , 
         \cm/configCM/c_data_nxt_13_N_517_0 , \cm/configCM/clk_c_enable_27 , 
         \cm/configCM/RXD_Data_reg_1 , \cm/configCM/n23 , 
         \cm/configCM/c_data_nxt_13_N_517_1 , \cm/configCM/clk_c_enable_25 , 
         \cm/configCM/n9159 , \cm/configCM/n5 , \cm/configCM/RXD_Data_reg_2 , 
         \cm/configCM/c_data_nxt_13_N_517_2 , \cm/configCM/clk_c_enable_30 , 
         \cm/configCM/clk_c_enable_60 , c_ready_next_N_346, c_ready_1, 
         \cd/CLOCK_DIVIDER_CONFIG/n9164 , \cm/c_data_12 , \cm/c_data_13 , 
         n9125, n3408, c_data_1_derived_1, H_BackPorch_nxt_7__N_782, 
         c_ready_nxt_N_906, c_ready_Assign, \cm/assignCM/clk_c_enable_128 , 
         \vga/config1/n5 , \cm/configCM/n32 , \cd/CNT_VGA/n198 , 
         \cd/CNT_VGA/n199 , rst_n_N_52, \cd/CNT_VGA/n196 , \cd/CNT_VGA/n197 , 
         \cd/CNT_VGA/n194 , \cd/CNT_VGA/n195 , \cd/CNT_VGA/n192 , 
         \cd/CNT_VGA/n193 , \cd/CNT_VGA/n190 , \cd/CNT_VGA/n191 , 
         \cd/CNT_VGA/n188 , \cd/CNT_VGA/n189 , \cd/CNT_VGA/n186 , 
         \cd/CNT_VGA/n187 , \cd/CNT_VGA/n184 , \cd/CNT_VGA/n185 , 
         \cd/CNT_VGA/n182 , \cd/CNT_VGA/n183 , \cd/CNT_VGA/n180 , 
         \cd/CNT_VGA/n181 , \cd/CNT_VGA/n178 , \cd/CNT_VGA/n179 , 
         \cd/CNT_VGA/n176 , \cd/CNT_VGA/n177 , \cd/CNT_VGA/n174 , 
         \cd/CNT_VGA/n175 , \cd/CNT_VGA/n172 , \cd/CNT_VGA/n173 , 
         \cd/CNT_VGA/n170 , \cd/CNT_VGA/n171 , \cd/CNT_VGA/n168 , 
         \cd/CNT_VGA/n169 , \cd/CLOCK_DIVIDER_CONFIG/n4225 , 
         \cd/CLOCK_DIVIDER_CONFIG/baudrate_next_23_N_262_4 , 
         \cd/CLOCK_DIVIDER_CONFIG/baudrate_next_23_N_262_3 , n9189, 
         \cd/CLOCK_DIVIDER_CONFIG/n4221 , baudrate_next_23_N_262_6, 
         H_Left_Margin_nxt_8__N_959, V_FrontPorch_nxt_9_N_804_3, 
         \cd/CLOCK_DIVIDER_CONFIG/clk_c_enable_158 , clk_DB, 
         \cd/CNT_DB/clkout_N_118 , clk_c_enable_198, \cd/CNT_LM/clkout_N_118 , 
         \vga/config1/H_Left_Margin_nxt_5 , clkout_N_203, rst_n_N_144, 
         \FIFO_UART_CM/clk_c_enable_166 , \cd/CNT_VGA/clkout_N_118 , 
         \cm/counterH/n9121 , \cm/counterV/n9120 , 
         \cm/assignCM/H_BackPorch_nxt_7_N_774_5 , \cm/assignCM/n9187 , 
         clk_c_enable_93, n9183, button_signal_VS, n9124, button_signal_HS, 
         \cm/assignCM/Current_Qudran_Config_nxt_1_N_757_0 , 
         \cm/assignCM/clk_c_enable_95 , 
         \cm/assignCM/Current_Qudran_Config_nxt_1_N_757_1 , 
         \cm/configCM/State_nxt_2_N_474_1 , UART_out_CM_data_empty, 
         \cm/configCM/State_nxt_2__N_483 , \cm/configCM/State_nxt_2__N_488 , 
         \cm/configCM/State_nxt_0 , \cm/configCM/n3935 , \cm/configCM/n39 , 
         \cm/configCM/State_nxt_1 , \cm/configCM/State_nxt_2__N_473 , 
         \cm/configCM/State_nxt_2 , \cm/configCM/n3921 , 
         \cm/configCM/Err_nxt_N_612 , \cm/configCM/n9140 , n150, n151, n148, 
         n149, n146, n147, n144, n145, n142, n143, n140, n141, n138, n139, 
         n136, n137, n134, n135, n132, n133, n130, n131, n128, n129, 
         \uart/SAMPLER/nr_0_reg_3 , \uart/SAMPLER/nr_1_reg_3 , 
         \uart/SAMPLER/nr_0_reg_2 , \uart/SAMPLER/nr_0_reg_0 , 
         \uart/SAMPLER/nr_0_reg_1 , \uart/SAMPLER/nr_1_reg_0 , 
         \uart/SAMPLER/nr_1_reg_1 , \uart/SAMPLER/out_next_N_449 , 
         \uart/SAMPLER/n8573 , clk_UART_enable_3, \db/DB_DF_UART/ctr_ff_1 , 
         \db/DB_DF_UART/ctr_ff_0 , \db/DB_DF_UART/n8500 , 
         \db/DB_DF_UART/n8522 , n4203, \db/DB_DF_VGA/ctr_ff_0 , 
         \db/DB_DF_VGA/ctr_ff_1 , \db/DB_DF_VGA/n8506 , \db/DB_DF_VGA/n8528 , 
         n4202, \db/DB_HS/ctr_ff_0 , \db/DB_HS/ctr_ff_1 , \db/DB_HS/n8494 , 
         \db/DB_HS/n8485 , n4194, \db/DB_VS/ctr_ff_1 , \db/DB_VS/ctr_ff_0 , 
         \db/DB_VS/n8504 , \db/DB_VS/n8527 , n4204, in_c, flag_reg, 
         \uart/SAMPLER/flag_next , clk_UART_enable_1, \uart/SAMPLER/n9190 , 
         \uart/UART_STATE/n456 , n473, n5308, \uart/UART_STATE/n9091 , 
         \uart/UART_STATE/n2531 , \uart/UART_STATE/n8227 , clk_c_enable_87, 
         n8285, n2529, parity_check_reg, 
         \uart/UART_STATE/parity_check_next_N_416 , clk_UART_enable_4, 
         stop_iteration_step_reg_0, stop_iteration_step_reg_1, 
         \uart/UART_STATE/n18 , \uart/UART_STATE/n19 , \uart/clk_c_enable_218 , 
         \uart/SAMPLER/n24_adj_1128 , \uart/SAMPLER/n9193 , clk_c_enable_168, 
         n5755, \uart/SAMPLER/n22_adj_1129 , \uart/SAMPLER/n23_adj_1130 , 
         \uart/SAMPLER/n24 , \uart/SAMPLER/n25 , clk_c_enable_154, 
         \uart/SAMPLER/nr_1_reg_2 , \uart/SAMPLER/n22 , \uart/SAMPLER/n23 , 
         \uart/SAMPLER/val_reg_0 , \uart/SAMPLER/val_reg_1 , 
         \uart/SAMPLER/n24_adj_1134 , \uart/SAMPLER/n25_adj_1127 , 
         \uart/clk_c_enable_215 , \uart/SAMPLER/val_reg_3 , 
         \uart/SAMPLER/val_reg_2 , \uart/SAMPLER/n22_adj_1133 , 
         \uart/SAMPLER/n23_adj_1132 , 
         \uart/UART_STATE/data_iteration_step_reg_0 , 
         \uart/UART_STATE/data_iteration_step_reg_1 , \uart/UART_STATE/n24 , 
         \uart/UART_STATE/n25 , \uart/UART_STATE/data_iteration_step_reg_2 , 
         \uart/UART_STATE/n23 , \uart/UART_STATE/n8437 , 
         \uart/UART_STATE/n8253 , \uart/clk_c_enable_212 , n9144, n25, n9197, 
         n513, n1373, Active_nxt_N_1068, \vga/assgncolor/n6 , 
         \vga/assgncolor/Active_nxt , \vga/assgncolor/Active_reg , 
         \vga/config1/H_Count_Max_nxt_11__N_1026 , H_Count_Max_nxt_11__N_1022, 
         \vga/config1/H_Count_Max_nxt_11__N_1024 , 
         \vga/config1/H_Count_Max_nxt_11__N_1020 , 
         \vga/config1/H_Count_Max_nxt_11__N_1021 , 
         \vga/config1/H_Count_Max_nxt_10 , 
         \vga/config1/H_Count_Max_nxt_11__N_1019 , 
         \vga/config1/H_Count_Max_nxt_11 , 
         \vga/config1/H_Left_Margin_nxt_8__N_964 , 
         \vga/config1/H_Left_Margin_nxt_8__N_965 , 
         \vga/config1/H_Left_Margin_nxt_8__N_962 , 
         \vga/config1/H_Left_Margin_nxt_8__N_963 , 
         \vga/config1/H_Left_Margin_nxt_8__N_958 , 
         \vga/config1/H_Left_Margin_nxt_8__N_960 , 
         \vga/config1/H_Left_Margin_nxt_8__N_954 , 
         \vga/config1/H_Right_Margin_nxt_10__N_988 , 
         \vga/config1/H_Right_Margin_nxt_10__N_989 , 
         \vga/config1/H_Right_Margin_nxt_10__N_986 , 
         \vga/config1/H_Right_Margin_nxt_10__N_987 , 
         \vga/config1/H_Right_Margin_nxt_10__N_984 , 
         \vga/config1/H_Right_Margin_nxt_10__N_985 , 
         \vga/config1/H_Right_Margin_nxt_10__N_982 , 
         \vga/config1/H_Right_Margin_nxt_10__N_983 , 
         \vga/config1/H_Sync_Pulse_nxt_7__N_1008 , 
         \vga/config1/H_Sync_Pulse_nxt_7__N_1009 , 
         \vga/config1/H_Sync_Pulse_nxt_7__N_1006 , 
         \vga/config1/H_Sync_Pulse_nxt_7__N_1007 , 
         \vga/config1/H_Sync_Pulse_nxt_7__N_1004 , 
         \vga/config1/H_Sync_Pulse_nxt_7__N_1005 , 
         \vga/config1/H_Sync_Pulse_nxt_7__N_1003 , 
         \vga/config1/Load_nxt_N_1044 , 
         \vga/config1/V_Count_Max_nxt_11__N_1041 , 
         \vga/config1/V_Count_Max_nxt_11__N_1042 , 
         \vga/config1/V_Count_Max_nxt_11__N_1039 , V_Count_Max_nxt_11__N_1040, 
         \vga/config1/V_Count_Max_nxt_11__N_1037 , 
         \vga/config1/V_Count_Max_nxt_11__N_1038 , 
         \vga/config1/V_Count_Max_nxt_11__N_1034 , 
         \vga/config1/V_Count_Max_nxt_11__N_1035 , 
         \vga/config1/V_Left_Margin_nxt_5__N_978 , 
         \vga/config1/V_Left_Margin_nxt_5__N_980 , VCC_net, 
         \vga/config1/H_Count_Max_nxt_0 , 
         \vga/config1/V_Left_Margin_nxt_5__N_975 , 
         \vga/config1/V_Left_Margin_nxt_5__N_976 , 
         \vga/config1/V_Left_Margin_nxt_5__N_973 , n9175, 
         \vga/config1/V_Right_Margin_nxt_9__N_1001 , 
         \vga/config1/V_Right_Margin_nxt_9__N_1002 , n9185, \cm/assignCM/n11 , 
         \vga/config1/V_Right_Margin_nxt_9__N_997 , 
         \vga/config1/V_Right_Margin_nxt_9__N_998 , 
         \vga/config1/V_Right_Margin_nxt_9__N_996 , n9179, 
         \vga/config1/H_Count_Max_nxt_1 , 
         \vga/config1/V_Right_Margin_nxt_9__N_993 , 
         \vga/config1/V_Right_Margin_nxt_9__N_994 , w_empty_reg, 
         clk_LM_enable_2, \vga/config1/H_Count_Max_nxt_2 , 
         \vga/config1/V_Sync_Pulse_nxt_7__N_1016 , 
         \vga/config1/V_Sync_Pulse_nxt_7__N_1017 , 
         \db/DB_DF_UART/clk_DB_enable_4 , n4, \db/DB_HS/clk_DB_enable_3 , 
         \db/DB_DF_VGA/clk_DB_enable_2 , n5, \db/DB_VS/clk_DB_enable_1 , 
         \vga/config1/H_Count_Max_nxt_3 , \FIFO_UART_error/n9155 , 
         n12_adj_1155, n4_adj_1151, n8604, n9186, n6_adj_1152, n8607, n12, 
         n9180, n8564, n6, n8567, n4_adj_1147, n6_adj_1148, n8589, 
         \cm/configCM/RXD_Data_reg_10 , \cm/configCM/n9146 , 
         \cm/configCM/n9203 , \cm/assignCM/Left_DOWN_reg_1 , 
         \cm/assignCM/n1337 , \cm/assignCM/Left_DOWN_reg_10 , 
         \cm/assignCM/Left_DOWN_reg_9 , \cm/assignCM/Right_UP_reg_9 , 
         \cm/assignCM/Right_UP_reg_8 , \cm/assignCM/Left_DOWN_reg_8 , 
         \cm/assignCM/Right_UP_reg_6 , \cm/assignCM/Left_DOWN_reg_6 , 
         \cm/assignCM/Left_DOWN_reg_5 , \cm/assignCM/Right_UP_reg_5 , 
         \cm/assignCM/Left_DOWN_reg_2 , \cm/assignCM/n8492 , paritybit, n9119, 
         n9135, n9118, n109, \uart/UART_STATE/n6 , \uart/stopbit , 
         \uart/n9192 , \cm/configCM/n8413 , \cm/configCM/n3693 , 
         \cm/configCM/n9128 , UART_out_CM_data_5, UART_out_CM_data_4, 
         \cm/configCM/clk_c_enable_220 , \cm/configCM/clk_c_enable_69 , 
         \cm/configCM/RXD_Data_reg_4 , \cm/configCM/RXD_Data_reg_5 , 
         \cm/configCM/n9389 , \cm/configCM/n9158 , \cm/configCM/n9123 , 
         \cm/configCM/n9134 , \cm/configCM/n8547 , \cm/configCM/n3200 , 
         \cm/configCM/n4108 , \cm/configCM/n22 , \cm/configCM/n16 , 
         \cm/configCM/n20 , \cm/configCM/n4_adj_1100 , \cm/assignCM/n8634 , 
         \cm/assignCM/n5 , n9147, btnVS_c, btnHS_c, clk_c_enable_19, 
         button_ff_adj_1146, button_ff, n9184, n9188, n8593, n8746, n9181, 
         n8553, n9178, n8702, n9176, n9177, n9115, n9154, n8939, n9169, n9168, 
         n9131, n9143, \FIFO_CM_error/clk_c_enable_170 , VGA_error_data_2, 
         VGA_error_data_3, \uart/n9182 , clk_VGA_enable_1, 
         \uart/UART_STATE/n9151 , \uart/UART_STATE/n9090 , n8448, 
         \uart/SAMPLER/n8938 , n10, \FIFO_CM_error/clk_LM_enable_4 , 
         VGA_error_empty, n10_adj_1154, \FIFO_UART_CM/w_data_reg_7 , 
         \FIFO_UART_CM/w_data_reg_6 , UART_out_CM_data_6, UART_out_CM_data_7, 
         UART_out_CM_data_3, UART_out_CM_data_2, \cm/configCM/RXD_Data_reg_3 , 
         \cm/configCM/n9170 , \cm/configCM/n9129 , \cm/configCM/n8002 , 
         \cm/configCM/n8 , \cm/configCM/n3937 , \cm/configCM/n8418 , 
         \cm/configCM/n8468 , \cm/configCM/RXD_Data_reg_6 , 
         \cm/configCM/RXD_Data_reg_7 , \cm/configCM/n8470 , UART_out_CM_data_1, 
         UART_out_CM_data_0, \cm/configCM/n8986 , \cm/configCM/n9126 , 
         \cm/configCM/n5_adj_1101 , \cm/configCM/n22_adj_1102 , 
         \cm/configCM/n9110 , \cm/configCM/n9171 , \cm/configCM/n8496 , 
         \cm/assignCM/n8486 , Current_Qudran_Config_nxt_1__N_886, n9148, 
         UART_error_empty, \FIFO_UART_CM/w_data_reg_5 , 
         \FIFO_UART_CM/w_data_reg_4 , \FIFO_UART_CM/w_data_reg_2 , 
         \FIFO_UART_CM/w_data_reg_3 , button_ff_adj_1142, btnUART_c, btnVGA_c, 
         button_ff_adj_1143, n2266, n2262, clk_c_enable_176, 
         \FIFO_UART_CM/clk_LM_enable_3 , VGA_error_data_0, VGA_error_data_1, 
         \FIFO_UART_CM/w_data_reg_1 , \FIFO_UART_CM/w_data_reg_0 , 
         UART_error_data_0, UART_error_data_1, BLUE_c_2, RED_c_0, RED_c_1, 
         GREEN_c_3, BLUE_c_1, GREEN_c_2, BLUE_c_0, GREEN_c_1, RED_c_2, 
         GREEN_c_0, RED_c_3, BLUE_c_3, rst_n_c, \lm/leds_UART_info_0 , 
         \lm/leds_CM_error_0 , LEDS_c_0, LEDS_c_7, \lm/leds_CM_error_1 , 
         \lm/leds_UART_info_1 , LEDS_c_1, \lm/leds_CM_error_2 , LEDS_c_6, 
         \lm/leds_CM_error_3 , \lm/leds_UART_error_1 , LEDS_c_2, 
         \lm/leds_UART_error_0 , LEDS_c_5, LEDS_c_3, LEDS_c_4;

  SLICE_0 SLICE_0( .B1(Count_h_8), .A1(H_left_margin_8), .B0(Count_h_7), 
    .A0(H_left_margin_7), .FCI(n7670), .FCO(n7671));
  SLICE_1 SLICE_1( .B1(Count_h_6), .A1(H_left_margin_6), .B0(H_left_margin_5), 
    .A0(Count_h_5), .FCI(n7669), .FCO(n7670));
  SLICE_2 SLICE_2( .FCI(n7735), .F0(n1801));
  SLICE_3 SLICE_3( .B1(counter_23_N_178_10), .A1(counter_23), .B0(counter_22), 
    .A0(counter_23_N_178_10), .FCI(n7734), .FCO(n7735));
  SLICE_4 SLICE_4( .B1(counter_23_N_178_10), .A1(counter_21), 
    .B0(counter_23_N_178_10), .A0(counter_20), .FCI(n7733), .FCO(n7734));
  SLICE_5 SLICE_5( .B1(counter_23_N_178_10), .A1(counter_19), .B0(counter_18), 
    .A0(counter_23_N_178_10), .FCI(n7732), .FCO(n7733));
  SLICE_6 SLICE_6( .B1(Count_h_4), .A1(H_left_margin_4), .B0(H_left_margin_3), 
    .A0(Count_h_3), .FCI(n7668), .FCO(n7669));
  SLICE_7 SLICE_7( .B1(H_left_margin_2), .A1(Count_h_2), .B0(Count_h_1), 
    .A0(H_left_margin_1), .FCI(n7667), .FCO(n7668));
  SLICE_8 SLICE_8( .B1(counter_17), .A1(counter_23_N_178_10), .B0(counter_16), 
    .A0(counter_23_N_178_10), .FCI(n7731), .FCO(n7732));
  SLICE_9 SLICE_9( .B1(counter_23_N_178_10), .A1(counter_15), 
    .B0(counter_23_N_178_10), .A0(counter_14), .FCI(n7730), .FCO(n7731));
  SLICE_10 SLICE_10( .B1(counter_23_N_178_10), .A1(counter_13), 
    .B0(counter_12), .A0(counter_23_N_178_10), .M1(UART_out_data_7), 
    .M0(UART_out_data_6), .CE(clk_c_enable_81), .LSR(n2268), .CLK(clk_c), 
    .FCI(n7729), .Q0(\lm/leds_UART_info_6 ), .Q1(leds_UART_info_7), 
    .FCO(n7730));
  SLICE_11 SLICE_11( .B1(counter_11), .A1(counter_23_N_178_10), 
    .B0(counter_23_N_178_10), .A0(counter_10), .M1(UART_out_data_5), 
    .M0(UART_out_data_4), .CE(clk_c_enable_81), .LSR(n2268), .CLK(clk_c), 
    .FCI(n7728), .Q0(\lm/leds_UART_info_4 ), .Q1(\lm/leds_UART_info_5 ), 
    .FCO(n7729));
  SLICE_12 SLICE_12( .B1(counter_23_N_178_9), .A1(counter_9), .B0(counter_8), 
    .A0(counter_23_N_178_8), .M1(UART_out_data_3), .M0(UART_out_data_2), 
    .CE(clk_c_enable_81), .LSR(n2268), .CLK(clk_c), .FCI(n7727), 
    .Q0(\lm/leds_UART_info_2 ), .Q1(\lm/leds_UART_info_3 ), .FCO(n7728));
  SLICE_13 SLICE_13( .B1(counter_7), .A1(counter_23_N_178_7), 
    .B0(counter_23_N_178_6), .A0(counter_6), .FCI(n7726), .FCO(n7727));
  SLICE_14 SLICE_14( .B1(counter_23_N_178_5), .A1(counter_5), .B0(counter_4), 
    .A0(counter_23_N_178_4), .FCI(n7725), .FCO(n7726));
  SLICE_15 SLICE_15( .B1(counter_23_N_178_3), .A1(counter_3), 
    .B0(counter_23_N_178_2), .A0(counter_2), .FCI(n7724), .FCO(n7725));
  SLICE_16 SLICE_16( .B1(counter_23_N_178_1), .A1(counter_1), .B0(counter_0), 
    .FCO(n7724));
  SLICE_17 SLICE_17( .B1(Count_h_0), .A1(H_left_margin_0), .FCO(n7667));
  SLICE_18 SLICE_18( .FCI(n7671), .F0(n1947));
  vga_assgncolor_SLICE_19 \vga/assgncolor/SLICE_19 ( .B0(Count_h_11), 
    .FCI(\vga/assgncolor/n7712 ), .F1(\vga/assgncolor/Active_nxt_N_1067 ));
  vga_assgncolor_SLICE_20 \vga/assgncolor/SLICE_20 ( 
    .B1(\vga/H_right_margin_10 ), .A1(Count_h_10), .B0(\vga/H_right_margin_9 ), 
    .A0(Count_h_9), .FCI(\vga/assgncolor/n7711 ), .FCO(\vga/assgncolor/n7712 ));
  vga_assgncolor_SLICE_21 \vga/assgncolor/SLICE_21 ( .B1(Count_h_8), 
    .A1(\vga/H_right_margin_8 ), .B0(\vga/H_right_margin_7 ), .A0(Count_h_7), 
    .FCI(\vga/assgncolor/n7710 ), .FCO(\vga/assgncolor/n7711 ));
  vga_assgncolor_SLICE_22 \vga/assgncolor/SLICE_22 ( 
    .B1(\vga/H_right_margin_6 ), .A1(Count_h_6), .B0(Count_h_5), 
    .A0(\vga/H_right_margin_5 ), .FCI(\vga/assgncolor/n7709 ), 
    .FCO(\vga/assgncolor/n7710 ));
  vga_assgncolor_SLICE_23 \vga/assgncolor/SLICE_23 ( 
    .B1(\vga/H_right_margin_4 ), .A1(Count_h_4), .B0(Count_h_3), 
    .A0(\vga/H_right_margin_3 ), .FCI(\vga/assgncolor/n7708 ), 
    .FCO(\vga/assgncolor/n7709 ));
  vga_assgncolor_SLICE_24 \vga/assgncolor/SLICE_24 ( .B1(Count_h_2), 
    .A1(\vga/H_right_margin_2 ), .B0(\vga/H_right_margin_1 ), .A0(Count_h_1), 
    .FCI(\vga/assgncolor/n7707 ), .FCO(\vga/assgncolor/n7708 ));
  vga_assgncolor_SLICE_25 \vga/assgncolor/SLICE_25 ( 
    .B1(\vga/H_right_margin_0 ), .A1(Count_h_0), .FCO(\vga/assgncolor/n7707 ));
  vga_assgncolor_SLICE_26 \vga/assgncolor/SLICE_26 ( .B0(Count_v_11), 
    .FCI(\vga/assgncolor/n7706 ), .F1(\vga/assgncolor/Active_nxt_N_1069 ));
  vga_assgncolor_SLICE_27 \vga/assgncolor/SLICE_27 ( .A1(Count_v_10), 
    .B0(Count_v_9), .A0(\vga/V_right_margin_9 ), .FCI(\vga/assgncolor/n7705 ), 
    .FCO(\vga/assgncolor/n7706 ));
  vga_assgncolor_SLICE_28 \vga/assgncolor/SLICE_28 ( 
    .B1(\vga/V_right_margin_8 ), .A1(Count_v_8), .B0(\vga/V_right_margin_7 ), 
    .A0(Count_v_7), .FCI(\vga/assgncolor/n7704 ), .FCO(\vga/assgncolor/n7705 ));
  vga_assgncolor_SLICE_29 \vga/assgncolor/SLICE_29 ( 
    .B1(\vga/V_right_margin_6 ), .A1(Count_v_6), .B0(\vga/V_right_margin_5 ), 
    .A0(Count_v_5), .FCI(\vga/assgncolor/n7703 ), .FCO(\vga/assgncolor/n7704 ));
  vga_assgncolor_SLICE_30 \vga/assgncolor/SLICE_30 ( .B1(Count_v_4), 
    .A1(\vga/V_right_margin_4 ), .B0(\vga/V_right_margin_3 ), .A0(Count_v_3), 
    .FCI(\vga/assgncolor/n7702 ), .FCO(\vga/assgncolor/n7703 ));
  vga_assgncolor_SLICE_31 \vga/assgncolor/SLICE_31 ( .B1(Count_v_2), 
    .A1(\vga/V_right_margin_2 ), .B0(Count_v_1), .A0(\vga/V_right_margin_1 ), 
    .FCI(\vga/assgncolor/n7701 ), .FCO(\vga/assgncolor/n7702 ));
  vga_assgncolor_SLICE_32 \vga/assgncolor/SLICE_32 ( 
    .B1(\vga/V_right_margin_0 ), .A1(Count_v_0), .FCO(\vga/assgncolor/n7701 ));
  vga_CounterV_SLICE_33 \vga/CounterV/SLICE_33 ( .A0(Count_v_11), 
    .FCI(\vga/CounterV/n7817 ), .F0(\vga/CounterV/n54 ));
  vga_CounterV_SLICE_34 \vga/CounterV/SLICE_34 ( .B1(Count_v_10), 
    .A0(Count_v_9), .FCI(\vga/CounterV/n7816 ), .F0(\vga/CounterV/n56 ), 
    .F1(\vga/CounterV/n55 ), .FCO(\vga/CounterV/n7817 ));
  vga_CounterV_SLICE_35 \vga/CounterV/SLICE_35 ( .A1(Count_v_8), 
    .B0(Count_v_7), .FCI(\vga/CounterV/n7815 ), .F0(\vga/CounterV/n58 ), 
    .F1(\vga/CounterV/n57 ), .FCO(\vga/CounterV/n7816 ));
  vga_CounterV_SLICE_36 \vga/CounterV/SLICE_36 ( .A1(Count_v_6), 
    .A0(Count_v_5), .FCI(\vga/CounterV/n7814 ), .F0(\vga/CounterV/n60 ), 
    .F1(\vga/CounterV/n59 ), .FCO(\vga/CounterV/n7815 ));
  vga_CounterV_SLICE_37 \vga/CounterV/SLICE_37 ( .B1(Count_v_4), 
    .B0(Count_v_3), .FCI(\vga/CounterV/n7813 ), .F0(\vga/CounterV/n62 ), 
    .F1(\vga/CounterV/n61 ), .FCO(\vga/CounterV/n7814 ));
  vga_CounterV_SLICE_38 \vga/CounterV/SLICE_38 ( .B1(Count_v_2), 
    .B0(Count_v_1), .FCI(\vga/CounterV/n7812 ), .F0(\vga/CounterV/n64 ), 
    .F1(\vga/CounterV/n63 ), .FCO(\vga/CounterV/n7813 ));
  vga_CounterV_SLICE_39 \vga/CounterV/SLICE_39 ( .A1(Count_v_0), 
    .F1(\vga/CounterV/n65 ), .FCO(\vga/CounterV/n7812 ));
  vga_CounterV_SLICE_40 \vga/CounterV/SLICE_40 ( .B0(\vga/V_count_max_11 ), 
    .A0(Count_v_11), .FCI(\vga/CounterV/n7723 ), .F1(\vga/CounterV/n1907 ));
  vga_CounterV_SLICE_41 \vga/CounterV/SLICE_41 ( .B1(Count_v_10), 
    .A1(\vga/V_count_max_10 ), .B0(Count_v_9), .A0(\vga/V_count_max_9 ), 
    .FCI(\vga/CounterV/n7722 ), .FCO(\vga/CounterV/n7723 ));
  vga_CounterV_SLICE_42 \vga/CounterV/SLICE_42 ( .B1(Count_v_8), 
    .A1(\vga/V_count_max_8 ), .B0(\vga/V_count_max_7 ), .A0(Count_v_7), 
    .FCI(\vga/CounterV/n7721 ), .FCO(\vga/CounterV/n7722 ));
  vga_CounterV_SLICE_43 \vga/CounterV/SLICE_43 ( .B1(Count_v_6), 
    .A1(\vga/V_count_max_6 ), .B0(\vga/V_count_max_5 ), .A0(Count_v_5), 
    .FCI(\vga/CounterV/n7720 ), .FCO(\vga/CounterV/n7721 ));
  vga_CounterV_SLICE_44 \vga/CounterV/SLICE_44 ( .B1(Count_v_4), 
    .A1(\vga/V_count_max_4 ), .B0(Count_v_3), .A0(V_count_max_3), 
    .FCI(\vga/CounterV/n7719 ), .FCO(\vga/CounterV/n7720 ));
  vga_CounterV_SLICE_45 \vga/CounterV/SLICE_45 ( .B1(Count_v_2), 
    .A1(\vga/V_count_max_2 ), .B0(\vga/V_count_max_1 ), .A0(Count_v_1), 
    .FCI(\vga/CounterV/n7718 ), .FCO(\vga/CounterV/n7719 ));
  vga_CounterV_SLICE_46 \vga/CounterV/SLICE_46 ( .B1(Count_v_0), 
    .A1(\vga/V_count_max_0 ), .FCO(\vga/CounterV/n7718 ));
  vga_CounterH_SLICE_47 \vga/CounterH/SLICE_47 ( .B0(Count_h_11), 
    .FCI(\vga/CounterH/n7823 ), .F0(\vga/CounterH/n54 ));
  vga_CounterH_SLICE_48 \vga/CounterH/SLICE_48 ( .A1(Count_h_10), 
    .B0(Count_h_9), .FCI(\vga/CounterH/n7822 ), .F0(\vga/CounterH/n56 ), 
    .F1(\vga/CounterH/n55 ), .FCO(\vga/CounterH/n7823 ));
  vga_CounterH_SLICE_49 \vga/CounterH/SLICE_49 ( .A1(Count_h_8), 
    .A0(Count_h_7), .FCI(\vga/CounterH/n7821 ), .F0(\vga/CounterH/n58 ), 
    .F1(\vga/CounterH/n57 ), .FCO(\vga/CounterH/n7822 ));
  vga_CounterH_SLICE_50 \vga/CounterH/SLICE_50 ( .B1(Count_h_6), 
    .A0(Count_h_5), .FCI(\vga/CounterH/n7820 ), .F0(\vga/CounterH/n60 ), 
    .F1(\vga/CounterH/n59 ), .FCO(\vga/CounterH/n7821 ));
  vga_CounterH_SLICE_51 \vga/CounterH/SLICE_51 ( .B1(Count_h_4), 
    .A0(Count_h_3), .FCI(\vga/CounterH/n7819 ), .F0(\vga/CounterH/n62 ), 
    .F1(\vga/CounterH/n61 ), .FCO(\vga/CounterH/n7820 ));
  vga_CounterH_SLICE_52 \vga/CounterH/SLICE_52 ( .A1(Count_h_2), 
    .A0(Count_h_1), .FCI(\vga/CounterH/n7818 ), .F0(\vga/CounterH/n64 ), 
    .F1(\vga/CounterH/n63 ), .FCO(\vga/CounterH/n7819 ));
  vga_CounterH_SLICE_53 \vga/CounterH/SLICE_53 ( .B1(Count_h_0), 
    .F1(\vga/CounterH/n65 ), .FCO(\vga/CounterH/n7818 ));
  vga_CounterH_SLICE_54 \vga/CounterH/SLICE_54 ( .B0(Count_h_11), 
    .A0(\vga/H_count_max_11 ), .FCI(\vga/CounterH/n7773 ), 
    .F1(\vga/CounterH/n1892 ));
  vga_CounterH_SLICE_55 \vga/CounterH/SLICE_55 ( .B1(\vga/H_count_max_10 ), 
    .A1(Count_h_10), .B0(Count_h_9), .A0(\vga/H_count_max_9 ), 
    .FCI(\vga/CounterH/n7772 ), .FCO(\vga/CounterH/n7773 ));
  vga_CounterH_SLICE_56 \vga/CounterH/SLICE_56 ( .B1(H_count_max_8), 
    .A1(Count_h_8), .B0(\vga/H_count_max_7 ), .A0(Count_h_7), 
    .FCI(\vga/CounterH/n7771 ), .FCO(\vga/CounterH/n7772 ));
  vga_CounterH_SLICE_57 \vga/CounterH/SLICE_57 ( .B1(\vga/H_count_max_6 ), 
    .A1(Count_h_6), .B0(Count_h_5), .A0(\vga/H_count_max_5 ), 
    .FCI(\vga/CounterH/n7770 ), .FCO(\vga/CounterH/n7771 ));
  vga_CounterH_SLICE_58 \vga/CounterH/SLICE_58 ( .B1(Count_h_4), 
    .A1(\vga/H_count_max_4 ), .B0(\vga/H_count_max_3 ), .A0(Count_h_3), 
    .FCI(\vga/CounterH/n7769 ), .FCO(\vga/CounterH/n7770 ));
  vga_CounterH_SLICE_59 \vga/CounterH/SLICE_59 ( .B1(Count_h_2), 
    .A1(\vga/H_count_max_2 ), .B0(\vga/H_count_max_1 ), .A0(Count_h_1), 
    .FCI(\vga/CounterH/n7768 ), .FCO(\vga/CounterH/n7769 ));
  vga_CounterH_SLICE_60 \vga/CounterH/SLICE_60 ( .B1(\vga/H_count_max_0 ), 
    .A1(Count_h_0), .FCO(\vga/CounterH/n7768 ));
  cm_counterV_SLICE_61 \cm/counterV/SLICE_61 ( 
    .A0(\cm/counterV/Count_intern_reg_9 ), .DI0(\cm/counterV/n46 ), 
    .LSR(VSYNC_c), .CLK(clk_c), .FCI(\cm/counterV/n7833 ), 
    .F0(\cm/counterV/n46 ), .Q0(\cm/counterV/Count_intern_reg_9 ));
  cm_counterV_SLICE_62 \cm/counterV/SLICE_62 ( 
    .A1(\cm/counterV/Count_intern_reg_8 ), 
    .A0(\cm/counterV/Count_intern_reg_7 ), .DI1(\cm/counterV/n47 ), 
    .DI0(\cm/counterV/n48 ), .LSR(VSYNC_c), .CLK(clk_c), 
    .FCI(\cm/counterV/n7832 ), .F0(\cm/counterV/n48 ), 
    .Q0(\cm/counterV/Count_intern_reg_7 ), .F1(\cm/counterV/n47 ), 
    .Q1(\cm/counterV/Count_intern_reg_8 ), .FCO(\cm/counterV/n7833 ));
  cm_counterV_SLICE_63 \cm/counterV/SLICE_63 ( 
    .A1(\cm/counterV/Count_intern_reg_6 ), 
    .A0(\cm/counterV/Count_intern_reg_5 ), .DI1(\cm/counterV/n49 ), 
    .DI0(\cm/counterV/n50 ), .LSR(VSYNC_c), .CLK(clk_c), 
    .FCI(\cm/counterV/n7831 ), .F0(\cm/counterV/n50 ), 
    .Q0(\cm/counterV/Count_intern_reg_5 ), .F1(\cm/counterV/n49 ), 
    .Q1(\cm/counterV/Count_intern_reg_6 ), .FCO(\cm/counterV/n7832 ));
  cm_counterV_SLICE_64 \cm/counterV/SLICE_64 ( 
    .A1(\cm/counterV/Count_intern_reg_4 ), 
    .A0(\cm/counterV/Count_intern_reg_3 ), .DI1(\cm/counterV/n51 ), 
    .DI0(\cm/counterV/n52 ), .LSR(VSYNC_c), .CLK(clk_c), 
    .FCI(\cm/counterV/n7830 ), .F0(\cm/counterV/n52 ), 
    .Q0(\cm/counterV/Count_intern_reg_3 ), .F1(\cm/counterV/n51 ), 
    .Q1(\cm/counterV/Count_intern_reg_4 ), .FCO(\cm/counterV/n7831 ));
  cm_counterV_SLICE_65 \cm/counterV/SLICE_65 ( 
    .A1(\cm/counterV/Count_intern_reg_2 ), 
    .A0(\cm/counterV/Count_intern_reg_1 ), .DI1(\cm/counterV/n53 ), 
    .DI0(\cm/counterV/n54 ), .LSR(VSYNC_c), .CLK(clk_c), 
    .FCI(\cm/counterV/n7829 ), .F0(\cm/counterV/n54 ), 
    .Q0(\cm/counterV/Count_intern_reg_1 ), .F1(\cm/counterV/n53 ), 
    .Q1(\cm/counterV/Count_intern_reg_2 ), .FCO(\cm/counterV/n7830 ));
  cm_counterV_SLICE_66 \cm/counterV/SLICE_66 ( 
    .A1(\cm/counterV/Count_intern_reg_0 ), .DI1(\cm/counterV/n55 ), 
    .LSR(VSYNC_c), .CLK(clk_c), .F1(\cm/counterV/n55 ), 
    .Q1(\cm/counterV/Count_intern_reg_0 ), .FCO(\cm/counterV/n7829 ));
  cm_counterV_SLICE_67 \cm/counterV/SLICE_67 ( .A0(\cm/Counter_Y_9 ), 
    .DI0(\cm/counterV/n46_adj_1114 ), .LSR(\cm/counterV/n4195 ), .CLK(clk_c), 
    .FCI(\cm/counterV/n7828 ), .F0(\cm/counterV/n46_adj_1114 ), 
    .Q0(\cm/Counter_Y_9 ));
  cm_counterV_SLICE_68 \cm/counterV/SLICE_68 ( .A1(\cm/Counter_Y_8 ), 
    .A0(\cm/Counter_Y_7 ), .DI1(\cm/counterV/n47_adj_1116 ), 
    .DI0(\cm/counterV/n48_adj_1115 ), .LSR(\cm/counterV/n4195 ), .CLK(clk_c), 
    .FCI(\cm/counterV/n7827 ), .F0(\cm/counterV/n48_adj_1115 ), 
    .Q0(\cm/Counter_Y_7 ), .F1(\cm/counterV/n47_adj_1116 ), 
    .Q1(\cm/Counter_Y_8 ), .FCO(\cm/counterV/n7828 ));
  cm_counterV_SLICE_69 \cm/counterV/SLICE_69 ( .A1(\cm/Counter_Y_6 ), 
    .A0(\cm/Counter_Y_5 ), .DI1(\cm/counterV/n49_adj_1118 ), 
    .DI0(\cm/counterV/n50_adj_1117 ), .LSR(\cm/counterV/n4195 ), .CLK(clk_c), 
    .FCI(\cm/counterV/n7826 ), .F0(\cm/counterV/n50_adj_1117 ), 
    .Q0(\cm/Counter_Y_5 ), .F1(\cm/counterV/n49_adj_1118 ), 
    .Q1(\cm/Counter_Y_6 ), .FCO(\cm/counterV/n7827 ));
  cm_counterV_SLICE_70 \cm/counterV/SLICE_70 ( .A1(\cm/Counter_Y_4 ), 
    .A0(\cm/Counter_Y_3 ), .DI1(\cm/counterV/n51_adj_1120 ), 
    .DI0(\cm/counterV/n52_adj_1119 ), .LSR(\cm/counterV/n4195 ), .CLK(clk_c), 
    .FCI(\cm/counterV/n7825 ), .F0(\cm/counterV/n52_adj_1119 ), 
    .Q0(\cm/Counter_Y_3 ), .F1(\cm/counterV/n51_adj_1120 ), 
    .Q1(\cm/Counter_Y_4 ), .FCO(\cm/counterV/n7826 ));
  cm_counterV_SLICE_71 \cm/counterV/SLICE_71 ( .A1(\cm/Counter_Y_2 ), 
    .A0(\cm/Counter_Y_1 ), .DI1(\cm/counterV/n53_adj_1122 ), 
    .DI0(\cm/counterV/n54_adj_1121 ), .LSR(\cm/counterV/n4195 ), .CLK(clk_c), 
    .FCI(\cm/counterV/n7824 ), .F0(\cm/counterV/n54_adj_1121 ), 
    .Q0(\cm/Counter_Y_1 ), .F1(\cm/counterV/n53_adj_1122 ), 
    .Q1(\cm/Counter_Y_2 ), .FCO(\cm/counterV/n7825 ));
  cm_counterV_SLICE_72 \cm/counterV/SLICE_72 ( .A1(\cm/Counter_Y_0 ), 
    .DI1(\cm/counterV/n55_adj_1123 ), .LSR(\cm/counterV/n4195 ), .CLK(clk_c), 
    .F1(\cm/counterV/n55_adj_1123 ), .Q1(\cm/Counter_Y_0 ), 
    .FCO(\cm/counterV/n7824 ));
  cm_counterV_SLICE_73 \cm/counterV/SLICE_73 ( .FCI(\cm/counterV/n7811 ), 
    .F0(\cm/counterV/n1864 ));
  cm_counterV_SLICE_74 \cm/counterV/SLICE_74 ( .B1(\cm/H_BackPorch_4 ), 
    .A1(\cm/counterV/Count_intern_reg_9 ), .B0(\cm/H_BackPorch_5 ), 
    .A0(\cm/counterV/Count_intern_reg_8 ), .FCI(\cm/counterV/n7810 ), 
    .FCO(\cm/counterV/n7811 ));
  cm_counterV_SLICE_75 \cm/counterV/SLICE_75 ( .B1(\cm/H_BackPorch_3 ), 
    .A1(\cm/counterV/Count_intern_reg_7 ), 
    .A0(\cm/counterV/Count_intern_reg_6 ), .FCI(\cm/counterV/n7809 ), 
    .FCO(\cm/counterV/n7810 ));
  cm_counterV_SLICE_76 \cm/counterV/SLICE_76 ( 
    .B1(\cm/counterV/Count_intern_reg_5 ), .A1(\cm/H_BackPorch_7 ), 
    .B0(\cm/counterV/Count_intern_reg_4 ), .FCI(\cm/counterV/n7808 ), 
    .FCO(\cm/counterV/n7809 ));
  cm_counterV_SLICE_77 \cm/counterV/SLICE_77 ( .B1(\cm/H_BackPorch_3 ), 
    .A1(\cm/counterV/Count_intern_reg_3 ), 
    .A0(\cm/counterV/Count_intern_reg_2 ), .FCI(\cm/counterV/n7807 ), 
    .FCO(\cm/counterV/n7808 ));
  cm_counterV_SLICE_78 \cm/counterV/SLICE_78 ( 
    .B1(\cm/counterV/Count_intern_reg_1 ), 
    .B0(\cm/counterV/Count_intern_reg_0 ), .FCO(\cm/counterV/n7807 ));
  cm_counterV_SLICE_79 \cm/counterV/SLICE_79 ( 
    .B0(\cm/counterV/Count_intern_reg_9 ), .FCI(\cm/counterV/n7806 ), 
    .F1(\cm/counterV/n1877 ));
  cm_counterV_SLICE_80 \cm/counterV/SLICE_80 ( 
    .A1(\cm/counterV/Count_intern_reg_8 ), 
    .A0(\cm/counterV/Count_intern_reg_7 ), .FCI(\cm/counterV/n7805 ), 
    .FCO(\cm/counterV/n7806 ));
  cm_counterV_SLICE_81 \cm/counterV/SLICE_81 ( 
    .A1(\cm/counterV/Count_intern_reg_6 ), 
    .A0(\cm/counterV/Count_intern_reg_5 ), .FCI(\cm/counterV/n7804 ), 
    .FCO(\cm/counterV/n7805 ));
  cm_counterV_SLICE_82 \cm/counterV/SLICE_82 ( 
    .B1(\cm/counterV/Count_intern_reg_4 ), 
    .B0(\cm/counterV/Count_intern_reg_3 ), .A0(\cm/H_BackPorch_3 ), 
    .FCI(\cm/counterV/n7803 ), .FCO(\cm/counterV/n7804 ));
  cm_counterV_SLICE_83 \cm/counterV/SLICE_83 ( 
    .A1(\cm/counterV/Count_intern_reg_2 ), 
    .B0(\cm/counterV/Count_intern_reg_1 ), .A0(\cm/V_BackPorch_1 ), 
    .FCI(\cm/counterV/n7802 ), .FCO(\cm/counterV/n7803 ));
  cm_counterV_SLICE_84 \cm/counterV/SLICE_84 ( 
    .A1(\cm/counterV/Count_intern_reg_0 ), .FCO(\cm/counterV/n7802 ));
  cm_counterH_SLICE_85 \cm/counterH/SLICE_85 ( 
    .A1(\cm/counterH/Count_intern_reg_9 ), .B0(\cm/H_BackPorch_4 ), 
    .A0(\cm/counterH/Count_intern_reg_8 ), .FCI(\cm/counterH/n7694 ), 
    .FCO(\cm/counterH/n7695 ));
  cm_counterH_SLICE_86 \cm/counterH/SLICE_86 ( 
    .B1(\cm/counterH/Count_intern_reg_7 ), .A1(\cm/H_BackPorch_7 ), 
    .B0(\cm/H_BackPorch_3 ), .A0(\cm/counterH/Count_intern_reg_6 ), 
    .FCI(\cm/counterH/n7693 ), .FCO(\cm/counterH/n7694 ));
  cm_counterH_SLICE_87 \cm/counterH/SLICE_87 ( 
    .A0(\cm/counterH/Count_intern_reg_9 ), .DI0(\cm/counterH/n46 ), 
    .LSR(HSYNC_c), .CLK(clk_c), .FCI(\cm/counterH/n7843 ), 
    .F0(\cm/counterH/n46 ), .Q0(\cm/counterH/Count_intern_reg_9 ));
  cm_counterH_SLICE_88 \cm/counterH/SLICE_88 ( 
    .B1(\cm/counterH/Count_intern_reg_5 ), .A1(\cm/H_BackPorch_3 ), 
    .A0(\cm/counterH/Count_intern_reg_4 ), .FCI(\cm/counterH/n7692 ), 
    .FCO(\cm/counterH/n7693 ));
  cm_counterH_SLICE_89 \cm/counterH/SLICE_89 ( 
    .A1(\cm/counterH/Count_intern_reg_8 ), 
    .A0(\cm/counterH/Count_intern_reg_7 ), .DI1(\cm/counterH/n47 ), 
    .DI0(\cm/counterH/n48 ), .LSR(HSYNC_c), .CLK(clk_c), 
    .FCI(\cm/counterH/n7842 ), .F0(\cm/counterH/n48 ), 
    .Q0(\cm/counterH/Count_intern_reg_7 ), .F1(\cm/counterH/n47 ), 
    .Q1(\cm/counterH/Count_intern_reg_8 ), .FCO(\cm/counterH/n7843 ));
  cm_counterH_SLICE_90 \cm/counterH/SLICE_90 ( 
    .B1(\cm/counterH/Count_intern_reg_3 ), 
    .A0(\cm/counterH/Count_intern_reg_2 ), .FCI(\cm/counterH/n7691 ), 
    .FCO(\cm/counterH/n7692 ));
  cm_counterH_SLICE_91 \cm/counterH/SLICE_91 ( 
    .A1(\cm/counterH/Count_intern_reg_6 ), 
    .A0(\cm/counterH/Count_intern_reg_5 ), .DI1(\cm/counterH/n49 ), 
    .DI0(\cm/counterH/n50 ), .LSR(HSYNC_c), .CLK(clk_c), 
    .FCI(\cm/counterH/n7841 ), .F0(\cm/counterH/n50 ), 
    .Q0(\cm/counterH/Count_intern_reg_5 ), .F1(\cm/counterH/n49 ), 
    .Q1(\cm/counterH/Count_intern_reg_6 ), .FCO(\cm/counterH/n7842 ));
  cm_counterH_SLICE_92 \cm/counterH/SLICE_92 ( 
    .A1(\cm/counterH/Count_intern_reg_4 ), 
    .A0(\cm/counterH/Count_intern_reg_3 ), .DI1(\cm/counterH/n51 ), 
    .DI0(\cm/counterH/n52 ), .LSR(HSYNC_c), .CLK(clk_c), 
    .FCI(\cm/counterH/n7840 ), .F0(\cm/counterH/n52 ), 
    .Q0(\cm/counterH/Count_intern_reg_3 ), .F1(\cm/counterH/n51 ), 
    .Q1(\cm/counterH/Count_intern_reg_4 ), .FCO(\cm/counterH/n7841 ));
  cm_counterH_SLICE_93 \cm/counterH/SLICE_93 ( 
    .A1(\cm/counterH/Count_intern_reg_2 ), 
    .A0(\cm/counterH/Count_intern_reg_1 ), .DI1(\cm/counterH/n53 ), 
    .DI0(\cm/counterH/n54 ), .LSR(HSYNC_c), .CLK(clk_c), 
    .FCI(\cm/counterH/n7839 ), .F0(\cm/counterH/n54 ), 
    .Q0(\cm/counterH/Count_intern_reg_1 ), .F1(\cm/counterH/n53 ), 
    .Q1(\cm/counterH/Count_intern_reg_2 ), .FCO(\cm/counterH/n7840 ));
  cm_counterH_SLICE_94 \cm/counterH/SLICE_94 ( 
    .A1(\cm/counterH/Count_intern_reg_0 ), .DI1(\cm/counterH/n55 ), 
    .LSR(HSYNC_c), .CLK(clk_c), .F1(\cm/counterH/n55 ), 
    .Q1(\cm/counterH/Count_intern_reg_0 ), .FCO(\cm/counterH/n7839 ));
  cm_counterH_SLICE_95 \cm/counterH/SLICE_95 ( .A0(\cm/Counter_X_9 ), 
    .DI0(\cm/counterH/n46_adj_1103 ), .LSR(\cm/counterH/n4197 ), .CLK(clk_c), 
    .FCI(\cm/counterH/n7838 ), .F0(\cm/counterH/n46_adj_1103 ), 
    .Q0(\cm/Counter_X_9 ));
  cm_counterH_SLICE_96 \cm/counterH/SLICE_96 ( .A1(\cm/Counter_X_8 ), 
    .A0(\cm/Counter_X_7 ), .DI1(\cm/counterH/n47_adj_1105 ), 
    .DI0(\cm/counterH/n48_adj_1104 ), .LSR(\cm/counterH/n4197 ), .CLK(clk_c), 
    .FCI(\cm/counterH/n7837 ), .F0(\cm/counterH/n48_adj_1104 ), 
    .Q0(\cm/Counter_X_7 ), .F1(\cm/counterH/n47_adj_1105 ), 
    .Q1(\cm/Counter_X_8 ), .FCO(\cm/counterH/n7838 ));
  cm_counterH_SLICE_97 \cm/counterH/SLICE_97 ( .A1(\cm/Counter_X_6 ), 
    .A0(\cm/Counter_X_5 ), .DI1(\cm/counterH/n49_adj_1107 ), 
    .DI0(\cm/counterH/n50_adj_1106 ), .LSR(\cm/counterH/n4197 ), .CLK(clk_c), 
    .FCI(\cm/counterH/n7836 ), .F0(\cm/counterH/n50_adj_1106 ), 
    .Q0(\cm/Counter_X_5 ), .F1(\cm/counterH/n49_adj_1107 ), 
    .Q1(\cm/Counter_X_6 ), .FCO(\cm/counterH/n7837 ));
  cm_counterH_SLICE_98 \cm/counterH/SLICE_98 ( .A1(\cm/Counter_X_4 ), 
    .A0(\cm/Counter_X_3 ), .DI1(\cm/counterH/n51_adj_1109 ), 
    .DI0(\cm/counterH/n52_adj_1108 ), .LSR(\cm/counterH/n4197 ), .CLK(clk_c), 
    .FCI(\cm/counterH/n7835 ), .F0(\cm/counterH/n52_adj_1108 ), 
    .Q0(\cm/Counter_X_3 ), .F1(\cm/counterH/n51_adj_1109 ), 
    .Q1(\cm/Counter_X_4 ), .FCO(\cm/counterH/n7836 ));
  cm_counterH_SLICE_99 \cm/counterH/SLICE_99 ( .A1(\cm/Counter_X_2 ), 
    .A0(\cm/Counter_X_1 ), .DI1(\cm/counterH/n53_adj_1111 ), 
    .DI0(\cm/counterH/n54_adj_1110 ), .LSR(\cm/counterH/n4197 ), .CLK(clk_c), 
    .FCI(\cm/counterH/n7834 ), .F0(\cm/counterH/n54_adj_1110 ), 
    .Q0(\cm/Counter_X_1 ), .F1(\cm/counterH/n53_adj_1111 ), 
    .Q1(\cm/Counter_X_2 ), .FCO(\cm/counterH/n7835 ));
  cm_counterH_SLICE_100 \cm/counterH/SLICE_100 ( .A1(\cm/Counter_X_0 ), 
    .DI1(\cm/counterH/n55_adj_1112 ), .LSR(\cm/counterH/n4197 ), .CLK(clk_c), 
    .F1(\cm/counterH/n55_adj_1112 ), .Q1(\cm/Counter_X_0 ), 
    .FCO(\cm/counterH/n7834 ));
  cm_counterH_SLICE_101 \cm/counterH/SLICE_101 ( 
    .B1(\cm/counterH/Count_intern_reg_1 ), 
    .A0(\cm/counterH/Count_intern_reg_0 ), .FCO(\cm/counterH/n7691 ));
  cm_counterH_SLICE_102 \cm/counterH/SLICE_102 ( .FCI(\cm/counterH/n7666 ), 
    .F0(\cm/counterH/n1851 ));
  cm_counterH_SLICE_103 \cm/counterH/SLICE_103 ( 
    .A1(\cm/counterH/Count_intern_reg_9 ), 
    .A0(\cm/counterH/Count_intern_reg_8 ), .FCI(\cm/counterH/n7665 ), 
    .FCO(\cm/counterH/n7666 ));
  cm_counterH_SLICE_104 \cm/counterH/SLICE_104 ( 
    .B1(\cm/counterH/Count_intern_reg_7 ), .A1(\cm/H_BackPorch_7 ), 
    .B0(\cm/counterH/Count_intern_reg_6 ), .A0(\cm/H_BackPorch_6 ), 
    .FCI(\cm/counterH/n7664 ), .FCO(\cm/counterH/n7665 ));
  cm_counterH_SLICE_105 \cm/counterH/SLICE_105 ( .B1(\cm/H_BackPorch_5 ), 
    .A1(\cm/counterH/Count_intern_reg_5 ), .B0(\cm/H_BackPorch_4 ), 
    .A0(\cm/counterH/Count_intern_reg_4 ), .FCI(\cm/counterH/n7663 ), 
    .FCO(\cm/counterH/n7664 ));
  cm_counterH_SLICE_106 \cm/counterH/SLICE_106 ( .B1(\cm/H_BackPorch_3 ), 
    .A1(\cm/counterH/Count_intern_reg_3 ), .FCO(\cm/counterH/n7663 ));
  cm_counterH_SLICE_107 \cm/counterH/SLICE_107 ( .FCI(\cm/counterH/n7695 ), 
    .F0(\cm/counterH/n1838 ));
  cm_assignCM_SLICE_108 \cm/assignCM/SLICE_108 ( .M1(\cm/c_data_3 ), 
    .M0(c_data_2), .CE(\cm/assignCM/clk_c_enable_106 ), .CLK(clk_c), 
    .FCI(\cm/assignCM/n7717 ), .F0(\cm/assignCM/n523 ), 
    .Q0(\cm/assignCM/Right_DOWN_reg_2 ), .Q1(\cm/assignCM/Right_DOWN_reg_3 ));
  cm_assignCM_SLICE_109 \cm/assignCM/SLICE_109 ( .B1(\cm/Counter_X_9 ), 
    .A0(\cm/Counter_X_8 ), .M1(\cm/c_data_5 ), .M0(\cm/c_data_4 ), 
    .CE(\cm/assignCM/clk_c_enable_139 ), .CLK(clk_c), 
    .FCI(\cm/assignCM/n7716 ), .Q0(\cm/assignCM/Left_UP_reg_4 ), 
    .Q1(\cm/assignCM/Left_UP_reg_5 ), .FCO(\cm/assignCM/n7717 ));
  cm_assignCM_SLICE_110 \cm/assignCM/SLICE_110 ( .B1(\cm/Counter_X_7 ), 
    .A1(\cm/H_BackPorch_4 ), .B0(\cm/Counter_X_6 ), .A0(\cm/H_BackPorch_7 ), 
    .M1(\cm/c_data_11 ), .M0(\cm/c_data_10 ), 
    .CE(\cm/assignCM/clk_c_enable_106 ), .CLK(clk_c), 
    .FCI(\cm/assignCM/n7715 ), .Q0(\cm/assignCM/Right_DOWN_reg_10 ), 
    .Q1(\cm/assignCM/Right_DOWN_reg_11 ), .FCO(\cm/assignCM/n7716 ));
  cm_assignCM_SLICE_111 \cm/assignCM/SLICE_111 ( .B1(\cm/Counter_X_5 ), 
    .A1(\cm/H_BackPorch_3 ), .B0(\cm/H_BackPorch_3 ), .A0(\cm/Counter_X_4 ), 
    .M1(c_data_1), .M0(c_data_0), .CE(\cm/assignCM/clk_c_enable_106 ), 
    .CLK(clk_c), .FCI(\cm/assignCM/n7714 ), 
    .Q0(\cm/assignCM/Right_DOWN_reg_0 ), .Q1(\cm/assignCM/Right_DOWN_reg_1 ), 
    .FCO(\cm/assignCM/n7715 ));
  cm_assignCM_SLICE_112 \cm/assignCM/SLICE_112 ( .B1(\cm/Counter_X_3 ), 
    .A0(\cm/Counter_X_2 ), .M1(\cm/c_data_9 ), .M0(\cm/c_data_8 ), 
    .CE(\cm/assignCM/clk_c_enable_139 ), .CLK(clk_c), 
    .FCI(\cm/assignCM/n7713 ), .Q0(\cm/assignCM/Left_UP_reg_8 ), 
    .Q1(\cm/assignCM/Left_UP_reg_9 ), .FCO(\cm/assignCM/n7714 ));
  cm_assignCM_SLICE_113 \cm/assignCM/SLICE_113 ( .B1(\cm/Counter_X_1 ), 
    .A0(\cm/Counter_X_0 ), .M1(\cm/c_data_7 ), .M0(\cm/c_data_6 ), 
    .CE(\cm/assignCM/clk_c_enable_139 ), .CLK(clk_c), 
    .Q0(\cm/assignCM/Left_UP_reg_6 ), .Q1(\cm/assignCM/Left_UP_reg_7 ), 
    .FCO(\cm/assignCM/n7713 ));
  cm_assignCM_SLICE_114 \cm/assignCM/SLICE_114 ( .M1(\cm/c_data_3 ), 
    .M0(c_data_2), .CE(\cm/assignCM/clk_c_enable_117 ), .CLK(clk_c), 
    .FCI(\cm/assignCM/n7700 ), .F0(\cm/assignCM/n521 ), 
    .Q0(\cm/assignCM/Right_UP_reg_2 ), .Q1(\cm/assignCM/Right_UP_reg_3 ));
  cm_assignCM_SLICE_115 \cm/assignCM/SLICE_115 ( .A1(\cm/Counter_Y_9 ), 
    .B0(\cm/Counter_Y_8 ), .A0(\cm/H_BackPorch_4 ), .M1(\cm/c_data_5 ), 
    .M0(\cm/c_data_4 ), .CE(\cm/assignCM/clk_c_enable_106 ), .CLK(clk_c), 
    .FCI(\cm/assignCM/n7699 ), .Q0(\cm/assignCM/Right_DOWN_reg_4 ), 
    .Q1(\cm/assignCM/Right_DOWN_reg_5 ), .FCO(\cm/assignCM/n7700 ));
  cm_assignCM_SLICE_116 \cm/assignCM/SLICE_116 ( .B1(\cm/Counter_Y_7 ), 
    .A1(\cm/H_BackPorch_5 ), .B0(\cm/H_BackPorch_3 ), .A0(\cm/Counter_Y_6 ), 
    .M1(\cm/c_data_11 ), .M0(\cm/c_data_10 ), 
    .CE(\cm/assignCM/clk_c_enable_117 ), .CLK(clk_c), 
    .FCI(\cm/assignCM/n7698 ), .Q0(\cm/assignCM/Right_UP_reg_10 ), 
    .Q1(\cm/assignCM/Right_UP_reg_11 ), .FCO(\cm/assignCM/n7699 ));
  cm_assignCM_SLICE_117 \cm/assignCM/SLICE_117 ( .A1(\cm/Counter_Y_5 ), 
    .B0(\cm/Counter_Y_4 ), .A0(\cm/H_BackPorch_7 ), .M1(c_data_1), 
    .M0(c_data_0), .CE(\cm/assignCM/clk_c_enable_117 ), .CLK(clk_c), 
    .FCI(\cm/assignCM/n7697 ), .Q0(\cm/assignCM/Right_UP_reg_0 ), 
    .Q1(\cm/assignCM/Right_UP_reg_1 ), .FCO(\cm/assignCM/n7698 ));
  cm_assignCM_SLICE_118 \cm/assignCM/SLICE_118 ( .B1(\cm/Counter_Y_3 ), 
    .B0(\cm/Counter_Y_2 ), .A0(\cm/H_BackPorch_3 ), .M1(\cm/c_data_9 ), 
    .M0(\cm/c_data_8 ), .CE(\cm/assignCM/clk_c_enable_106 ), .CLK(clk_c), 
    .FCI(\cm/assignCM/n7696 ), .Q0(\cm/assignCM/Right_DOWN_reg_8 ), 
    .Q1(\cm/assignCM/Right_DOWN_reg_9 ), .FCO(\cm/assignCM/n7697 ));
  cm_assignCM_SLICE_119 \cm/assignCM/SLICE_119 ( .A1(\cm/Counter_Y_1 ), 
    .A0(\cm/Counter_Y_0 ), .M1(\cm/c_data_7 ), .M0(\cm/c_data_6 ), 
    .CE(\cm/assignCM/clk_c_enable_106 ), .CLK(clk_c), 
    .Q0(\cm/assignCM/Right_DOWN_reg_6 ), .Q1(\cm/assignCM/Right_DOWN_reg_7 ), 
    .FCO(\cm/assignCM/n7696 ));
  cd_CNT_VGA_SLICE_120 \cd/CNT_VGA/SLICE_120 ( .B1(\cd/CNT_VGA/counter_2 ), 
    .B0(\cd/CNT_VGA/counter_1 ), .FCI(\cd/CNT_VGA/n7752 ), 
    .F0(\cd/CNT_VGA/n164 ), .F1(\cd/CNT_VGA/n163 ), .FCO(\cd/CNT_VGA/n7753 ));
  SLICE_121 SLICE_121( .A1(\cd/CNT_VGA/counter_0 ), .M1(\vga/V_count_max_10 ), 
    .M0(\vga/V_count_max_0 ), .LSR(n9153), 
    .CLK(\vga/config1/H_Left_Margin_nxt_8__N_969 ), 
    .Q0(\vga/config1/V_Count_Max_nxt_0 ), .F1(\cd/CNT_VGA/n165 ), 
    .Q1(\vga/config1/V_Count_Max_nxt_10 ), .FCO(\cd/CNT_VGA/n7752 ));
  cd_CNT_VGA_SLICE_122 \cd/CNT_VGA/SLICE_122 ( .FCI(\cd/CNT_VGA/n7801 ), 
    .F0(counter_31__N_85));
  cd_CNT_VGA_SLICE_123 \cd/CNT_VGA/SLICE_123 ( .C1(\cd/CNT_VGA/counter_31 ), 
    .B1(\cd/resolution_0 ), .A1(\cd/resolution_1 ), 
    .C0(\cd/CNT_VGA/counter_30 ), .B0(\cd/resolution_0 ), 
    .A0(\cd/resolution_1 ), .FCI(\cd/CNT_VGA/n7800 ), .FCO(\cd/CNT_VGA/n7801 ));
  cd_CNT_VGA_SLICE_124 \cd/CNT_VGA/SLICE_124 ( .C1(\cd/CNT_VGA/counter_29 ), 
    .B1(\cd/resolution_0 ), .A1(\cd/resolution_1 ), 
    .C0(\cd/CNT_VGA/counter_28 ), .B0(\cd/resolution_0 ), 
    .A0(\cd/resolution_1 ), .FCI(\cd/CNT_VGA/n7799 ), .FCO(\cd/CNT_VGA/n7800 ));
  cd_CNT_VGA_SLICE_125 \cd/CNT_VGA/SLICE_125 ( .C1(\cd/CNT_VGA/counter_27 ), 
    .B1(\cd/resolution_0 ), .A1(\cd/resolution_1 ), 
    .C0(\cd/CNT_VGA/counter_26 ), .B0(\cd/resolution_0 ), 
    .A0(\cd/resolution_1 ), .FCI(\cd/CNT_VGA/n7798 ), .FCO(\cd/CNT_VGA/n7799 ));
  cd_CNT_VGA_SLICE_126 \cd/CNT_VGA/SLICE_126 ( .C1(\cd/CNT_VGA/counter_25 ), 
    .B1(\cd/resolution_0 ), .A1(\cd/resolution_1 ), 
    .C0(\cd/CNT_VGA/counter_24 ), .B0(\cd/resolution_0 ), 
    .A0(\cd/resolution_1 ), .FCI(\cd/CNT_VGA/n7797 ), .FCO(\cd/CNT_VGA/n7798 ));
  cd_CNT_VGA_SLICE_127 \cd/CNT_VGA/SLICE_127 ( .C1(\cd/CNT_VGA/counter_23 ), 
    .B1(\cd/resolution_0 ), .A1(\cd/resolution_1 ), 
    .C0(\cd/CNT_VGA/counter_22 ), .B0(\cd/resolution_0 ), 
    .A0(\cd/resolution_1 ), .FCI(\cd/CNT_VGA/n7796 ), .FCO(\cd/CNT_VGA/n7797 ));
  cd_CNT_VGA_SLICE_128 \cd/CNT_VGA/SLICE_128 ( .C1(\cd/CNT_VGA/counter_21 ), 
    .B1(\cd/resolution_0 ), .A1(\cd/resolution_1 ), 
    .C0(\cd/CNT_VGA/counter_20 ), .B0(\cd/resolution_0 ), 
    .A0(\cd/resolution_1 ), .FCI(\cd/CNT_VGA/n7795 ), .FCO(\cd/CNT_VGA/n7796 ));
  cd_CNT_VGA_SLICE_129 \cd/CNT_VGA/SLICE_129 ( .C1(\cd/CNT_VGA/counter_19 ), 
    .B1(\cd/resolution_0 ), .A1(\cd/resolution_1 ), 
    .C0(\cd/CNT_VGA/counter_18 ), .B0(\cd/resolution_0 ), 
    .A0(\cd/resolution_1 ), .FCI(\cd/CNT_VGA/n7794 ), .FCO(\cd/CNT_VGA/n7795 ));
  cd_CNT_VGA_SLICE_130 \cd/CNT_VGA/SLICE_130 ( .C1(\cd/CNT_VGA/counter_17 ), 
    .B1(\cd/resolution_0 ), .A1(\cd/resolution_1 ), 
    .C0(\cd/CNT_VGA/counter_16 ), .B0(\cd/resolution_0 ), 
    .A0(\cd/resolution_1 ), .FCI(\cd/CNT_VGA/n7793 ), .FCO(\cd/CNT_VGA/n7794 ));
  cd_CNT_VGA_SLICE_131 \cd/CNT_VGA/SLICE_131 ( .C1(\cd/CNT_VGA/counter_15 ), 
    .B1(\cd/resolution_0 ), .A1(\cd/resolution_1 ), 
    .C0(\cd/CNT_VGA/counter_14 ), .B0(\cd/resolution_0 ), 
    .A0(\cd/resolution_1 ), .FCI(\cd/CNT_VGA/n7792 ), .FCO(\cd/CNT_VGA/n7793 ));
  cd_CNT_VGA_SLICE_132 \cd/CNT_VGA/SLICE_132 ( .C1(\cd/CNT_VGA/counter_13 ), 
    .B1(\cd/resolution_0 ), .A1(\cd/resolution_1 ), 
    .C0(\cd/CNT_VGA/counter_12 ), .B0(\cd/resolution_0 ), 
    .A0(\cd/resolution_1 ), .FCI(\cd/CNT_VGA/n7791 ), .FCO(\cd/CNT_VGA/n7792 ));
  cd_CNT_VGA_SLICE_133 \cd/CNT_VGA/SLICE_133 ( .C1(\cd/CNT_VGA/counter_11 ), 
    .B1(\cd/resolution_0 ), .A1(\cd/resolution_1 ), 
    .C0(\cd/CNT_VGA/counter_10 ), .B0(\cd/resolution_0 ), 
    .A0(\cd/resolution_1 ), .FCI(\cd/CNT_VGA/n7790 ), .FCO(\cd/CNT_VGA/n7791 ));
  cd_CNT_VGA_SLICE_134 \cd/CNT_VGA/SLICE_134 ( .C1(\cd/CNT_VGA/counter_9 ), 
    .B1(\cd/resolution_0 ), .A1(\cd/resolution_1 ), 
    .C0(\cd/CNT_VGA/counter_8 ), .B0(\cd/resolution_0 ), 
    .A0(\cd/resolution_1 ), .FCI(\cd/CNT_VGA/n7789 ), .FCO(\cd/CNT_VGA/n7790 ));
  cd_CNT_VGA_SLICE_135 \cd/CNT_VGA/SLICE_135 ( .C1(\cd/CNT_VGA/counter_7 ), 
    .B1(\cd/resolution_0 ), .A1(\cd/resolution_1 ), 
    .C0(\cd/CNT_VGA/counter_6 ), .B0(\cd/resolution_0 ), 
    .A0(\cd/resolution_1 ), .FCI(\cd/CNT_VGA/n7788 ), .FCO(\cd/CNT_VGA/n7789 ));
  cd_CNT_VGA_SLICE_136 \cd/CNT_VGA/SLICE_136 ( .C1(\cd/CNT_VGA/counter_5 ), 
    .B1(\cd/resolution_0 ), .A1(\cd/resolution_1 ), 
    .C0(\cd/CNT_VGA/counter_4 ), .B0(\cd/resolution_0 ), 
    .A0(\cd/resolution_1 ), .FCI(\cd/CNT_VGA/n7787 ), .FCO(\cd/CNT_VGA/n7788 ));
  cd_CNT_VGA_SLICE_137 \cd/CNT_VGA/SLICE_137 ( .C1(\cd/CNT_VGA/counter_3 ), 
    .B1(\cd/resolution_0 ), .A1(\cd/resolution_1 ), 
    .C0(\cd/CNT_VGA/counter_2 ), .B0(\cd/resolution_0 ), 
    .A0(\cd/resolution_1 ), .FCI(\cd/CNT_VGA/n7786 ), .FCO(\cd/CNT_VGA/n7787 ));
  cd_CNT_VGA_SLICE_138 \cd/CNT_VGA/SLICE_138 ( .C1(\cd/CNT_VGA/counter_1 ), 
    .B1(\cd/resolution_0 ), .A1(\cd/resolution_1 ), .B0(\cd/resolution_0 ), 
    .A0(\cd/CNT_VGA/counter_0 ), .FCO(\cd/CNT_VGA/n7786 ));
  cd_CNT_VGA_SLICE_139 \cd/CNT_VGA/SLICE_139 ( .A0(\cd/CNT_VGA/counter_31 ), 
    .FCI(\cd/CNT_VGA/n7767 ), .F0(\cd/CNT_VGA/n134 ));
  cd_CNT_VGA_SLICE_140 \cd/CNT_VGA/SLICE_140 ( .A1(\cd/CNT_VGA/counter_30 ), 
    .B0(\cd/CNT_VGA/counter_29 ), .FCI(\cd/CNT_VGA/n7766 ), 
    .F0(\cd/CNT_VGA/n136 ), .F1(\cd/CNT_VGA/n135 ), .FCO(\cd/CNT_VGA/n7767 ));
  cd_CNT_VGA_SLICE_141 \cd/CNT_VGA/SLICE_141 ( .A1(\cd/CNT_VGA/counter_28 ), 
    .B0(\cd/CNT_VGA/counter_27 ), .FCI(\cd/CNT_VGA/n7765 ), 
    .F0(\cd/CNT_VGA/n138 ), .F1(\cd/CNT_VGA/n137 ), .FCO(\cd/CNT_VGA/n7766 ));
  cd_CNT_VGA_SLICE_142 \cd/CNT_VGA/SLICE_142 ( .B1(\cd/CNT_VGA/counter_26 ), 
    .B0(\cd/CNT_VGA/counter_25 ), .FCI(\cd/CNT_VGA/n7764 ), 
    .F0(\cd/CNT_VGA/n140 ), .F1(\cd/CNT_VGA/n139 ), .FCO(\cd/CNT_VGA/n7765 ));
  cd_CNT_VGA_SLICE_143 \cd/CNT_VGA/SLICE_143 ( .A1(\cd/CNT_VGA/counter_24 ), 
    .B0(\cd/CNT_VGA/counter_23 ), .FCI(\cd/CNT_VGA/n7763 ), 
    .F0(\cd/CNT_VGA/n142 ), .F1(\cd/CNT_VGA/n141 ), .FCO(\cd/CNT_VGA/n7764 ));
  cd_CNT_VGA_SLICE_144 \cd/CNT_VGA/SLICE_144 ( .A1(\cd/CNT_VGA/counter_22 ), 
    .A0(\cd/CNT_VGA/counter_21 ), .FCI(\cd/CNT_VGA/n7762 ), 
    .F0(\cd/CNT_VGA/n144 ), .F1(\cd/CNT_VGA/n143 ), .FCO(\cd/CNT_VGA/n7763 ));
  cd_CNT_VGA_SLICE_145 \cd/CNT_VGA/SLICE_145 ( .B1(\cd/CNT_VGA/counter_20 ), 
    .A0(\cd/CNT_VGA/counter_19 ), .FCI(\cd/CNT_VGA/n7761 ), 
    .F0(\cd/CNT_VGA/n146 ), .F1(\cd/CNT_VGA/n145 ), .FCO(\cd/CNT_VGA/n7762 ));
  cd_CNT_VGA_SLICE_146 \cd/CNT_VGA/SLICE_146 ( .B1(\cd/CNT_VGA/counter_18 ), 
    .B0(\cd/CNT_VGA/counter_17 ), .FCI(\cd/CNT_VGA/n7760 ), 
    .F0(\cd/CNT_VGA/n148 ), .F1(\cd/CNT_VGA/n147 ), .FCO(\cd/CNT_VGA/n7761 ));
  cd_CNT_VGA_SLICE_147 \cd/CNT_VGA/SLICE_147 ( .A1(\cd/CNT_VGA/counter_16 ), 
    .A0(\cd/CNT_VGA/counter_15 ), .FCI(\cd/CNT_VGA/n7759 ), 
    .F0(\cd/CNT_VGA/n150 ), .F1(\cd/CNT_VGA/n149 ), .FCO(\cd/CNT_VGA/n7760 ));
  cd_CNT_VGA_SLICE_148 \cd/CNT_VGA/SLICE_148 ( .B1(\cd/CNT_VGA/counter_14 ), 
    .A0(\cd/CNT_VGA/counter_13 ), .FCI(\cd/CNT_VGA/n7758 ), 
    .F0(\cd/CNT_VGA/n152 ), .F1(\cd/CNT_VGA/n151 ), .FCO(\cd/CNT_VGA/n7759 ));
  cd_CNT_VGA_SLICE_149 \cd/CNT_VGA/SLICE_149 ( .B1(\cd/CNT_VGA/counter_12 ), 
    .B0(\cd/CNT_VGA/counter_11 ), .FCI(\cd/CNT_VGA/n7757 ), 
    .F0(\cd/CNT_VGA/n154 ), .F1(\cd/CNT_VGA/n153 ), .FCO(\cd/CNT_VGA/n7758 ));
  SLICE_150 SLICE_150( .A1(\cd/CNT_VGA/counter_10 ), 
    .B0(\cd/CNT_VGA/counter_9 ), .M1(\vga/V_count_max_7 ), 
    .M0(\vga/V_count_max_11 ), .LSR(n9153), 
    .CLK(\vga/config1/H_Left_Margin_nxt_8__N_969 ), .FCI(\cd/CNT_VGA/n7756 ), 
    .F0(\cd/CNT_VGA/n156 ), .Q0(\vga/config1/V_Count_Max_nxt_11 ), 
    .F1(\cd/CNT_VGA/n155 ), .Q1(\vga/config1/V_Count_Max_nxt_7 ), 
    .FCO(\cd/CNT_VGA/n7757 ));
  cd_CNT_VGA_SLICE_151 \cd/CNT_VGA/SLICE_151 ( .A1(\cd/CNT_VGA/counter_8 ), 
    .B0(\cd/CNT_VGA/counter_7 ), .FCI(\cd/CNT_VGA/n7755 ), 
    .F0(\cd/CNT_VGA/n158 ), .F1(\cd/CNT_VGA/n157 ), .FCO(\cd/CNT_VGA/n7756 ));
  cd_CNT_VGA_SLICE_152 \cd/CNT_VGA/SLICE_152 ( .A1(\cd/CNT_VGA/counter_6 ), 
    .B0(\cd/CNT_VGA/counter_5 ), .FCI(\cd/CNT_VGA/n7754 ), 
    .F0(\cd/CNT_VGA/n160 ), .F1(\cd/CNT_VGA/n159 ), .FCO(\cd/CNT_VGA/n7755 ));
  cd_CNT_VGA_SLICE_153 \cd/CNT_VGA/SLICE_153 ( .A1(\cd/CNT_VGA/counter_4 ), 
    .B0(\cd/CNT_VGA/counter_3 ), .FCI(\cd/CNT_VGA/n7753 ), 
    .F0(\cd/CNT_VGA/n162 ), .F1(\cd/CNT_VGA/n161 ), .FCO(\cd/CNT_VGA/n7754 ));
  SLICE_154 SLICE_154( .M0(\vga/config1/V_Sync_Pulse_nxt_7 ), .CLK(clk_c), 
    .FCI(\cd/CNT_UART/n7690 ), .F0(counter_23_N_178_10), .Q0(V_sync_pulse_7));
  SLICE_155 SLICE_155( .A0(\cd/baudrate_8 ), .M1(H_sync_pulse_0), 
    .M0(\vga/H_right_margin_2 ), .LSR(n9153), 
    .CLK(\vga/config1/H_Left_Margin_nxt_8__N_969 ), .FCI(\cd/CNT_UART/n7689 ), 
    .F0(counter_23_N_178_8), .Q0(\vga/config1/H_Right_Margin_nxt_2 ), 
    .F1(counter_23_N_178_9), .Q1(\vga/config1/H_Sync_Pulse_nxt_0 ), 
    .FCO(\cd/CNT_UART/n7690 ));
  SLICE_156 SLICE_156( .A1(\cd/baudrate_7 ), .A0(\cd/baudrate_6 ), 
    .M1(\vga/H_right_margin_1 ), .M0(\vga/H_right_margin_0 ), .LSR(n9153), 
    .CLK(\vga/config1/H_Left_Margin_nxt_8__N_969 ), .FCI(\cd/CNT_UART/n7688 ), 
    .F0(counter_23_N_178_6), .Q0(\vga/config1/H_Right_Margin_nxt_0 ), 
    .F1(counter_23_N_178_7), .Q1(\vga/config1/H_Right_Margin_nxt_1 ), 
    .FCO(\cd/CNT_UART/n7689 ));
  SLICE_157 SLICE_157( .B1(\cd/baudrate_5 ), .B0(\cd/baudrate_4 ), 
    .M1(H_left_margin_1), .M0(H_left_margin_0), .LSR(n9153), 
    .CLK(\vga/config1/H_Left_Margin_nxt_8__N_969 ), .FCI(\cd/CNT_UART/n7687 ), 
    .F0(counter_23_N_178_4), .Q0(\vga/config1/H_Left_Margin_nxt_0 ), 
    .F1(counter_23_N_178_5), .Q1(\vga/config1/H_Left_Margin_nxt_1 ), 
    .FCO(\cd/CNT_UART/n7688 ));
  SLICE_158 SLICE_158( .B1(\cd/baudrate_3 ), .B0(\cd/baudrate_2 ), 
    .M1(\vga/H_count_max_6 ), .M0(\vga/H_count_max_4 ), .LSR(n9153), 
    .CLK(\vga/config1/H_Left_Margin_nxt_8__N_969 ), .FCI(\cd/CNT_UART/n7686 ), 
    .F0(counter_23_N_178_2), .Q0(\vga/config1/H_Count_Max_nxt_4 ), 
    .F1(counter_23_N_178_3), .Q1(\vga/config1/H_Count_Max_nxt_6 ), 
    .FCO(\cd/CNT_UART/n7687 ));
  SLICE_159 SLICE_159( .A1(\cd/baudrate_1 ), 
    .M1(\vga/config1/V_Sync_Pulse_nxt_6 ), 
    .M0(\vga/config1/V_Sync_Pulse_nxt_5 ), .CLK(clk_c), .Q0(V_sync_pulse_5), 
    .F1(counter_23_N_178_1), .Q1(V_sync_pulse_6), .FCO(\cd/CNT_UART/n7686 ));
  SLICE_160 SLICE_160( .A0(counter_23), 
    .M1(\vga/config1/V_Right_Margin_nxt_6 ), 
    .M0(\vga/config1/V_Right_Margin_nxt_5 ), .CLK(clk_c), 
    .FCI(\cd/CNT_UART/n7785 ), .F0(n102), .Q0(\vga/V_right_margin_5 ), 
    .Q1(\vga/V_right_margin_6 ));
  SLICE_161 SLICE_161( .B1(counter_22), .A0(counter_21), 
    .M1(\vga/config1/V_Right_Margin_nxt_4 ), 
    .M0(\vga/config1/V_Right_Margin_nxt_3 ), .CLK(clk_c), 
    .FCI(\cd/CNT_UART/n7784 ), .F0(n104), .Q0(\vga/V_right_margin_3 ), 
    .F1(n103), .Q1(\vga/V_right_margin_4 ), .FCO(\cd/CNT_UART/n7785 ));
  SLICE_162 SLICE_162( .A1(counter_20), .A0(counter_19), 
    .M1(\vga/config1/V_Right_Margin_nxt_2 ), 
    .M0(\vga/config1/V_Right_Margin_nxt_1 ), .CLK(clk_c), 
    .FCI(\cd/CNT_UART/n7783 ), .F0(n106), .Q0(\vga/V_right_margin_1 ), 
    .F1(n105), .Q1(\vga/V_right_margin_2 ), .FCO(\cd/CNT_UART/n7784 ));
  SLICE_163 SLICE_163( .A1(counter_18), .A0(counter_17), 
    .M1(\vga/config1/V_Right_Margin_nxt_0 ), 
    .M0(\vga/config1/V_Left_Margin_nxt_5 ), .CLK(clk_c), 
    .FCI(\cd/CNT_UART/n7782 ), .F0(n108), .Q0(V_left_margin_5), 
    .F1(n107_adj_1145), .Q1(\vga/V_right_margin_0 ), .FCO(\cd/CNT_UART/n7783 ));
  SLICE_164 SLICE_164( .B1(counter_16), .A0(counter_15), 
    .M1(\vga/config1/V_Left_Margin_nxt_4 ), 
    .M0(\vga/config1/V_Left_Margin_nxt_3 ), .CLK(clk_c), 
    .FCI(\cd/CNT_UART/n7781 ), .F0(n110), .Q0(V_left_margin_3), 
    .F1(n109_adj_1144), .Q1(V_left_margin_4), .FCO(\cd/CNT_UART/n7782 ));
  SLICE_165 SLICE_165( .B1(counter_14), .B0(counter_13), 
    .M1(\vga/config1/V_Left_Margin_nxt_2 ), 
    .M0(\vga/config1/V_Left_Margin_nxt_1 ), .CLK(clk_c), 
    .FCI(\cd/CNT_UART/n7780 ), .F0(n112), .Q0(V_left_margin_1), .F1(n111), 
    .Q1(V_left_margin_2), .FCO(\cd/CNT_UART/n7781 ));
  SLICE_166 SLICE_166( .A1(counter_12), .A0(counter_11), 
    .M1(\vga/config1/V_Left_Margin_nxt_0 ), 
    .M0(\vga/config1/V_Count_Max_nxt_9 ), .CLK(clk_c), 
    .FCI(\cd/CNT_UART/n7779 ), .F0(n114), .Q0(\vga/V_count_max_9 ), .F1(n113), 
    .Q1(V_left_margin_0), .FCO(\cd/CNT_UART/n7780 ));
  SLICE_167 SLICE_167( .A1(counter_10), .B0(counter_9), 
    .M1(\vga/config1/V_Count_Max_nxt_8 ), .M0(\vga/config1/V_Count_Max_nxt_7 ), 
    .CLK(clk_c), .FCI(\cd/CNT_UART/n7778 ), .F0(n116), 
    .Q0(\vga/V_count_max_7 ), .F1(n115), .Q1(\vga/V_count_max_8 ), 
    .FCO(\cd/CNT_UART/n7779 ));
  SLICE_168 SLICE_168( .B1(counter_8), .B0(counter_7), 
    .M1(\vga/config1/V_Sync_Pulse_nxt_4 ), 
    .M0(\vga/config1/V_Sync_Pulse_nxt_3 ), .CLK(clk_c), 
    .FCI(\cd/CNT_UART/n7777 ), .F0(n118), .Q0(V_sync_pulse_3), .F1(n117), 
    .Q1(V_sync_pulse_4), .FCO(\cd/CNT_UART/n7778 ));
  SLICE_169 SLICE_169( .B1(counter_6), .B0(counter_5), 
    .M1(\vga/config1/V_Sync_Pulse_nxt_2 ), 
    .M0(\vga/config1/V_Sync_Pulse_nxt_1 ), .CLK(clk_c), 
    .FCI(\cd/CNT_UART/n7776 ), .F0(n120), .Q0(V_sync_pulse_1), .F1(n119), 
    .Q1(V_sync_pulse_2), .FCO(\cd/CNT_UART/n7777 ));
  SLICE_170 SLICE_170( .A1(counter_4), .B0(counter_3), 
    .M1(\vga/config1/V_Sync_Pulse_nxt_0 ), 
    .M0(\vga/config1/V_Right_Margin_nxt_9 ), .CLK(clk_c), 
    .FCI(\cd/CNT_UART/n7775 ), .F0(n122), .Q0(\vga/V_right_margin_9 ), 
    .F1(n121), .Q1(V_sync_pulse_0), .FCO(\cd/CNT_UART/n7776 ));
  SLICE_171 SLICE_171( .A1(counter_2), .B0(counter_1), 
    .M1(\vga/config1/V_Right_Margin_nxt_8 ), 
    .M0(\vga/config1/V_Right_Margin_nxt_7 ), .CLK(clk_c), 
    .FCI(\cd/CNT_UART/n7774 ), .F0(n124), .Q0(\vga/V_right_margin_7 ), 
    .F1(n123), .Q1(\vga/V_right_margin_8 ), .FCO(\cd/CNT_UART/n7775 ));
  SLICE_172 SLICE_172( .A1(counter_0), .M1(\vga/config1/V_Count_Max_nxt_6 ), 
    .M0(\vga/config1/V_Count_Max_nxt_5 ), .CLK(clk_c), 
    .Q0(\vga/V_count_max_5 ), .F1(n125), .Q1(\vga/V_count_max_6 ), 
    .FCO(\cd/CNT_UART/n7774 ));
  SLICE_173 SLICE_173( .A1(\cd/CNT_LM/counter_12 ), 
    .A0(\cd/CNT_LM/counter_11 ), .M1(\vga/config1/H_Left_Margin_nxt_7 ), 
    .M0(\vga/config1/H_Left_Margin_nxt_6 ), .CLK(clk_c), 
    .FCI(\cd/CNT_LM/n7675 ), .Q0(H_left_margin_6), .Q1(H_left_margin_7), 
    .FCO(\cd/CNT_LM/n7676 ));
  SLICE_174 SLICE_174( .A0(\cd/CNT_LM/counter_31 ), 
    .M1(\vga/config1/V_Count_Max_nxt_0 ), .M0(\vga/config1/Load_nxt ), 
    .CLK(clk_c), .FCI(\cd/CNT_LM/n7685 ), .Q0(Load_config), 
    .F1(counter_31__N_85_adj_1140), .Q1(\vga/V_count_max_0 ));
  SLICE_175 SLICE_175( .A1(\cd/CNT_LM/counter_30 ), 
    .A0(\cd/CNT_LM/counter_29 ), .M1(\vga/config1/H_Sync_Pulse_nxt_7 ), 
    .M0(\vga/config1/H_Sync_Pulse_nxt_6 ), .CLK(clk_c), 
    .FCI(\cd/CNT_LM/n7684 ), .Q0(H_sync_pulse_6), .Q1(H_sync_pulse_7), 
    .FCO(\cd/CNT_LM/n7685 ));
  SLICE_176 SLICE_176( .A1(\cd/CNT_LM/counter_28 ), 
    .A0(\cd/CNT_LM/counter_27 ), .M1(\vga/config1/H_Sync_Pulse_nxt_5 ), 
    .M0(\vga/config1/H_Sync_Pulse_nxt_4 ), .CLK(clk_c), 
    .FCI(\cd/CNT_LM/n7683 ), .Q0(H_sync_pulse_4), .Q1(H_sync_pulse_5), 
    .FCO(\cd/CNT_LM/n7684 ));
  SLICE_177 SLICE_177( .B1(\cd/CNT_LM/counter_26 ), 
    .A0(\cd/CNT_LM/counter_25 ), .M1(\vga/config1/H_Sync_Pulse_nxt_3 ), 
    .M0(\vga/config1/H_Sync_Pulse_nxt_2 ), .CLK(clk_c), 
    .FCI(\cd/CNT_LM/n7682 ), .Q0(H_sync_pulse_2), .Q1(H_sync_pulse_3), 
    .FCO(\cd/CNT_LM/n7683 ));
  cd_CNT_LM_SLICE_178 \cd/CNT_LM/SLICE_178 ( .A0(\cd/CNT_LM/counter_31 ), 
    .DI0(\cd/CNT_LM/n134 ), .LSR(counter_31__N_85_adj_1140), .CLK(clk_c), 
    .FCI(\cd/CNT_LM/n7875 ), .F0(\cd/CNT_LM/n134 ), 
    .Q0(\cd/CNT_LM/counter_31 ));
  cd_CNT_LM_SLICE_179 \cd/CNT_LM/SLICE_179 ( .A1(\cd/CNT_LM/counter_30 ), 
    .A0(\cd/CNT_LM/counter_29 ), .DI1(\cd/CNT_LM/n135 ), 
    .DI0(\cd/CNT_LM/n136 ), .LSR(counter_31__N_85_adj_1140), .CLK(clk_c), 
    .FCI(\cd/CNT_LM/n7874 ), .F0(\cd/CNT_LM/n136 ), 
    .Q0(\cd/CNT_LM/counter_29 ), .F1(\cd/CNT_LM/n135 ), 
    .Q1(\cd/CNT_LM/counter_30 ), .FCO(\cd/CNT_LM/n7875 ));
  cd_CNT_LM_SLICE_180 \cd/CNT_LM/SLICE_180 ( .A1(\cd/CNT_LM/counter_28 ), 
    .A0(\cd/CNT_LM/counter_27 ), .DI1(\cd/CNT_LM/n137 ), 
    .DI0(\cd/CNT_LM/n138 ), .LSR(counter_31__N_85_adj_1140), .CLK(clk_c), 
    .FCI(\cd/CNT_LM/n7873 ), .F0(\cd/CNT_LM/n138 ), 
    .Q0(\cd/CNT_LM/counter_27 ), .F1(\cd/CNT_LM/n137 ), 
    .Q1(\cd/CNT_LM/counter_28 ), .FCO(\cd/CNT_LM/n7874 ));
  cd_CNT_LM_SLICE_181 \cd/CNT_LM/SLICE_181 ( .A1(\cd/CNT_LM/counter_26 ), 
    .A0(\cd/CNT_LM/counter_25 ), .DI1(\cd/CNT_LM/n139 ), 
    .DI0(\cd/CNT_LM/n140 ), .LSR(counter_31__N_85_adj_1140), .CLK(clk_c), 
    .FCI(\cd/CNT_LM/n7872 ), .F0(\cd/CNT_LM/n140 ), 
    .Q0(\cd/CNT_LM/counter_25 ), .F1(\cd/CNT_LM/n139 ), 
    .Q1(\cd/CNT_LM/counter_26 ), .FCO(\cd/CNT_LM/n7873 ));
  cd_CNT_LM_SLICE_182 \cd/CNT_LM/SLICE_182 ( .A1(\cd/CNT_LM/counter_24 ), 
    .A0(\cd/CNT_LM/counter_23 ), .DI1(\cd/CNT_LM/n141 ), 
    .DI0(\cd/CNT_LM/n142 ), .LSR(counter_31__N_85_adj_1140), .CLK(clk_c), 
    .FCI(\cd/CNT_LM/n7871 ), .F0(\cd/CNT_LM/n142 ), 
    .Q0(\cd/CNT_LM/counter_23 ), .F1(\cd/CNT_LM/n141 ), 
    .Q1(\cd/CNT_LM/counter_24 ), .FCO(\cd/CNT_LM/n7872 ));
  SLICE_183 SLICE_183( .B1(\cd/CNT_LM/counter_24 ), 
    .A0(\cd/CNT_LM/counter_23 ), .M1(\vga/config1/H_Sync_Pulse_nxt_1 ), 
    .M0(\vga/config1/H_Sync_Pulse_nxt_0 ), .CLK(clk_c), 
    .FCI(\cd/CNT_LM/n7681 ), .Q0(H_sync_pulse_0), .Q1(H_sync_pulse_1), 
    .FCO(\cd/CNT_LM/n7682 ));
  cd_CNT_LM_SLICE_184 \cd/CNT_LM/SLICE_184 ( .A1(\cd/CNT_LM/counter_22 ), 
    .A0(\cd/CNT_LM/counter_21 ), .DI1(\cd/CNT_LM/n143 ), 
    .DI0(\cd/CNT_LM/n144 ), .LSR(counter_31__N_85_adj_1140), .CLK(clk_c), 
    .FCI(\cd/CNT_LM/n7870 ), .F0(\cd/CNT_LM/n144 ), 
    .Q0(\cd/CNT_LM/counter_21 ), .F1(\cd/CNT_LM/n143 ), 
    .Q1(\cd/CNT_LM/counter_22 ), .FCO(\cd/CNT_LM/n7871 ));
  cd_CNT_LM_SLICE_185 \cd/CNT_LM/SLICE_185 ( .A1(\cd/CNT_LM/counter_20 ), 
    .A0(\cd/CNT_LM/counter_19 ), .DI1(\cd/CNT_LM/n145 ), 
    .DI0(\cd/CNT_LM/n146 ), .LSR(counter_31__N_85_adj_1140), .CLK(clk_c), 
    .FCI(\cd/CNT_LM/n7869 ), .F0(\cd/CNT_LM/n146 ), 
    .Q0(\cd/CNT_LM/counter_19 ), .F1(\cd/CNT_LM/n145 ), 
    .Q1(\cd/CNT_LM/counter_20 ), .FCO(\cd/CNT_LM/n7870 ));
  cd_CNT_LM_SLICE_186 \cd/CNT_LM/SLICE_186 ( .A1(\cd/CNT_LM/counter_18 ), 
    .A0(\cd/CNT_LM/counter_17 ), .DI1(\cd/CNT_LM/n147 ), 
    .DI0(\cd/CNT_LM/n148 ), .LSR(counter_31__N_85_adj_1140), .CLK(clk_c), 
    .FCI(\cd/CNT_LM/n7868 ), .F0(\cd/CNT_LM/n148 ), 
    .Q0(\cd/CNT_LM/counter_17 ), .F1(\cd/CNT_LM/n147 ), 
    .Q1(\cd/CNT_LM/counter_18 ), .FCO(\cd/CNT_LM/n7869 ));
  cd_CNT_LM_SLICE_187 \cd/CNT_LM/SLICE_187 ( .A1(\cd/CNT_LM/counter_16 ), 
    .A0(\cd/CNT_LM/counter_15 ), .DI1(\cd/CNT_LM/n149 ), 
    .DI0(\cd/CNT_LM/n150 ), .LSR(counter_31__N_85_adj_1140), .CLK(clk_c), 
    .FCI(\cd/CNT_LM/n7867 ), .F0(\cd/CNT_LM/n150 ), 
    .Q0(\cd/CNT_LM/counter_15 ), .F1(\cd/CNT_LM/n149 ), 
    .Q1(\cd/CNT_LM/counter_16 ), .FCO(\cd/CNT_LM/n7868 ));
  cd_CNT_LM_SLICE_188 \cd/CNT_LM/SLICE_188 ( .A1(\cd/CNT_LM/counter_14 ), 
    .A0(\cd/CNT_LM/counter_13 ), .DI1(\cd/CNT_LM/n151 ), 
    .DI0(\cd/CNT_LM/n152 ), .LSR(counter_31__N_85_adj_1140), .CLK(clk_c), 
    .FCI(\cd/CNT_LM/n7866 ), .F0(\cd/CNT_LM/n152 ), 
    .Q0(\cd/CNT_LM/counter_13 ), .F1(\cd/CNT_LM/n151 ), 
    .Q1(\cd/CNT_LM/counter_14 ), .FCO(\cd/CNT_LM/n7867 ));
  cd_CNT_LM_SLICE_189 \cd/CNT_LM/SLICE_189 ( .A1(\cd/CNT_LM/counter_12 ), 
    .A0(\cd/CNT_LM/counter_11 ), .DI1(\cd/CNT_LM/n153 ), 
    .DI0(\cd/CNT_LM/n154 ), .LSR(counter_31__N_85_adj_1140), .CLK(clk_c), 
    .FCI(\cd/CNT_LM/n7865 ), .F0(\cd/CNT_LM/n154 ), 
    .Q0(\cd/CNT_LM/counter_11 ), .F1(\cd/CNT_LM/n153 ), 
    .Q1(\cd/CNT_LM/counter_12 ), .FCO(\cd/CNT_LM/n7866 ));
  cd_CNT_LM_SLICE_190 \cd/CNT_LM/SLICE_190 ( .A1(\cd/CNT_LM/counter_10 ), 
    .A0(\cd/CNT_LM/counter_9 ), .DI1(\cd/CNT_LM/n155 ), .DI0(\cd/CNT_LM/n156 ), 
    .LSR(counter_31__N_85_adj_1140), .CLK(clk_c), .FCI(\cd/CNT_LM/n7864 ), 
    .F0(\cd/CNT_LM/n156 ), .Q0(\cd/CNT_LM/counter_9 ), .F1(\cd/CNT_LM/n155 ), 
    .Q1(\cd/CNT_LM/counter_10 ), .FCO(\cd/CNT_LM/n7865 ));
  SLICE_191 SLICE_191( .A1(\cd/CNT_LM/counter_22 ), 
    .A0(\cd/CNT_LM/counter_21 ), .M1(\vga/config1/H_Right_Margin_nxt_9 ), 
    .M0(\vga/config1/H_Right_Margin_nxt_8 ), .CLK(clk_c), 
    .FCI(\cd/CNT_LM/n7680 ), .Q0(\vga/H_right_margin_8 ), 
    .Q1(\vga/H_right_margin_9 ), .FCO(\cd/CNT_LM/n7681 ));
  SLICE_192 SLICE_192( .A1(\cd/CNT_LM/counter_20 ), 
    .A0(\cd/CNT_LM/counter_19 ), .M1(\vga/config1/H_Right_Margin_nxt_5 ), 
    .M0(\vga/config1/H_Right_Margin_nxt_4 ), .CLK(clk_c), 
    .FCI(\cd/CNT_LM/n7679 ), .Q0(\vga/H_right_margin_4 ), 
    .Q1(\vga/H_right_margin_5 ), .FCO(\cd/CNT_LM/n7680 ));
  cd_CNT_LM_SLICE_193 \cd/CNT_LM/SLICE_193 ( .A1(\cd/CNT_LM/counter_8 ), 
    .A0(\cd/CNT_LM/counter_7 ), .DI1(\cd/CNT_LM/n157 ), .DI0(\cd/CNT_LM/n158 ), 
    .LSR(counter_31__N_85_adj_1140), .CLK(clk_c), .FCI(\cd/CNT_LM/n7863 ), 
    .F0(\cd/CNT_LM/n158 ), .Q0(\cd/CNT_LM/counter_7 ), .F1(\cd/CNT_LM/n157 ), 
    .Q1(\cd/CNT_LM/counter_8 ), .FCO(\cd/CNT_LM/n7864 ));
  SLICE_194 SLICE_194( .B1(\cd/CNT_LM/counter_18 ), 
    .A0(\cd/CNT_LM/counter_17 ), .M1(\vga/config1/H_Right_Margin_nxt_3 ), 
    .M0(\vga/config1/H_Right_Margin_nxt_2 ), .CLK(clk_c), 
    .FCI(\cd/CNT_LM/n7678 ), .Q0(\vga/H_right_margin_2 ), 
    .Q1(\vga/H_right_margin_3 ), .FCO(\cd/CNT_LM/n7679 ));
  SLICE_195 SLICE_195( .B1(\cd/CNT_LM/counter_16 ), 
    .A0(\cd/CNT_LM/counter_15 ), .M1(\vga/config1/H_Right_Margin_nxt_10 ), 
    .M0(\vga/config1/H_Right_Margin_nxt_1 ), .CLK(clk_c), 
    .FCI(\cd/CNT_LM/n7677 ), .Q0(\vga/H_right_margin_1 ), 
    .Q1(\vga/H_right_margin_10 ), .FCO(\cd/CNT_LM/n7678 ));
  cd_CNT_LM_SLICE_196 \cd/CNT_LM/SLICE_196 ( .A1(\cd/CNT_LM/counter_6 ), 
    .A0(\cd/CNT_LM/counter_5 ), .DI1(\cd/CNT_LM/n159 ), .DI0(\cd/CNT_LM/n160 ), 
    .LSR(counter_31__N_85_adj_1140), .CLK(clk_c), .FCI(\cd/CNT_LM/n7862 ), 
    .F0(\cd/CNT_LM/n160 ), .Q0(\cd/CNT_LM/counter_5 ), .F1(\cd/CNT_LM/n159 ), 
    .Q1(\cd/CNT_LM/counter_6 ), .FCO(\cd/CNT_LM/n7863 ));
  SLICE_197 SLICE_197( .A1(\cd/CNT_LM/counter_14 ), 
    .A0(\cd/CNT_LM/counter_13 ), .M1(\vga/config1/H_Right_Margin_nxt_0 ), 
    .M0(\vga/config1/H_Left_Margin_nxt_8 ), .CLK(clk_c), 
    .FCI(\cd/CNT_LM/n7676 ), .Q0(H_left_margin_8), .Q1(\vga/H_right_margin_0 ), 
    .FCO(\cd/CNT_LM/n7677 ));
  SLICE_198 SLICE_198( .A1(\cd/CNT_LM/counter_4 ), .A0(\cd/CNT_LM/counter_3 ), 
    .M1(\vga/config1/H_Right_Margin_nxt_7 ), 
    .M0(\vga/config1/H_Right_Margin_nxt_6 ), .CLK(clk_c), 
    .Q0(\vga/H_right_margin_6 ), .Q1(\vga/H_right_margin_7 ), 
    .FCO(\cd/CNT_LM/n7672 ));
  cd_CNT_LM_SLICE_199 \cd/CNT_LM/SLICE_199 ( .A1(\cd/CNT_LM/counter_4 ), 
    .A0(\cd/CNT_LM/counter_3 ), .DI1(\cd/CNT_LM/n161 ), .DI0(\cd/CNT_LM/n162 ), 
    .LSR(counter_31__N_85_adj_1140), .CLK(clk_c), .FCI(\cd/CNT_LM/n7861 ), 
    .F0(\cd/CNT_LM/n162 ), .Q0(\cd/CNT_LM/counter_3 ), .F1(\cd/CNT_LM/n161 ), 
    .Q1(\cd/CNT_LM/counter_4 ), .FCO(\cd/CNT_LM/n7862 ));
  SLICE_200 SLICE_200( .B1(\cd/CNT_LM/counter_6 ), .A0(\cd/CNT_LM/counter_5 ), 
    .M1(\vga/config1/V_Count_Max_nxt_10 ), 
    .M0(\vga/config1/V_Count_Max_nxt_1 ), .CLK(clk_c), .FCI(\cd/CNT_LM/n7672 ), 
    .Q0(\vga/V_count_max_1 ), .Q1(\vga/V_count_max_10 ), 
    .FCO(\cd/CNT_LM/n7673 ));
  cd_CNT_LM_SLICE_201 \cd/CNT_LM/SLICE_201 ( .A1(\cd/CNT_LM/n30 ), 
    .A0(\cd/CNT_LM/n31 ), .DI1(\cd/CNT_LM/n163 ), .DI0(\cd/CNT_LM/n164 ), 
    .LSR(counter_31__N_85_adj_1140), .CLK(clk_c), .FCI(\cd/CNT_LM/n7860 ), 
    .F0(\cd/CNT_LM/n164 ), .Q0(\cd/CNT_LM/n31 ), .F1(\cd/CNT_LM/n163 ), 
    .Q1(\cd/CNT_LM/n30 ), .FCO(\cd/CNT_LM/n7861 ));
  SLICE_202 SLICE_202( .A1(\cd/CNT_LM/counter_10 ), .A0(\cd/CNT_LM/counter_9 ), 
    .M1(\vga/config1/V_Count_Max_nxt_4 ), .M0(\vga/config1/V_Count_Max_nxt_3 ), 
    .CLK(clk_c), .FCI(\cd/CNT_LM/n7674 ), .Q0(V_count_max_3), 
    .Q1(\vga/V_count_max_4 ), .FCO(\cd/CNT_LM/n7675 ));
  cd_CNT_LM_SLICE_203 \cd/CNT_LM/SLICE_203 ( .A1(\cd/CNT_LM/n32 ), 
    .DI1(\cd/CNT_LM/n165 ), .LSR(counter_31__N_85_adj_1140), .CLK(clk_c), 
    .F1(\cd/CNT_LM/n165 ), .Q1(\cd/CNT_LM/n32 ), .FCO(\cd/CNT_LM/n7860 ));
  SLICE_204 SLICE_204( .B1(\cd/CNT_LM/counter_8 ), .A0(\cd/CNT_LM/counter_7 ), 
    .M1(\vga/config1/V_Count_Max_nxt_2 ), 
    .M0(\vga/config1/V_Count_Max_nxt_11 ), .CLK(clk_c), 
    .FCI(\cd/CNT_LM/n7673 ), .Q0(\vga/V_count_max_11 ), 
    .Q1(\vga/V_count_max_2 ), .FCO(\cd/CNT_LM/n7674 ));
  cd_CNT_DB_SLICE_205 \cd/CNT_DB/SLICE_205 ( .A1(\cd/CNT_DB/counter_4 ), 
    .A0(\cd/CNT_DB/counter_3 ), .DI1(\cd/CNT_DB/n161 ), .DI0(\cd/CNT_DB/n162 ), 
    .LSR(counter_31__N_85_adj_1141), .CLK(clk_c), .FCI(\cd/CNT_DB/n7845 ), 
    .F0(\cd/CNT_DB/n162 ), .Q0(\cd/CNT_DB/counter_3 ), .F1(\cd/CNT_DB/n161 ), 
    .Q1(\cd/CNT_DB/counter_4 ), .FCO(\cd/CNT_DB/n7846 ));
  cd_CNT_DB_SLICE_206 \cd/CNT_DB/SLICE_206 ( .A1(\cd/CNT_DB/counter_2 ), 
    .A0(\cd/CNT_DB/counter_1 ), .DI1(\cd/CNT_DB/n163 ), .DI0(\cd/CNT_DB/n164 ), 
    .LSR(counter_31__N_85_adj_1141), .CLK(clk_c), .FCI(\cd/CNT_DB/n7844 ), 
    .F0(\cd/CNT_DB/n164 ), .Q0(\cd/CNT_DB/counter_1 ), .F1(\cd/CNT_DB/n163 ), 
    .Q1(\cd/CNT_DB/counter_2 ), .FCO(\cd/CNT_DB/n7845 ));
  SLICE_207 SLICE_207( .M1(\vga/config1/H_Left_Margin_nxt_4 ), 
    .M0(\vga/config1/H_Left_Margin_nxt_3 ), .CLK(clk_c), 
    .FCI(\cd/CNT_DB/n7751 ), .F0(counter_31__N_85_adj_1141), 
    .Q0(H_left_margin_3), .Q1(H_left_margin_4));
  SLICE_208 SLICE_208( .B1(\cd/CNT_DB/counter_31 ), 
    .B0(\cd/CNT_DB/counter_30 ), .M1(\vga/config1/H_Count_Max_nxt_6 ), 
    .M0(\vga/config1/H_Count_Max_nxt_5 ), .CLK(clk_c), .FCI(\cd/CNT_DB/n7750 ), 
    .Q0(\vga/H_count_max_5 ), .Q1(\vga/H_count_max_6 ), 
    .FCO(\cd/CNT_DB/n7751 ));
  cd_CNT_DB_SLICE_209 \cd/CNT_DB/SLICE_209 ( .A1(\cd/CNT_DB/counter_0 ), 
    .DI1(\cd/CNT_DB/n165 ), .LSR(counter_31__N_85_adj_1141), .CLK(clk_c), 
    .F1(\cd/CNT_DB/n165 ), .Q1(\cd/CNT_DB/counter_0 ), .FCO(\cd/CNT_DB/n7844 ));
  cd_SLICE_210 \cd/SLICE_210 ( .B1(\cd/CNT_DB/counter_29 ), 
    .A0(\cd/CNT_DB/counter_28 ), .M0(c_data_0), 
    .CE(\cd/CLOCK_DIVIDER_CONFIG/clk_c_enable_219 ), 
    .LSR(\cd/CLOCK_DIVIDER_CONFIG/n4220 ), .CLK(clk_c), 
    .FCI(\cd/CNT_DB/n7749 ), .Q0(\cd/baudrate_8 ), .FCO(\cd/CNT_DB/n7750 ));
  cd_SLICE_211 \cd/SLICE_211 ( .B1(\cd/CNT_DB/counter_27 ), 
    .B0(\cd/CNT_DB/counter_26 ), .M0(\cd/CLOCK_DIVIDER_CONFIG/n4176 ), 
    .CE(\cd/CLOCK_DIVIDER_CONFIG/clk_c_enable_219 ), 
    .LSR(\cd/CLOCK_DIVIDER_CONFIG/n4223 ), .CLK(clk_c), 
    .FCI(\cd/CNT_DB/n7748 ), .Q0(\cd/baudrate_2 ), .FCO(\cd/CNT_DB/n7749 ));
  SLICE_212 SLICE_212( .B1(\cd/CNT_DB/counter_25 ), 
    .A0(\cd/CNT_DB/counter_24 ), .M1(UART_out_7), .M0(UART_out_6), 
    .CE(\FIFO_UART_info/clk_c_enable_206 ), .CLK(clk_c), 
    .FCI(\cd/CNT_DB/n7747 ), .Q0(\FIFO_UART_info/w_data_reg_6 ), 
    .Q1(\FIFO_UART_info/w_data_reg_7 ), .FCO(\cd/CNT_DB/n7748 ));
  SLICE_213 SLICE_213( .B1(\cd/CNT_DB/counter_23 ), 
    .B0(\cd/CNT_DB/counter_22 ), .M1(UART_out_5), .M0(UART_out_4), 
    .CE(\FIFO_UART_info/clk_c_enable_206 ), .CLK(clk_c), 
    .FCI(\cd/CNT_DB/n7746 ), .Q0(\FIFO_UART_info/w_data_reg_4 ), 
    .Q1(\FIFO_UART_info/w_data_reg_5 ), .FCO(\cd/CNT_DB/n7747 ));
  SLICE_214 SLICE_214( .B1(\cd/CNT_DB/counter_21 ), 
    .A0(\cd/CNT_DB/counter_20 ), .M1(UART_out_3), .M0(UART_out_2), 
    .CE(\FIFO_UART_info/clk_c_enable_206 ), .CLK(clk_c), 
    .FCI(\cd/CNT_DB/n7745 ), .Q0(\FIFO_UART_info/w_data_reg_2 ), 
    .Q1(\FIFO_UART_info/w_data_reg_3 ), .FCO(\cd/CNT_DB/n7746 ));
  SLICE_215 SLICE_215( .A1(\cd/CNT_DB/counter_19 ), 
    .B0(\cd/CNT_DB/counter_18 ), .M1(UART_out_1), .M0(UART_out_0), 
    .CE(\FIFO_UART_info/clk_c_enable_206 ), .CLK(clk_c), 
    .FCI(\cd/CNT_DB/n7744 ), .Q0(\FIFO_UART_info/w_data_reg_0 ), 
    .Q1(\FIFO_UART_info/w_data_reg_1 ), .FCO(\cd/CNT_DB/n7745 ));
  SLICE_216 SLICE_216( .B1(\cd/CNT_DB/counter_17 ), 
    .A0(\cd/CNT_DB/counter_16 ), .M1(\FIFO_UART_info/w_data_reg_7 ), 
    .M0(\FIFO_UART_info/w_data_reg_6 ), .CE(\FIFO_UART_info/clk_c_enable_186 ), 
    .CLK(clk_c), .FCI(\cd/CNT_DB/n7743 ), .Q0(UART_out_data_6), 
    .Q1(UART_out_data_7), .FCO(\cd/CNT_DB/n7744 ));
  SLICE_217 SLICE_217( .B1(\cd/CNT_DB/counter_15 ), 
    .B0(\cd/CNT_DB/counter_14 ), .M1(\FIFO_UART_info/w_data_reg_5 ), 
    .M0(\FIFO_UART_info/w_data_reg_4 ), .CE(\FIFO_UART_info/clk_c_enable_186 ), 
    .CLK(clk_c), .FCI(\cd/CNT_DB/n7742 ), .Q0(UART_out_data_4), 
    .Q1(UART_out_data_5), .FCO(\cd/CNT_DB/n7743 ));
  SLICE_218 SLICE_218( .A1(\cd/CNT_DB/counter_13 ), 
    .A0(\cd/CNT_DB/counter_12 ), .M1(\FIFO_UART_info/w_data_reg_3 ), 
    .M0(\FIFO_UART_info/w_data_reg_2 ), .CE(\FIFO_UART_info/clk_c_enable_186 ), 
    .CLK(clk_c), .FCI(\cd/CNT_DB/n7741 ), .Q0(UART_out_data_2), 
    .Q1(UART_out_data_3), .FCO(\cd/CNT_DB/n7742 ));
  SLICE_219 SLICE_219( .A1(\cd/CNT_DB/counter_11 ), 
    .B0(\cd/CNT_DB/counter_10 ), .M1(\FIFO_UART_info/w_data_reg_1 ), 
    .M0(\FIFO_UART_info/w_data_reg_0 ), .CE(\FIFO_UART_info/clk_c_enable_186 ), 
    .CLK(clk_c), .FCI(\cd/CNT_DB/n7740 ), .Q0(UART_out_data_0), 
    .Q1(UART_out_data_1), .FCO(\cd/CNT_DB/n7741 ));
  SLICE_220 SLICE_220( .A1(\cd/CNT_DB/counter_9 ), .A0(\cd/CNT_DB/counter_8 ), 
    .M1(UART_error_1), .M0(UART_error_0), .CE(clk_c_enable_187), .CLK(clk_c), 
    .FCI(\cd/CNT_DB/n7739 ), .Q0(\FIFO_UART_error/w_data_reg_0 ), 
    .Q1(\FIFO_UART_error/w_data_reg_1 ), .FCO(\cd/CNT_DB/n7740 ));
  SLICE_221 SLICE_221( .B1(\cd/CNT_DB/counter_7 ), .A0(\cd/CNT_DB/counter_6 ), 
    .M1(\vga/config1/H_Left_Margin_nxt_2 ), 
    .M0(\vga/config1/H_Left_Margin_nxt_1 ), .CLK(clk_c), 
    .FCI(\cd/CNT_DB/n7738 ), .Q0(H_left_margin_1), .Q1(H_left_margin_2), 
    .FCO(\cd/CNT_DB/n7739 ));
  SLICE_222 SLICE_222( .A1(\cd/CNT_DB/counter_5 ), .A0(\cd/CNT_DB/counter_4 ), 
    .M1(\vga/config1/H_Left_Margin_nxt_0 ), 
    .M0(\vga/config1/H_Count_Max_nxt_9 ), .CLK(clk_c), .FCI(\cd/CNT_DB/n7737 ), 
    .Q0(\vga/H_count_max_9 ), .Q1(H_left_margin_0), .FCO(\cd/CNT_DB/n7738 ));
  SLICE_223 SLICE_223( .A1(\cd/CNT_DB/counter_3 ), .B0(\cd/CNT_DB/counter_2 ), 
    .M1(\vga/config1/H_Count_Max_nxt_8 ), .M0(\vga/config1/H_Count_Max_nxt_7 ), 
    .CLK(clk_c), .FCI(\cd/CNT_DB/n7736 ), .Q0(\vga/H_count_max_7 ), 
    .Q1(H_count_max_8), .FCO(\cd/CNT_DB/n7737 ));
  SLICE_224 SLICE_224( .B1(\cd/CNT_DB/counter_1 ), .B0(\cd/CNT_DB/counter_0 ), 
    .CE(\FIFO_UART_info/clk_LM_enable_1 ), .CLK(clk_LM), .Q0(UART_info_empty), 
    .FCO(\cd/CNT_DB/n7736 ));
  cd_CNT_DB_SLICE_225 \cd/CNT_DB/SLICE_225 ( .A0(\cd/CNT_DB/counter_31 ), 
    .DI0(\cd/CNT_DB/n134 ), .LSR(counter_31__N_85_adj_1141), .CLK(clk_c), 
    .FCI(\cd/CNT_DB/n7859 ), .F0(\cd/CNT_DB/n134 ), 
    .Q0(\cd/CNT_DB/counter_31 ));
  cd_CNT_DB_SLICE_226 \cd/CNT_DB/SLICE_226 ( .A1(\cd/CNT_DB/counter_30 ), 
    .A0(\cd/CNT_DB/counter_29 ), .DI1(\cd/CNT_DB/n135 ), 
    .DI0(\cd/CNT_DB/n136 ), .LSR(counter_31__N_85_adj_1141), .CLK(clk_c), 
    .FCI(\cd/CNT_DB/n7858 ), .F0(\cd/CNT_DB/n136 ), 
    .Q0(\cd/CNT_DB/counter_29 ), .F1(\cd/CNT_DB/n135 ), 
    .Q1(\cd/CNT_DB/counter_30 ), .FCO(\cd/CNT_DB/n7859 ));
  cd_CNT_DB_SLICE_227 \cd/CNT_DB/SLICE_227 ( .A1(\cd/CNT_DB/counter_28 ), 
    .A0(\cd/CNT_DB/counter_27 ), .DI1(\cd/CNT_DB/n137 ), 
    .DI0(\cd/CNT_DB/n138 ), .LSR(counter_31__N_85_adj_1141), .CLK(clk_c), 
    .FCI(\cd/CNT_DB/n7857 ), .F0(\cd/CNT_DB/n138 ), 
    .Q0(\cd/CNT_DB/counter_27 ), .F1(\cd/CNT_DB/n137 ), 
    .Q1(\cd/CNT_DB/counter_28 ), .FCO(\cd/CNT_DB/n7858 ));
  cd_CNT_DB_SLICE_228 \cd/CNT_DB/SLICE_228 ( .A1(\cd/CNT_DB/counter_26 ), 
    .A0(\cd/CNT_DB/counter_25 ), .DI1(\cd/CNT_DB/n139 ), 
    .DI0(\cd/CNT_DB/n140 ), .LSR(counter_31__N_85_adj_1141), .CLK(clk_c), 
    .FCI(\cd/CNT_DB/n7856 ), .F0(\cd/CNT_DB/n140 ), 
    .Q0(\cd/CNT_DB/counter_25 ), .F1(\cd/CNT_DB/n139 ), 
    .Q1(\cd/CNT_DB/counter_26 ), .FCO(\cd/CNT_DB/n7857 ));
  cd_CNT_DB_SLICE_229 \cd/CNT_DB/SLICE_229 ( .A1(\cd/CNT_DB/counter_24 ), 
    .A0(\cd/CNT_DB/counter_23 ), .DI1(\cd/CNT_DB/n141 ), 
    .DI0(\cd/CNT_DB/n142 ), .LSR(counter_31__N_85_adj_1141), .CLK(clk_c), 
    .FCI(\cd/CNT_DB/n7855 ), .F0(\cd/CNT_DB/n142 ), 
    .Q0(\cd/CNT_DB/counter_23 ), .F1(\cd/CNT_DB/n141 ), 
    .Q1(\cd/CNT_DB/counter_24 ), .FCO(\cd/CNT_DB/n7856 ));
  cd_CNT_DB_SLICE_230 \cd/CNT_DB/SLICE_230 ( .A1(\cd/CNT_DB/counter_22 ), 
    .A0(\cd/CNT_DB/counter_21 ), .DI1(\cd/CNT_DB/n143 ), 
    .DI0(\cd/CNT_DB/n144 ), .LSR(counter_31__N_85_adj_1141), .CLK(clk_c), 
    .FCI(\cd/CNT_DB/n7854 ), .F0(\cd/CNT_DB/n144 ), 
    .Q0(\cd/CNT_DB/counter_21 ), .F1(\cd/CNT_DB/n143 ), 
    .Q1(\cd/CNT_DB/counter_22 ), .FCO(\cd/CNT_DB/n7855 ));
  cd_CNT_DB_SLICE_231 \cd/CNT_DB/SLICE_231 ( .A1(\cd/CNT_DB/counter_20 ), 
    .A0(\cd/CNT_DB/counter_19 ), .DI1(\cd/CNT_DB/n145 ), 
    .DI0(\cd/CNT_DB/n146 ), .LSR(counter_31__N_85_adj_1141), .CLK(clk_c), 
    .FCI(\cd/CNT_DB/n7853 ), .F0(\cd/CNT_DB/n146 ), 
    .Q0(\cd/CNT_DB/counter_19 ), .F1(\cd/CNT_DB/n145 ), 
    .Q1(\cd/CNT_DB/counter_20 ), .FCO(\cd/CNT_DB/n7854 ));
  cd_CNT_DB_SLICE_232 \cd/CNT_DB/SLICE_232 ( .A1(\cd/CNT_DB/counter_18 ), 
    .A0(\cd/CNT_DB/counter_17 ), .DI1(\cd/CNT_DB/n147 ), 
    .DI0(\cd/CNT_DB/n148 ), .LSR(counter_31__N_85_adj_1141), .CLK(clk_c), 
    .FCI(\cd/CNT_DB/n7852 ), .F0(\cd/CNT_DB/n148 ), 
    .Q0(\cd/CNT_DB/counter_17 ), .F1(\cd/CNT_DB/n147 ), 
    .Q1(\cd/CNT_DB/counter_18 ), .FCO(\cd/CNT_DB/n7853 ));
  cd_CNT_DB_SLICE_233 \cd/CNT_DB/SLICE_233 ( .A1(\cd/CNT_DB/counter_16 ), 
    .A0(\cd/CNT_DB/counter_15 ), .DI1(\cd/CNT_DB/n149 ), 
    .DI0(\cd/CNT_DB/n150 ), .LSR(counter_31__N_85_adj_1141), .CLK(clk_c), 
    .FCI(\cd/CNT_DB/n7851 ), .F0(\cd/CNT_DB/n150 ), 
    .Q0(\cd/CNT_DB/counter_15 ), .F1(\cd/CNT_DB/n149 ), 
    .Q1(\cd/CNT_DB/counter_16 ), .FCO(\cd/CNT_DB/n7852 ));
  cd_CNT_DB_SLICE_234 \cd/CNT_DB/SLICE_234 ( .A1(\cd/CNT_DB/counter_14 ), 
    .A0(\cd/CNT_DB/counter_13 ), .DI1(\cd/CNT_DB/n151 ), 
    .DI0(\cd/CNT_DB/n152 ), .LSR(counter_31__N_85_adj_1141), .CLK(clk_c), 
    .FCI(\cd/CNT_DB/n7850 ), .F0(\cd/CNT_DB/n152 ), 
    .Q0(\cd/CNT_DB/counter_13 ), .F1(\cd/CNT_DB/n151 ), 
    .Q1(\cd/CNT_DB/counter_14 ), .FCO(\cd/CNT_DB/n7851 ));
  cd_CNT_DB_SLICE_235 \cd/CNT_DB/SLICE_235 ( .A1(\cd/CNT_DB/counter_12 ), 
    .A0(\cd/CNT_DB/counter_11 ), .DI1(\cd/CNT_DB/n153 ), 
    .DI0(\cd/CNT_DB/n154 ), .LSR(counter_31__N_85_adj_1141), .CLK(clk_c), 
    .FCI(\cd/CNT_DB/n7849 ), .F0(\cd/CNT_DB/n154 ), 
    .Q0(\cd/CNT_DB/counter_11 ), .F1(\cd/CNT_DB/n153 ), 
    .Q1(\cd/CNT_DB/counter_12 ), .FCO(\cd/CNT_DB/n7850 ));
  cd_CNT_DB_SLICE_236 \cd/CNT_DB/SLICE_236 ( .A1(\cd/CNT_DB/counter_10 ), 
    .A0(\cd/CNT_DB/counter_9 ), .DI1(\cd/CNT_DB/n155 ), .DI0(\cd/CNT_DB/n156 ), 
    .LSR(counter_31__N_85_adj_1141), .CLK(clk_c), .FCI(\cd/CNT_DB/n7848 ), 
    .F0(\cd/CNT_DB/n156 ), .Q0(\cd/CNT_DB/counter_9 ), .F1(\cd/CNT_DB/n155 ), 
    .Q1(\cd/CNT_DB/counter_10 ), .FCO(\cd/CNT_DB/n7849 ));
  cd_CNT_DB_SLICE_237 \cd/CNT_DB/SLICE_237 ( .A1(\cd/CNT_DB/counter_8 ), 
    .A0(\cd/CNT_DB/counter_7 ), .DI1(\cd/CNT_DB/n157 ), .DI0(\cd/CNT_DB/n158 ), 
    .LSR(counter_31__N_85_adj_1141), .CLK(clk_c), .FCI(\cd/CNT_DB/n7847 ), 
    .F0(\cd/CNT_DB/n158 ), .Q0(\cd/CNT_DB/counter_7 ), .F1(\cd/CNT_DB/n157 ), 
    .Q1(\cd/CNT_DB/counter_8 ), .FCO(\cd/CNT_DB/n7848 ));
  cd_CNT_DB_SLICE_238 \cd/CNT_DB/SLICE_238 ( .A1(\cd/CNT_DB/counter_6 ), 
    .A0(\cd/CNT_DB/counter_5 ), .DI1(\cd/CNT_DB/n159 ), .DI0(\cd/CNT_DB/n160 ), 
    .LSR(counter_31__N_85_adj_1141), .CLK(clk_c), .FCI(\cd/CNT_DB/n7846 ), 
    .F0(\cd/CNT_DB/n160 ), .Q0(\cd/CNT_DB/counter_5 ), .F1(\cd/CNT_DB/n159 ), 
    .Q1(\cd/CNT_DB/counter_6 ), .FCO(\cd/CNT_DB/n7847 ));
  cm_configCM_SLICE_239 \cm/configCM/SLICE_239 ( .D0(\cm/configCM/n8442 ), 
    .C0(\cm/configCM/n9165 ), .B0(\cm/configCM/n9127 ), 
    .A0(\cm/configCM/RXD_Data_reg_11 ), 
    .DI0(\cm/configCM/Config_Error_nxt_3_N_559_0 ), 
    .CE(\cm/configCM/clk_c_enable_207 ), .CLK(clk_c), 
    .F0(\cm/configCM/Config_Error_nxt_3_N_559_0 ), .Q0(Config_Error_0));
  cm_configCM_SLICE_240 \cm/configCM/SLICE_240 ( 
    .D1(\cm/configCM/RXD_Data_reg_15 ), .C1(\cm/configCM/n9138 ), 
    .A1(\cm/configCM/RXD_Data_reg_8 ), .D0(\cm/configCM/RXD_Data_reg_9 ), 
    .C0(\cm/configCM/n9127 ), .B0(\cm/configCM/n8442 ), .A0(\cm/configCM/n9 ), 
    .DI0(\cm/configCM/Config_Error_nxt_3_N_559_1 ), 
    .CE(\cm/configCM/clk_c_enable_33 ), .CLK(clk_c), 
    .F0(\cm/configCM/Config_Error_nxt_3_N_559_1 ), .Q0(Config_Error_1), 
    .F1(\cm/configCM/n8442 ));
  cm_configCM_SLICE_241 \cm/configCM/SLICE_241 ( 
    .D1(\cm/configCM/RXD_Data_reg_11 ), .C1(\cm/configCM/n3920 ), 
    .A1(\cm/configCM/n3525 ), .D0(\cm/configCM/n53 ), .C0(\cm/configCM/n1490 ), 
    .B0(\cm/configCM/n9127 ), .DI0(\cm/configCM/Config_Error_nxt_3_N_559_2 ), 
    .CE(\cm/configCM/clk_c_enable_34 ), .CLK(clk_c), 
    .F0(\cm/configCM/Config_Error_nxt_3_N_559_2 ), .Q0(Config_Error_2), 
    .F1(\cm/configCM/n1490 ));
  cm_configCM_SLICE_243 \cm/configCM/SLICE_243 ( 
    .D1(\cm/configCM/RXD_Data_reg_9 ), .B1(\cm/configCM/RXD_Data_reg_12 ), 
    .A1(\cm/configCM/RXD_Data_reg_8 ), .D0(\cm/configCM/RXD_Data_reg_9 ), 
    .C0(\cm/configCM/RXD_Data_reg_11 ), .B0(\cm/configCM/RXD_Data_reg_12 ), 
    .A0(\cm/configCM/RXD_Data_reg_8 ), .DI0(\cm/configCM/n1664 ), 
    .CE(\cm/configCM/clk_c_enable_49 ), .CLK(clk_c), .F0(\cm/configCM/n1664 ), 
    .Q0(Config_Notification_1), .F1(\cm/configCM/n3525 ));
  SLICE_244 SLICE_244( .DI0(n9391), .M1(\cm/configCM/RXD_Data_reg_11 ), 
    .CE(\cm/configCM/clk_c_enable_48 ), .CLK(clk_c), .F0(n9391), 
    .Q0(Config_Notification_3), .Q1(Config_Notification_0));
  cm_configCM_SLICE_245 \cm/configCM/SLICE_245 ( .D1(\cm/configCM/n4 ), 
    .C1(\cm/configCM/RXD_Data_reg_11 ), .B1(\cm/configCM/n3927 ), 
    .A1(\cm/configCM/n1618 ), .C0(\cm/configCM/State_reg_2 ), 
    .B0(\cm/configCM/State_reg_1 ), .A0(c_addr_3__N_470), 
    .DI0(\cm/configCM/Config_Notification_Valid_nxt ), 
    .M0(\cm/configCM/State_reg_0 ), .CLK(clk_c), 
    .OFX0(\cm/configCM/Config_Notification_Valid_nxt ), 
    .Q0(Config_Notification_Valid));
  vga_CounterH_SLICE_246 \vga/CounterH/SLICE_246 ( .D1(\vga/CounterH/n64 ), 
    .A1(\vga/CounterH/n1892 ), .D0(\vga/CounterH/n65 ), 
    .A0(\vga/CounterH/n1892 ), .DI1(\vga/CounterH/n78 ), 
    .DI0(\vga/CounterH/n79 ), .LSR(rst_n_N_1047), .CLK(clk_c), 
    .F0(\vga/CounterH/n79 ), .Q0(Count_h_0), .F1(\vga/CounterH/n78 ), 
    .Q1(Count_h_1));
  vga_CounterH_SLICE_247 \vga/CounterH/SLICE_247 ( .C1(\vga/CounterH/n62 ), 
    .A1(\vga/CounterH/n1892 ), .B0(\vga/CounterH/n63 ), 
    .A0(\vga/CounterH/n1892 ), .DI1(\vga/CounterH/n76 ), 
    .DI0(\vga/CounterH/n77 ), .LSR(rst_n_N_1047), .CLK(clk_c), 
    .F0(\vga/CounterH/n77 ), .Q0(Count_h_2), .F1(\vga/CounterH/n76 ), 
    .Q1(Count_h_3));
  vga_CounterH_SLICE_248 \vga/CounterH/SLICE_248 ( .C1(\vga/CounterH/n60 ), 
    .B1(\vga/CounterH/n1892 ), .C0(\vga/CounterH/n61 ), 
    .B0(\vga/CounterH/n1892 ), .DI1(\vga/CounterH/n74 ), 
    .DI0(\vga/CounterH/n75 ), .LSR(rst_n_N_1047), .CLK(clk_c), 
    .F0(\vga/CounterH/n75 ), .Q0(Count_h_4), .F1(\vga/CounterH/n74 ), 
    .Q1(Count_h_5));
  vga_CounterH_SLICE_249 \vga/CounterH/SLICE_249 ( .C1(\vga/CounterH/n58 ), 
    .A1(\vga/CounterH/n1892 ), .D0(\vga/CounterH/n59 ), 
    .A0(\vga/CounterH/n1892 ), .DI1(\vga/CounterH/n72 ), 
    .DI0(\vga/CounterH/n73 ), .LSR(rst_n_N_1047), .CLK(clk_c), 
    .F0(\vga/CounterH/n73 ), .Q0(Count_h_6), .F1(\vga/CounterH/n72 ), 
    .Q1(Count_h_7));
  vga_CounterH_SLICE_250 \vga/CounterH/SLICE_250 ( .D1(\vga/CounterH/n1892 ), 
    .A1(\vga/CounterH/n56 ), .D0(\vga/CounterH/n1892 ), 
    .A0(\vga/CounterH/n57 ), .DI1(\vga/CounterH/n70 ), 
    .DI0(\vga/CounterH/n71 ), .LSR(rst_n_N_1047), .CLK(clk_c), 
    .F0(\vga/CounterH/n71 ), .Q0(Count_h_8), .F1(\vga/CounterH/n70 ), 
    .Q1(Count_h_9));
  vga_CounterH_SLICE_251 \vga/CounterH/SLICE_251 ( .D1(\vga/CounterH/n54 ), 
    .C1(\vga/CounterH/n1892 ), .D0(\vga/CounterH/n55 ), 
    .C0(\vga/CounterH/n1892 ), .DI1(\vga/CounterH/n68 ), 
    .DI0(\vga/CounterH/n69 ), .LSR(rst_n_N_1047), .CLK(clk_c), 
    .F0(\vga/CounterH/n69 ), .Q0(Count_h_10), .F1(\vga/CounterH/n68 ), 
    .Q1(Count_h_11));
  vga_CounterV_SLICE_252 \vga/CounterV/SLICE_252 ( .B1(\vga/CounterV/n1907 ), 
    .A1(\vga/CounterV/n64 ), .C0(\vga/CounterV/n65 ), 
    .B0(\vga/CounterV/n1907 ), .DI1(\vga/CounterV/n78 ), 
    .DI0(\vga/CounterV/n79 ), .LSR(rst_n_N_1047), .CLK(HSYNC_c), 
    .F0(\vga/CounterV/n79 ), .Q0(Count_v_0), .F1(\vga/CounterV/n78 ), 
    .Q1(Count_v_1));
  vga_CounterV_SLICE_253 \vga/CounterV/SLICE_253 ( .C1(\vga/CounterV/n62 ), 
    .A1(\vga/CounterV/n1907 ), .D0(\vga/CounterV/n63 ), 
    .A0(\vga/CounterV/n1907 ), .DI1(\vga/CounterV/n76 ), 
    .DI0(\vga/CounterV/n77 ), .LSR(rst_n_N_1047), .CLK(HSYNC_c), 
    .F0(\vga/CounterV/n77 ), .Q0(Count_v_2), .F1(\vga/CounterV/n76 ), 
    .Q1(Count_v_3));
  vga_CounterV_SLICE_254 \vga/CounterV/SLICE_254 ( .D1(\vga/CounterV/n60 ), 
    .C1(\vga/CounterV/n1907 ), .C0(\vga/CounterV/n1907 ), 
    .A0(\vga/CounterV/n61 ), .DI1(\vga/CounterV/n74 ), 
    .DI0(\vga/CounterV/n75 ), .LSR(rst_n_N_1047), .CLK(HSYNC_c), 
    .F0(\vga/CounterV/n75 ), .Q0(Count_v_4), .F1(\vga/CounterV/n74 ), 
    .Q1(Count_v_5));
  vga_CounterV_SLICE_255 \vga/CounterV/SLICE_255 ( .D1(\vga/CounterV/n58 ), 
    .B1(\vga/CounterV/n1907 ), .C0(\vga/CounterV/n59 ), 
    .A0(\vga/CounterV/n1907 ), .DI1(\vga/CounterV/n72 ), 
    .DI0(\vga/CounterV/n73 ), .LSR(rst_n_N_1047), .CLK(HSYNC_c), 
    .F0(\vga/CounterV/n73 ), .Q0(Count_v_6), .F1(\vga/CounterV/n72 ), 
    .Q1(Count_v_7));
  vga_CounterV_SLICE_256 \vga/CounterV/SLICE_256 ( .C1(\vga/CounterV/n56 ), 
    .A1(\vga/CounterV/n1907 ), .B0(\vga/CounterV/n57 ), 
    .A0(\vga/CounterV/n1907 ), .DI1(\vga/CounterV/n70 ), 
    .DI0(\vga/CounterV/n71 ), .LSR(rst_n_N_1047), .CLK(HSYNC_c), 
    .F0(\vga/CounterV/n71 ), .Q0(Count_v_8), .F1(\vga/CounterV/n70 ), 
    .Q1(Count_v_9));
  vga_CounterV_SLICE_257 \vga/CounterV/SLICE_257 ( .D1(\vga/CounterV/n1907 ), 
    .C1(\vga/CounterV/n54 ), .D0(\vga/CounterV/n1907 ), 
    .B0(\vga/CounterV/n55 ), .DI1(\vga/CounterV/n68 ), 
    .DI0(\vga/CounterV/n69 ), .LSR(rst_n_N_1047), .CLK(HSYNC_c), 
    .F0(\vga/CounterV/n69 ), .Q0(Count_v_10), .F1(\vga/CounterV/n68 ), 
    .Q1(Count_v_11));
  cm_assignCM_SLICE_258 \cm/assignCM/SLICE_258 ( .D1(\cm/assignCM/n1343 ), 
    .B1(\cm/assignCM/Left_UP_reg_0 ), .A1(\cm/assignCM/n1244 ), 
    .D0(\cm/assignCM/Right_UP_reg_0 ), .C0(\cm/assignCM/n1329 ), 
    .B0(\cm/assignCM/Left_DOWN_reg_0 ), .DI0(\cm/assignCM/n1173 ), 
    .M0(\cm/assignCM/n8580 ), .CE(\cm/assignCM/clk_c_enable_151 ), .CLK(clk_c), 
    .OFX0(\cm/assignCM/n1173 ), .Q0(Data_VGA_0));
  cm_assignCM_SLICE_259 \cm/assignCM/SLICE_259 ( .D1(\cm/assignCM/n1242 ), 
    .C1(\cm/assignCM/n9133 ), .B1(\cm/assignCM/Left_UP_reg_2 ), 
    .A1(\cm/assignCM/n1343 ), .D0(\cm/assignCM/n1243 ), 
    .C0(\cm/assignCM/Left_UP_reg_1 ), .B0(\cm/assignCM/n9133 ), 
    .A0(\cm/assignCM/n1343 ), .DI1(\cm/assignCM/n1171 ), 
    .DI0(\cm/assignCM/n1172 ), .CE(\cm/assignCM/clk_c_enable_151 ), 
    .CLK(clk_c), .F0(\cm/assignCM/n1172 ), .Q0(Data_VGA_1), 
    .F1(\cm/assignCM/n1171 ), .Q1(Data_VGA_2));
  cm_assignCM_SLICE_260 \cm/assignCM/SLICE_260 ( 
    .D1(\cm/assignCM/Left_UP_reg_3 ), .C1(\cm/assignCM/n1241 ), 
    .B1(\cm/assignCM/n1343 ), .C0(\cm/assignCM/Left_DOWN_reg_3 ), 
    .B0(\cm/assignCM/n1329 ), .A0(\cm/assignCM/Right_UP_reg_3 ), 
    .DI0(\cm/assignCM/n1170 ), .M0(\cm/assignCM/n8580 ), 
    .CE(\cm/assignCM/clk_c_enable_151 ), .CLK(clk_c), 
    .OFX0(\cm/assignCM/n1170 ), .Q0(Data_VGA_3));
  cm_assignCM_SLICE_261 \cm/assignCM/SLICE_261 ( 
    .C1(\cm/assignCM/Left_UP_reg_4 ), .B1(\cm/assignCM/n8965 ), 
    .A1(\cm/assignCM/n1343 ), .D0(\cm/assignCM/Left_DOWN_reg_4 ), 
    .C0(\cm/assignCM/Right_UP_reg_4 ), .B0(\cm/assignCM/n1329 ), 
    .DI0(\cm/assignCM/n8069 ), .M0(\cm/assignCM/n8580 ), 
    .CE(\cm/assignCM/clk_c_enable_151 ), .CLK(clk_c), 
    .OFX0(\cm/assignCM/n8069 ), .Q0(Data_VGA_4));
  cm_assignCM_SLICE_262 \cm/assignCM/SLICE_262 ( .D1(\cm/assignCM/n1343 ), 
    .C1(\cm/assignCM/n9133 ), .B1(\cm/assignCM/Left_UP_reg_6 ), 
    .A1(\cm/assignCM/n1238 ), .D0(\cm/assignCM/n1343 ), 
    .C0(\cm/assignCM/Left_UP_reg_5 ), .B0(\cm/assignCM/n1239 ), 
    .A0(\cm/assignCM/n9133 ), .DI1(\cm/assignCM/n1167 ), 
    .DI0(\cm/assignCM/n1168 ), .CE(\cm/assignCM/clk_c_enable_151 ), 
    .CLK(clk_c), .F0(\cm/assignCM/n1168 ), .Q0(Data_VGA_5), 
    .F1(\cm/assignCM/n1167 ), .Q1(Data_VGA_6));
  cm_assignCM_SLICE_263 \cm/assignCM/SLICE_263 ( .D1(\cm/assignCM/n16 ), 
    .B1(\cm/assignCM/Left_UP_reg_7 ), .A1(\cm/assignCM/n1343 ), 
    .D0(\cm/assignCM/n1329 ), .C0(\cm/assignCM/Left_DOWN_reg_7 ), 
    .A0(\cm/assignCM/Right_UP_reg_7 ), .DI0(\cm/assignCM/n8067 ), 
    .M0(\cm/assignCM/n8580 ), .CE(\cm/assignCM/clk_c_enable_151 ), .CLK(clk_c), 
    .OFX0(\cm/assignCM/n8067 ), .Q0(Data_VGA_7));
  cm_assignCM_SLICE_264 \cm/assignCM/SLICE_264 ( .D1(\cm/assignCM/n9133 ), 
    .C1(\cm/assignCM/n1235 ), .B1(\cm/assignCM/Left_UP_reg_9 ), 
    .A1(\cm/assignCM/n1343 ), .D0(\cm/assignCM/n9133 ), 
    .C0(\cm/assignCM/n1343 ), .B0(\cm/assignCM/Left_UP_reg_8 ), 
    .A0(\cm/assignCM/n1236 ), .DI1(\cm/assignCM/n1164 ), 
    .DI0(\cm/assignCM/n1165 ), .CE(\cm/assignCM/clk_c_enable_151 ), 
    .CLK(clk_c), .F0(\cm/assignCM/n1165 ), .Q0(Data_VGA_8), 
    .F1(\cm/assignCM/n1164 ), .Q1(Data_VGA_9));
  cm_assignCM_SLICE_265 \cm/assignCM/SLICE_265 ( .D1(button_signal_DEBUG_VGA), 
    .C1(\cm/Counter_X_Valid ), .A1(\cm/Counter_Y_Valid ), 
    .D0(\cm/assignCM/Left_UP_reg_10 ), .C0(\cm/assignCM/n1234 ), 
    .B0(\cm/assignCM/n9133 ), .A0(\cm/assignCM/n1343 ), 
    .DI0(\cm/assignCM/n1163 ), .CE(\cm/assignCM/clk_c_enable_151 ), 
    .CLK(clk_c), .F0(\cm/assignCM/n1163 ), .Q0(Data_VGA_10), 
    .F1(\cm/assignCM/n9133 ));
  cm_assignCM_SLICE_266 \cm/assignCM/SLICE_266 ( .D1(\cm/assignCM/n1343 ), 
    .C1(\cm/assignCM/n9 ), .A1(\cm/assignCM/Left_UP_reg_11 ), 
    .D0(\cm/assignCM/Right_UP_reg_11 ), .C0(\cm/assignCM/n1329 ), 
    .B0(\cm/assignCM/Left_DOWN_reg_11 ), .DI0(\cm/assignCM/n1162 ), 
    .M0(\cm/assignCM/n8580 ), .CE(\cm/assignCM/clk_c_enable_151 ), .CLK(clk_c), 
    .OFX0(\cm/assignCM/n1162 ), .Q0(Data_VGA_11));
  cm_configCM_SLICE_267 \cm/configCM/SLICE_267 ( 
    .D0(\cm/configCM/State_reg_2 ), .C0(\cm/configCM/State_reg_1 ), 
    .DI0(\cm/configCM/n2850 ), .LSR(\cm/configCM/State_reg_0 ), .CLK(clk_c), 
    .F0(\cm/configCM/n2850 ), .Q0(Error_Valid));
  SLICE_268 SLICE_268( .C1(VGA_error_data_3_N_13_1), .B1(VGA_Notification_1), 
    .A1(VGA_Notification_Valid), .D0(VGA_error_data_3_N_13_0), 
    .C0(VGA_Notification_0), .A0(VGA_Notification_Valid), 
    .DI1(VGA_error_data_3_N_6_1), .DI0(VGA_error_data_3_N_6_0), 
    .CE(\FIFO_CM_error/clk_c_enable_210 ), .CLK(clk_c), 
    .F0(VGA_error_data_3_N_6_0), .Q0(\FIFO_CM_error/w_data_reg_0 ), 
    .F1(VGA_error_data_3_N_6_1), .Q1(\FIFO_CM_error/w_data_reg_1 ));
  SLICE_269 SLICE_269( .D1(Config_Notification_Valid), .C1(Config_Error_1), 
    .B1(Error_Valid), .A1(Config_Notification_1), 
    .D0(Config_Notification_Valid), .C0(Config_Error_2), .B0(Error_Valid), 
    .A0(Config_Notification_3), .DI0(VGA_error_data_3_N_13_2), 
    .CE(\FIFO_CM_error/clk_c_enable_210 ), .LSR(n8439), .CLK(clk_c), 
    .F0(VGA_error_data_3_N_13_2), .Q0(\FIFO_CM_error/w_data_reg_2 ), 
    .F1(VGA_error_data_3_N_13_1));
  SLICE_270 SLICE_270( .C1(Config_Notification_3), 
    .B1(Config_Notification_Valid), .D0(VGA_Notification_Valid), 
    .C0(Error_Valid), .B0(n9174), .A0(VGA_Notification_3), 
    .DI0(VGA_error_data_3_N_6_3), .CE(\FIFO_CM_error/clk_c_enable_210 ), 
    .CLK(clk_c), .F0(VGA_error_data_3_N_6_3), 
    .Q0(\FIFO_CM_error/w_data_reg_3 ), .F1(n9174));
  FIFO_CM_error_SLICE_271 \FIFO_CM_error/SLICE_271 ( .D1(clk_VGA), 
    .C1(counter_31__N_85), .A1(\FIFO_CM_error/n9162 ), .D0(Error_Valid), 
    .C0(VGA_Notification_Valid), .B0(Config_Notification_Valid), 
    .A0(button_signal_DEBUG_UART), .DI0(\FIFO_CM_error/n9162 ), .CLK(clk_VGA), 
    .F0(\FIFO_CM_error/n9162 ), .Q0(\FIFO_CM_error/w_empty_reg ), 
    .F1(\FIFO_CM_error/clk_c_enable_210 ));
  FIFO_UART_CM_SLICE_276 \FIFO_UART_CM/SLICE_276 ( .D1(clk_LM), 
    .C1(\FIFO_UART_CM/n9172 ), .B1(\FIFO_UART_CM/w_empty_reg ), 
    .A1(counter_31__N_85_adj_1140), .D0(UART_valid_out), 
    .A0(button_signal_DEBUG_UART), .DI0(\FIFO_UART_CM/n9172 ), .CLK(clk_UART), 
    .F0(\FIFO_UART_CM/n9172 ), .Q0(\FIFO_UART_CM/w_empty_reg ), 
    .F1(\FIFO_UART_CM/clk_c_enable_221 ));
  FIFO_UART_info_SLICE_282 \FIFO_UART_info/SLICE_282 ( .D1(n1801), 
    .C1(\FIFO_UART_info/n9167 ), .B1(counter_23_N_178_10), .A1(clk_UART), 
    .D0(button_signal_DEBUG_UART), .A0(UART_valid_out), 
    .DI0(\FIFO_UART_info/n9167 ), .CLK(clk_UART), .F0(\FIFO_UART_info/n9167 ), 
    .Q0(\FIFO_UART_info/w_empty_reg ), .F1(\FIFO_UART_info/clk_c_enable_206 ));
  SLICE_283 SLICE_283( .D1(Count_h_10), .C1(Count_h_9), .A1(Count_h_11), 
    .D0(Count_h_8), .C0(\vga/CounterH/n1892 ), .B0(n8410), .A0(n1364), 
    .DI0(\vga/CounterH/n2351 ), .LSR(rst_n_N_1047), .CLK(clk_c), 
    .F0(\vga/CounterH/n2351 ), .Q0(HSYNC_c), .F1(n8410));
  SLICE_295 SLICE_295( .D1(n9150), .C1(n472), .B1(data), .A1(n8008), .D0(n472), 
    .C0(\uart/n130 ), .B0(data), .A0(n4737), .DI1(n4218), 
    .DI0(\uart/UART_STATE/n4184 ), .CE(clk_c_enable_222), .LSR(rst_n_N_350), 
    .CLK(clk_c), .F0(\uart/UART_STATE/n4184 ), .Q0(UART_error_0), .F1(n4218), 
    .Q1(UART_error_1));
  SLICE_300 SLICE_300( .D1(n9113), .C1(n474), .B1(UART_out_1), .A1(n476), 
    .D0(n9113), .C0(UART_out_0), .B0(n474), .A0(n476), .DI1(n4237), 
    .DI0(n4239), .CE(clk_c_enable_224), .LSR(rst_n_N_350), .CLK(clk_c), 
    .F0(n4239), .Q0(UART_out_1), .F1(n4237), .Q1(UART_out_2));
  SLICE_301 SLICE_301( .D1(n476), .C1(UART_out_3), .B1(n9113), .A1(n474), 
    .D0(n474), .C0(n476), .B0(n9113), .A0(UART_out_2), .DI1(n4233), 
    .DI0(n4235), .CE(clk_c_enable_224), .LSR(rst_n_N_350), .CLK(clk_c), 
    .F0(n4235), .Q0(UART_out_3), .F1(n4233), .Q1(UART_out_4));
  SLICE_302 SLICE_302( .D1(UART_out_5), .C1(n9113), .B1(n474), .A1(n476), 
    .D0(n476), .C0(n9113), .B0(n474), .A0(UART_out_4), .DI1(n4229), 
    .DI0(n4231), .CE(clk_c_enable_224), .LSR(rst_n_N_350), .CLK(clk_c), 
    .F0(n4231), .Q0(UART_out_5), .F1(n4229), .Q1(UART_out_6));
  SLICE_303 SLICE_303( .D1(\uart/UART_STATE/wait_iteration_step_reg_1 ), 
    .B1(n472), .A1(\uart/UART_STATE/wait_iteration_step_reg_0 ), .D0(n476), 
    .C0(n474), .B0(UART_out_6), .A0(n9113), .DI0(n4227), .M1(data), 
    .CE(clk_c_enable_224), .LSR(rst_n_N_350), .CLK(clk_c), .F0(n4227), 
    .Q0(UART_out_7), .F1(n2), .Q1(UART_out_0));
  uart_SLICE_313 \uart/SLICE_313 ( .D1(valid_data), .C1(n476), 
    .B1(valid_error_next_N_411), .D0(valid_data), .B0(valid_error_next_N_411), 
    .DI0(\uart/n2346 ), .CE(\uart/UART_STATE/clk_UART_enable_2 ), 
    .LSR(rst_n_N_350), .CLK(clk_UART), .F0(\uart/n2346 ), 
    .Q0(UART_valid_error), .F1(\uart/UART_STATE/clk_UART_enable_2 ));
  uart_UART_STATE_SLICE_314 \uart/UART_STATE/SLICE_314 ( 
    .B1(\uart/UART_STATE/wait_iteration_step_reg_0 ), 
    .A1(\uart/UART_STATE/wait_iteration_step_reg_1 ), .D0(data), 
    .C0(\uart/UART_STATE/n9173 ), .B0(valid_data), .A0(n472), 
    .DI0(\uart/UART_STATE/n7917 ), .CE(\uart/UART_STATE/clk_UART_enable_5 ), 
    .LSR(rst_n_N_350), .CLK(clk_UART), .F0(\uart/UART_STATE/n7917 ), 
    .Q0(UART_valid_out), .F1(\uart/UART_STATE/n9173 ));
  cm_assignCM_SLICE_316 \cm/assignCM/SLICE_316 ( .DI0(\n9391\000/BUF1 ), 
    .M1(\cm/assignCM/Current_Qudran_Config_reg_0 ), 
    .CE(\cm/assignCM/clk_c_enable_157 ), .CLK(clk_c), .F0(\n9391\000/BUF1 ), 
    .Q0(VGA_Notification_3), .Q1(VGA_Notification_0));
  cm_assignCM_SLICE_317 \cm/assignCM/SLICE_317 ( .D1(button_signal_DEBUG_VGA), 
    .C1(\cm/assignCM/VGA_Notification_nxt_3__N_893 ), 
    .D0(\cm/assignCM/VGA_Notification_nxt_3_N_889_1 ), 
    .C0(\cm/assignCM/Previous_Qudran_Config_reg_1 ), 
    .B0(\cm/assignCM/Previous_Qudran_Config_reg_0 ), 
    .A0(\cm/assignCM/Current_Qudran_Config_reg_0 ), 
    .DI0(\cm/assignCM/VGA_Notification_nxt_3__N_893 ), 
    .LSR(button_signal_DEBUG_VGA), .CLK(clk_c), 
    .F0(\cm/assignCM/VGA_Notification_nxt_3__N_893 ), 
    .Q0(VGA_Notification_Valid), .F1(\cm/assignCM/clk_c_enable_157 ));
  SLICE_321 SLICE_321( .D1(Count_v_8), .C1(Count_v_9), .B1(Count_v_10), 
    .A1(Count_v_11), .D0(n1367), .C0(\vga/CounterV/n1907 ), .A0(n8407), 
    .DI0(\vga/CounterV/n2353 ), .LSR(rst_n_N_1047), .CLK(HSYNC_c), 
    .F0(\vga/CounterV/n2353 ), .Q0(VSYNC_c), .F1(n8407));
  cd_CLOCK_DIVIDER_CONFIG_SLICE_337 \cd/CLOCK_DIVIDER_CONFIG/SLICE_337 ( 
    .D1(c_data_2), .C1(\cd/CLOCK_DIVIDER_CONFIG/n9130 ), .B1(n9112), 
    .A1(c_data_1), .D0(c_addr_3), .C0(c_addr_1), .B0(c_addr_0), .A0(c_addr_2), 
    .DI0(\cd/CLOCK_DIVIDER_CONFIG/n9130 ), .LSR(c_valid), .CLK(clk_VGA), 
    .F0(\cd/CLOCK_DIVIDER_CONFIG/n9130 ), .Q0(c_UART_ready), 
    .F1(\cd/CLOCK_DIVIDER_CONFIG/clk_c_enable_219 ));
  SLICE_338 SLICE_338( .D1(c_addr_3), .C1(c_addr_2), .D0(c_addr_0), .C0(n9163), 
    .B0(c_valid), .A0(c_addr_1), .DI0(n5259), 
    .LSR(\cd/CLOCK_DIVIDER_CONFIG/n9142 ), .CLK(clk_VGA), .F0(n5259), 
    .Q0(c_VGA_ready), .F1(n9163));
  cm_configCM_SLICE_339 \cm/configCM/SLICE_339 ( 
    .D0(\cm/configCM/RXD_Data_reg_11 ), .C0(\cm/configCM/RXD_Data_reg_15 ), 
    .B0(\cm/configCM/n9138 ), .DI0(\cm/configCM/n2084 ), 
    .CE(\cm/configCM/clk_c_enable_208 ), .CLK(clk_c), .F0(\cm/configCM/n2084 ), 
    .Q0(c_addr_0));
  cm_configCM_SLICE_340 \cm/configCM/SLICE_340 ( 
    .D1(\cm/configCM/RXD_Data_reg_14 ), .C1(\cm/configCM/RXD_Data_reg_12 ), 
    .B1(\cm/configCM/RXD_Data_reg_11 ), .A1(\cm/configCM/RXD_Data_reg_13 ), 
    .D0(\cm/configCM/RXD_Data_reg_14 ), .C0(\cm/configCM/RXD_Data_reg_12 ), 
    .B0(\cm/configCM/RXD_Data_reg_11 ), .A0(\cm/configCM/RXD_Data_reg_13 ), 
    .DI1(\cm/configCM/n3931 ), .DI0(\cm/configCM/n8513 ), 
    .CE(\cm/configCM/clk_c_enable_208 ), .LSR(\cm/configCM/n4942 ), 
    .CLK(clk_c), .F0(\cm/configCM/n8513 ), .Q0(c_addr_1), 
    .F1(\cm/configCM/n3931 ), .Q1(c_addr_2));
  cm_configCM_SLICE_341 \cm/configCM/SLICE_341 ( 
    .D1(\cm/configCM/RXD_Data_reg_15 ), .C1(\cm/configCM/RXD_Data_reg_13 ), 
    .B1(\cm/configCM/RXD_Data_reg_11 ), .A1(\cm/configCM/RXD_Data_reg_12 ), 
    .D0(\cm/configCM/RXD_Data_reg_13 ), .C0(\cm/configCM/RXD_Data_reg_14 ), 
    .B0(\cm/configCM/RXD_Data_reg_11 ), .A0(\cm/configCM/RXD_Data_reg_15 ), 
    .DI0(\cm/configCM/n9194 ), .CE(\cm/configCM/clk_c_enable_208 ), 
    .CLK(clk_c), .F0(\cm/configCM/n9194 ), .Q0(c_addr_3), 
    .F1(\cm/configCM/n8488 ));
  cm_configCM_SLICE_342 \cm/configCM/SLICE_342 ( 
    .D0(\cm/configCM/RXD_Data_reg_8 ), .C0(\cm/configCM/RXD_Data_reg_0 ), 
    .B0(\cm/configCM/RXD_Data_reg_15 ), .A0(\cm/configCM/n8541 ), 
    .DI0(\cm/configCM/c_data_nxt_13_N_517_0 ), 
    .CE(\cm/configCM/clk_c_enable_27 ), .CLK(clk_c), 
    .F0(\cm/configCM/c_data_nxt_13_N_517_0 ), .Q0(c_data_0));
  cm_configCM_SLICE_343 \cm/configCM/SLICE_343 ( 
    .D0(\cm/configCM/RXD_Data_reg_1 ), .C0(\cm/configCM/n9138 ), 
    .B0(\cm/configCM/RXD_Data_reg_15 ), .A0(\cm/configCM/n23 ), 
    .DI0(\cm/configCM/c_data_nxt_13_N_517_1 ), 
    .CE(\cm/configCM/clk_c_enable_25 ), .CLK(clk_c), 
    .F0(\cm/configCM/c_data_nxt_13_N_517_1 ), .Q0(c_data_1));
  cm_configCM_SLICE_344 \cm/configCM/SLICE_344 ( 
    .D1(\cm/configCM/State_reg_0 ), .C1(\cm/configCM/RXD_Data_reg_15 ), 
    .B1(\cm/configCM/n9159 ), .A1(\cm/configCM/RXD_Data_reg_14 ), 
    .D0(\cm/configCM/n5 ), .C0(\cm/configCM/RXD_Data_reg_15 ), 
    .A0(\cm/configCM/RXD_Data_reg_2 ), 
    .DI0(\cm/configCM/c_data_nxt_13_N_517_2 ), 
    .CE(\cm/configCM/clk_c_enable_30 ), .CLK(clk_c), 
    .F0(\cm/configCM/c_data_nxt_13_N_517_2 ), .Q0(c_data_2), 
    .F1(\cm/configCM/clk_c_enable_60 ));
  SLICE_345 SLICE_345( .D1(c_addr_2), .A1(c_addr_3), .D0(c_addr_2), 
    .C0(c_addr_0), .B0(c_addr_1), .A0(c_addr_3), .DI0(c_ready_next_N_346), 
    .LSR(c_valid), .CLK(clk_VGA), .F0(c_ready_next_N_346), .Q0(c_ready_1), 
    .F1(\cd/CLOCK_DIVIDER_CONFIG/n9164 ));
  SLICE_346 SLICE_346( .D1(\cm/c_data_12 ), .C1(\cm/c_data_13 ), 
    .B1(button_signal_DEBUG_VGA), .A1(n9125), .D0(n3408), 
    .C0(c_data_1_derived_1), .B0(n9125), .A0(H_BackPorch_nxt_7__N_782), 
    .DI0(c_ready_nxt_N_906), .LSR(button_signal_DEBUG_VGA), .CLK(clk_c), 
    .F0(c_ready_nxt_N_906), .Q0(c_ready_Assign), 
    .F1(\cm/assignCM/clk_c_enable_128 ));
  SLICE_347 SLICE_347( .D1(c_VGA_ready), .A1(c_UART_ready), 
    .D0(c_ready_Assign), .C0(\vga/config1/n5 ), .B0(Load_config), 
    .A0(c_ready_1), .DI0(c_addr_3__N_470), .LSR(\cm/configCM/n32 ), 
    .CLK(clk_c), .F0(c_addr_3__N_470), .Q0(c_valid), .F1(\vga/config1/n5 ));
  cd_CNT_VGA_SLICE_348 \cd/CNT_VGA/SLICE_348 ( .D1(\cd/CNT_VGA/n164 ), 
    .B1(counter_31__N_85), .C0(\cd/CNT_VGA/n165 ), .B0(counter_31__N_85), 
    .DI1(\cd/CNT_VGA/n198 ), .DI0(\cd/CNT_VGA/n199 ), .LSR(rst_n_N_52), 
    .CLK(clk_c), .F0(\cd/CNT_VGA/n199 ), .Q0(\cd/CNT_VGA/counter_0 ), 
    .F1(\cd/CNT_VGA/n198 ), .Q1(\cd/CNT_VGA/counter_1 ));
  cd_CNT_VGA_SLICE_349 \cd/CNT_VGA/SLICE_349 ( .D1(\cd/CNT_VGA/n162 ), 
    .B1(counter_31__N_85), .C0(\cd/CNT_VGA/n163 ), .B0(counter_31__N_85), 
    .DI1(\cd/CNT_VGA/n196 ), .DI0(\cd/CNT_VGA/n197 ), .LSR(rst_n_N_52), 
    .CLK(clk_c), .F0(\cd/CNT_VGA/n197 ), .Q0(\cd/CNT_VGA/counter_2 ), 
    .F1(\cd/CNT_VGA/n196 ), .Q1(\cd/CNT_VGA/counter_3 ));
  cd_CNT_VGA_SLICE_350 \cd/CNT_VGA/SLICE_350 ( .D1(\cd/CNT_VGA/n160 ), 
    .B1(counter_31__N_85), .C0(\cd/CNT_VGA/n161 ), .B0(counter_31__N_85), 
    .DI1(\cd/CNT_VGA/n194 ), .DI0(\cd/CNT_VGA/n195 ), .LSR(rst_n_N_52), 
    .CLK(clk_c), .F0(\cd/CNT_VGA/n195 ), .Q0(\cd/CNT_VGA/counter_4 ), 
    .F1(\cd/CNT_VGA/n194 ), .Q1(\cd/CNT_VGA/counter_5 ));
  cd_CNT_VGA_SLICE_351 \cd/CNT_VGA/SLICE_351 ( .D1(\cd/CNT_VGA/n158 ), 
    .B1(counter_31__N_85), .C0(\cd/CNT_VGA/n159 ), .B0(counter_31__N_85), 
    .DI1(\cd/CNT_VGA/n192 ), .DI0(\cd/CNT_VGA/n193 ), .LSR(rst_n_N_52), 
    .CLK(clk_c), .F0(\cd/CNT_VGA/n193 ), .Q0(\cd/CNT_VGA/counter_6 ), 
    .F1(\cd/CNT_VGA/n192 ), .Q1(\cd/CNT_VGA/counter_7 ));
  cd_CNT_VGA_SLICE_352 \cd/CNT_VGA/SLICE_352 ( .D1(counter_31__N_85), 
    .B1(\cd/CNT_VGA/n156 ), .B0(counter_31__N_85), .A0(\cd/CNT_VGA/n157 ), 
    .DI1(\cd/CNT_VGA/n190 ), .DI0(\cd/CNT_VGA/n191 ), .LSR(rst_n_N_52), 
    .CLK(clk_c), .F0(\cd/CNT_VGA/n191 ), .Q0(\cd/CNT_VGA/counter_8 ), 
    .F1(\cd/CNT_VGA/n190 ), .Q1(\cd/CNT_VGA/counter_9 ));
  cd_CNT_VGA_SLICE_353 \cd/CNT_VGA/SLICE_353 ( .B1(\cd/CNT_VGA/n154 ), 
    .A1(counter_31__N_85), .C0(counter_31__N_85), .A0(\cd/CNT_VGA/n155 ), 
    .DI1(\cd/CNT_VGA/n188 ), .DI0(\cd/CNT_VGA/n189 ), .LSR(rst_n_N_52), 
    .CLK(clk_c), .F0(\cd/CNT_VGA/n189 ), .Q0(\cd/CNT_VGA/counter_10 ), 
    .F1(\cd/CNT_VGA/n188 ), .Q1(\cd/CNT_VGA/counter_11 ));
  cd_CNT_VGA_SLICE_354 \cd/CNT_VGA/SLICE_354 ( .C1(counter_31__N_85), 
    .A1(\cd/CNT_VGA/n152 ), .D0(\cd/CNT_VGA/n153 ), .C0(counter_31__N_85), 
    .DI1(\cd/CNT_VGA/n186 ), .DI0(\cd/CNT_VGA/n187 ), .LSR(rst_n_N_52), 
    .CLK(clk_c), .F0(\cd/CNT_VGA/n187 ), .Q0(\cd/CNT_VGA/counter_12 ), 
    .F1(\cd/CNT_VGA/n186 ), .Q1(\cd/CNT_VGA/counter_13 ));
  cd_CNT_VGA_SLICE_355 \cd/CNT_VGA/SLICE_355 ( .C1(\cd/CNT_VGA/n150 ), 
    .B1(counter_31__N_85), .D0(counter_31__N_85), .B0(\cd/CNT_VGA/n151 ), 
    .DI1(\cd/CNT_VGA/n184 ), .DI0(\cd/CNT_VGA/n185 ), .LSR(rst_n_N_52), 
    .CLK(clk_c), .F0(\cd/CNT_VGA/n185 ), .Q0(\cd/CNT_VGA/counter_14 ), 
    .F1(\cd/CNT_VGA/n184 ), .Q1(\cd/CNT_VGA/counter_15 ));
  cd_CNT_VGA_SLICE_356 \cd/CNT_VGA/SLICE_356 ( .D1(\cd/CNT_VGA/n148 ), 
    .B1(counter_31__N_85), .C0(\cd/CNT_VGA/n149 ), .B0(counter_31__N_85), 
    .DI1(\cd/CNT_VGA/n182 ), .DI0(\cd/CNT_VGA/n183 ), .LSR(rst_n_N_52), 
    .CLK(clk_c), .F0(\cd/CNT_VGA/n183 ), .Q0(\cd/CNT_VGA/counter_16 ), 
    .F1(\cd/CNT_VGA/n182 ), .Q1(\cd/CNT_VGA/counter_17 ));
  cd_CNT_VGA_SLICE_357 \cd/CNT_VGA/SLICE_357 ( .C1(\cd/CNT_VGA/n146 ), 
    .A1(counter_31__N_85), .B0(\cd/CNT_VGA/n147 ), .A0(counter_31__N_85), 
    .DI1(\cd/CNT_VGA/n180 ), .DI0(\cd/CNT_VGA/n181 ), .LSR(rst_n_N_52), 
    .CLK(clk_c), .F0(\cd/CNT_VGA/n181 ), .Q0(\cd/CNT_VGA/counter_18 ), 
    .F1(\cd/CNT_VGA/n180 ), .Q1(\cd/CNT_VGA/counter_19 ));
  cd_CNT_VGA_SLICE_358 \cd/CNT_VGA/SLICE_358 ( .C1(\cd/CNT_VGA/n144 ), 
    .A1(counter_31__N_85), .B0(\cd/CNT_VGA/n145 ), .A0(counter_31__N_85), 
    .DI1(\cd/CNT_VGA/n178 ), .DI0(\cd/CNT_VGA/n179 ), .LSR(rst_n_N_52), 
    .CLK(clk_c), .F0(\cd/CNT_VGA/n179 ), .Q0(\cd/CNT_VGA/counter_20 ), 
    .F1(\cd/CNT_VGA/n178 ), .Q1(\cd/CNT_VGA/counter_21 ));
  cd_CNT_VGA_SLICE_359 \cd/CNT_VGA/SLICE_359 ( .C1(\cd/CNT_VGA/n142 ), 
    .A1(counter_31__N_85), .B0(counter_31__N_85), .A0(\cd/CNT_VGA/n143 ), 
    .DI1(\cd/CNT_VGA/n176 ), .DI0(\cd/CNT_VGA/n177 ), .LSR(rst_n_N_52), 
    .CLK(clk_c), .F0(\cd/CNT_VGA/n177 ), .Q0(\cd/CNT_VGA/counter_22 ), 
    .F1(\cd/CNT_VGA/n176 ), .Q1(\cd/CNT_VGA/counter_23 ));
  cd_CNT_VGA_SLICE_360 \cd/CNT_VGA/SLICE_360 ( .D1(\cd/CNT_VGA/n140 ), 
    .B1(counter_31__N_85), .C0(\cd/CNT_VGA/n141 ), .B0(counter_31__N_85), 
    .DI1(\cd/CNT_VGA/n174 ), .DI0(\cd/CNT_VGA/n175 ), .LSR(rst_n_N_52), 
    .CLK(clk_c), .F0(\cd/CNT_VGA/n175 ), .Q0(\cd/CNT_VGA/counter_24 ), 
    .F1(\cd/CNT_VGA/n174 ), .Q1(\cd/CNT_VGA/counter_25 ));
  cd_CNT_VGA_SLICE_361 \cd/CNT_VGA/SLICE_361 ( .D1(\cd/CNT_VGA/n138 ), 
    .B1(counter_31__N_85), .C0(\cd/CNT_VGA/n139 ), .B0(counter_31__N_85), 
    .DI1(\cd/CNT_VGA/n172 ), .DI0(\cd/CNT_VGA/n173 ), .LSR(rst_n_N_52), 
    .CLK(clk_c), .F0(\cd/CNT_VGA/n173 ), .Q0(\cd/CNT_VGA/counter_26 ), 
    .F1(\cd/CNT_VGA/n172 ), .Q1(\cd/CNT_VGA/counter_27 ));
  cd_CNT_VGA_SLICE_362 \cd/CNT_VGA/SLICE_362 ( .D1(\cd/CNT_VGA/n136 ), 
    .B1(counter_31__N_85), .C0(\cd/CNT_VGA/n137 ), .B0(counter_31__N_85), 
    .DI1(\cd/CNT_VGA/n170 ), .DI0(\cd/CNT_VGA/n171 ), .LSR(rst_n_N_52), 
    .CLK(clk_c), .F0(\cd/CNT_VGA/n171 ), .Q0(\cd/CNT_VGA/counter_28 ), 
    .F1(\cd/CNT_VGA/n170 ), .Q1(\cd/CNT_VGA/counter_29 ));
  cd_CNT_VGA_SLICE_363 \cd/CNT_VGA/SLICE_363 ( .C1(counter_31__N_85), 
    .B1(\cd/CNT_VGA/n134 ), .C0(counter_31__N_85), .B0(\cd/CNT_VGA/n135 ), 
    .DI1(\cd/CNT_VGA/n168 ), .DI0(\cd/CNT_VGA/n169 ), .LSR(rst_n_N_52), 
    .CLK(clk_c), .F0(\cd/CNT_VGA/n169 ), .Q0(\cd/CNT_VGA/counter_30 ), 
    .F1(\cd/CNT_VGA/n168 ), .Q1(\cd/CNT_VGA/counter_31 ));
  cd_CLOCK_DIVIDER_CONFIG_SLICE_364 \cd/CLOCK_DIVIDER_CONFIG/SLICE_364 ( 
    .D0(c_data_2), .C0(c_data_1), .DI0(\cd/CLOCK_DIVIDER_CONFIG/n4176 ), 
    .CE(\cd/CLOCK_DIVIDER_CONFIG/clk_c_enable_219 ), 
    .LSR(\cd/CLOCK_DIVIDER_CONFIG/n4225 ), .CLK(clk_c), 
    .F0(\cd/CLOCK_DIVIDER_CONFIG/n4176 ), .Q0(\cd/baudrate_1 ));
  cd_CLOCK_DIVIDER_CONFIG_SLICE_366 \cd/CLOCK_DIVIDER_CONFIG/SLICE_366 ( 
    .D1(c_data_2), .C1(c_data_0), .D0(c_data_2), .C0(c_data_0), 
    .DI1(\cd/CLOCK_DIVIDER_CONFIG/baudrate_next_23_N_262_4 ), 
    .DI0(\cd/CLOCK_DIVIDER_CONFIG/baudrate_next_23_N_262_3 ), 
    .CE(\cd/CLOCK_DIVIDER_CONFIG/clk_c_enable_219 ), .CLK(clk_c), 
    .F0(\cd/CLOCK_DIVIDER_CONFIG/baudrate_next_23_N_262_3 ), 
    .Q0(\cd/baudrate_3 ), 
    .F1(\cd/CLOCK_DIVIDER_CONFIG/baudrate_next_23_N_262_4 ), 
    .Q1(\cd/baudrate_4 ));
  SLICE_367 SLICE_367( .C0(c_data_0), .A0(c_data_1), .DI0(n9189), 
    .CE(\cd/CLOCK_DIVIDER_CONFIG/clk_c_enable_219 ), 
    .LSR(\cd/CLOCK_DIVIDER_CONFIG/n4221 ), .CLK(clk_c), .F0(n9189), 
    .Q0(\cd/baudrate_5 ));
  SLICE_368 SLICE_368( .D1(c_data_2), .C1(\cd/CLOCK_DIVIDER_CONFIG/n9130 ), 
    .B1(n9112), .D0(c_data_2), .C0(c_data_0), .A0(c_data_1), 
    .DI0(baudrate_next_23_N_262_6), .M1(c_data_2), 
    .CE(\cd/CLOCK_DIVIDER_CONFIG/clk_c_enable_219 ), .CLK(clk_c), 
    .F0(baudrate_next_23_N_262_6), .Q0(\cd/baudrate_6 ), 
    .F1(\cd/CLOCK_DIVIDER_CONFIG/n4220 ), .Q1(\cd/baudrate_7 ));
  SLICE_370 SLICE_370( .C1(c_data_1), .C0(c_data_1), .B0(c_data_0), 
    .DI1(H_Left_Margin_nxt_8__N_959), .DI0(V_FrontPorch_nxt_9_N_804_3), 
    .CE(\cd/CLOCK_DIVIDER_CONFIG/clk_c_enable_158 ), .CLK(clk_c), 
    .F0(V_FrontPorch_nxt_9_N_804_3), .Q0(\cd/resolution_0 ), 
    .F1(H_Left_Margin_nxt_8__N_959), .Q1(\cd/resolution_1 ));
  SLICE_371 SLICE_371( .B1(counter_31__N_85_adj_1141), .A1(clk_DB), 
    .B0(counter_31__N_85_adj_1141), .A0(clk_DB), 
    .DI0(\cd/CNT_DB/clkout_N_118 ), .M1(\vga/config1/H_Count_Max_nxt_4 ), 
    .CLK(clk_c), .F0(\cd/CNT_DB/clkout_N_118 ), .Q0(clk_DB), 
    .F1(clk_c_enable_198), .Q1(\vga/H_count_max_4 ));
  SLICE_372 SLICE_372( .C1(counter_31__N_85_adj_1140), .A1(clk_LM), 
    .C0(counter_31__N_85_adj_1140), .A0(clk_LM), 
    .DI0(\cd/CNT_LM/clkout_N_118 ), .M1(\vga/config1/H_Left_Margin_nxt_5 ), 
    .CLK(clk_c), .F0(\cd/CNT_LM/clkout_N_118 ), .Q0(clk_LM), 
    .F1(clk_c_enable_81), .Q1(H_left_margin_5));
  SLICE_373 SLICE_373( .D1(n1801), .C1(\FIFO_UART_CM/n9172 ), .B1(clk_UART), 
    .A1(counter_23_N_178_10), .D0(n1801), .C0(counter_23_N_178_10), 
    .A0(clk_UART), .DI0(clkout_N_203), .LSR(rst_n_N_144), .CLK(clk_c), 
    .F0(clkout_N_203), .Q0(clk_UART), .F1(\FIFO_UART_CM/clk_c_enable_166 ));
  SLICE_374 SLICE_374( .D1(button_signal_DEBUG_UART), 
    .C1(VGA_Notification_Valid), .B1(counter_31__N_85), .A1(clk_VGA), 
    .C0(counter_31__N_85), .A0(clk_VGA), .DI0(\cd/CNT_VGA/clkout_N_118 ), 
    .LSR(rst_n_N_52), .CLK(clk_c), .F0(\cd/CNT_VGA/clkout_N_118 ), 
    .Q0(clk_VGA), .F1(n8439));
  cm_counterH_SLICE_375 \cm/counterH/SLICE_375 ( .D1(\cm/counterH/n1851 ), 
    .B1(HSYNC_c), .A1(\cm/counterH/n1838 ), .D0(\cm/counterH/n1851 ), 
    .A0(\cm/counterH/n1838 ), .DI0(\cm/counterH/n9121 ), .CE(HSYNC_c), 
    .CLK(clk_c), .F0(\cm/counterH/n9121 ), .Q0(\cm/Counter_X_Valid ), 
    .F1(\cm/counterH/n4197 ));
  cm_counterV_SLICE_376 \cm/counterV/SLICE_376 ( .D1(VSYNC_c), 
    .C1(\cm/counterV/n1864 ), .B1(\cm/counterV/n1877 ), 
    .C0(\cm/counterV/n1864 ), .B0(\cm/counterV/n1877 ), 
    .DI0(\cm/counterV/n9120 ), .CE(VSYNC_c), .CLK(clk_c), 
    .F0(\cm/counterV/n9120 ), .Q0(\cm/Counter_Y_Valid ), 
    .F1(\cm/counterV/n4195 ));
  cm_assignCM_SLICE_378 \cm/assignCM/SLICE_378 ( .C1(c_data_0), .A1(c_data_1), 
    .C0(c_data_0), .A0(c_data_1), 
    .DI1(\cm/assignCM/H_BackPorch_nxt_7_N_774_5 ), .DI0(\cm/assignCM/n9187 ), 
    .CE(clk_c_enable_93), .CLK(clk_c), .F0(\cm/assignCM/n9187 ), 
    .Q0(\cm/H_BackPorch_4 ), .F1(\cm/assignCM/H_BackPorch_nxt_7_N_774_5 ), 
    .Q1(\cm/H_BackPorch_5 ));
  SLICE_379 SLICE_379( .D0(c_data_0), .A0(c_data_1), .DI0(n9183), 
    .M1(c_data_1), .CE(clk_c_enable_93), .CLK(clk_c), .F0(n9183), 
    .Q0(\cm/H_BackPorch_6 ), .Q1(\cm/H_BackPorch_7 ));
  cm_assignCM_SLICE_381 \cm/assignCM/SLICE_381 ( .D0(c_data_0), 
    .C0(button_signal_VS), .B0(n9124), .A0(button_signal_HS), 
    .DI0(\cm/assignCM/Current_Qudran_Config_nxt_1_N_757_0 ), 
    .CE(\cm/assignCM/clk_c_enable_95 ), .CLK(clk_c), 
    .F0(\cm/assignCM/Current_Qudran_Config_nxt_1_N_757_0 ), 
    .Q0(\cm/assignCM/Current_Qudran_Config_reg_0 ));
  cm_assignCM_SLICE_407 \cm/assignCM/SLICE_407 ( .D0(button_signal_VS), 
    .C0(n9124), .B0(button_signal_HS), .A0(c_data_1), 
    .DI0(\cm/assignCM/Current_Qudran_Config_nxt_1_N_757_1 ), 
    .CE(\cm/assignCM/clk_c_enable_95 ), .CLK(clk_c), 
    .F0(\cm/assignCM/Current_Qudran_Config_nxt_1_N_757_1 ), 
    .Q0(\cm/assignCM/VGA_Notification_nxt_3_N_889_1 ));
  cm_configCM_SLICE_422 \cm/configCM/SLICE_422 ( 
    .D1(\cm/configCM/State_reg_2 ), .A1(\cm/configCM/State_reg_0 ), 
    .D0(\cm/configCM/State_reg_2 ), .C0(\cm/configCM/State_nxt_2_N_474_1 ), 
    .B0(UART_out_CM_data_empty), .A0(\cm/configCM/State_reg_0 ), 
    .DI0(\cm/configCM/State_nxt_2__N_483 ), .M0(\cm/configCM/State_reg_1 ), 
    .CLK(\cm/configCM/State_nxt_2__N_488 ), 
    .OFX0(\cm/configCM/State_nxt_2__N_483 ), .Q0(\cm/configCM/State_nxt_0 ));
  cm_configCM_SLICE_423 \cm/configCM/SLICE_423 ( 
    .D0(\cm/configCM/State_reg_2 ), .B0(UART_out_CM_data_empty), 
    .A0(\cm/configCM/State_nxt_2_N_474_1 ), .DI0(\cm/configCM/n3935 ), 
    .LSR(\cm/configCM/n39 ), .CLK(\cm/configCM/State_nxt_2__N_488 ), 
    .F0(\cm/configCM/n3935 ), .Q0(\cm/configCM/State_nxt_1 ));
  cm_configCM_SLICE_424 \cm/configCM/SLICE_424 ( 
    .D1(\cm/configCM/State_reg_0 ), .B1(\cm/configCM/State_reg_1 ), 
    .A1(\cm/configCM/State_reg_2 ), .D0(\cm/configCM/State_reg_0 ), 
    .C0(c_addr_3__N_470), .B0(\cm/configCM/State_reg_1 ), 
    .A0(\cm/configCM/State_reg_2 ), .DI0(\cm/configCM/State_nxt_2__N_473 ), 
    .CLK(\cm/configCM/State_nxt_2__N_488 ), 
    .F0(\cm/configCM/State_nxt_2__N_473 ), .Q0(\cm/configCM/State_nxt_2 ), 
    .F1(\cm/configCM/n32 ));
  cm_configCM_SLICE_425 \cm/configCM/SLICE_425 ( 
    .D1(\cm/configCM/RXD_Data_reg_13 ), .C1(\cm/configCM/RXD_Data_reg_12 ), 
    .B1(\cm/configCM/RXD_Data_reg_11 ), .A1(\cm/configCM/RXD_Data_reg_14 ), 
    .D0(\cm/configCM/n3921 ), .C0(\cm/configCM/n9138 ), 
    .B0(\cm/configCM/RXD_Data_reg_15 ), .A0(\cm/configCM/RXD_Data_reg_14 ), 
    .DI0(\cm/configCM/Err_nxt_N_612 ), .LSR(\cm/configCM/n9140 ), .CLK(clk_c), 
    .F0(\cm/configCM/Err_nxt_N_612 ), .Q0(\cm/configCM/State_nxt_2_N_474_1 ), 
    .F1(\cm/configCM/n9138 ));
  SLICE_428 SLICE_428( .D1(n124), .B1(n1801), .A1(counter_23_N_178_10), 
    .D0(counter_23_N_178_10), .C0(n125), .A0(n1801), .DI1(n150), .DI0(n151), 
    .LSR(rst_n_N_144), .CLK(clk_c), .F0(n151), .Q0(counter_0), .F1(n150), 
    .Q1(counter_1));
  SLICE_429 SLICE_429( .D1(n122), .B1(n1801), .A1(counter_23_N_178_10), 
    .D0(n1801), .B0(n123), .A0(counter_23_N_178_10), .DI1(n148), .DI0(n149), 
    .LSR(rst_n_N_144), .CLK(clk_c), .F0(n149), .Q0(counter_2), .F1(n148), 
    .Q1(counter_3));
  SLICE_430 SLICE_430( .D1(counter_23_N_178_10), .C1(n120), .B1(n1801), 
    .D0(counter_23_N_178_10), .B0(n121), .A0(n1801), .DI1(n146), .DI0(n147), 
    .LSR(rst_n_N_144), .CLK(clk_c), .F0(n147), .Q0(counter_4), .F1(n146), 
    .Q1(counter_5));
  SLICE_431 SLICE_431( .D1(n118), .B1(counter_23_N_178_10), .A1(n1801), 
    .D0(counter_23_N_178_10), .B0(n1801), .A0(n119), .DI1(n144), .DI0(n145), 
    .LSR(rst_n_N_144), .CLK(clk_c), .F0(n145), .Q0(counter_6), .F1(n144), 
    .Q1(counter_7));
  SLICE_432 SLICE_432( .C1(n116), .B1(counter_23_N_178_10), .A1(n1801), 
    .D0(counter_23_N_178_10), .B0(n117), .A0(n1801), .DI1(n142), .DI0(n143), 
    .LSR(rst_n_N_144), .CLK(clk_c), .F0(n143), .Q0(counter_8), .F1(n142), 
    .Q1(counter_9));
  SLICE_433 SLICE_433( .D1(n114), .B1(counter_23_N_178_10), .A1(n1801), 
    .D0(counter_23_N_178_10), .B0(n115), .A0(n1801), .DI1(n140), .DI0(n141), 
    .LSR(rst_n_N_144), .CLK(clk_c), .F0(n141), .Q0(counter_10), .F1(n140), 
    .Q1(counter_11));
  SLICE_434 SLICE_434( .D1(counter_23_N_178_10), .B1(n112), .A1(n1801), 
    .D0(n1801), .B0(counter_23_N_178_10), .A0(n113), .DI1(n138), .DI0(n139), 
    .LSR(rst_n_N_144), .CLK(clk_c), .F0(n139), .Q0(counter_12), .F1(n138), 
    .Q1(counter_13));
  SLICE_435 SLICE_435( .C1(n1801), .B1(n110), .A1(counter_23_N_178_10), 
    .C0(n1801), .B0(counter_23_N_178_10), .A0(n111), .DI1(n136), .DI0(n137), 
    .LSR(rst_n_N_144), .CLK(clk_c), .F0(n137), .Q0(counter_14), .F1(n136), 
    .Q1(counter_15));
  SLICE_436 SLICE_436( .D1(counter_23_N_178_10), .C1(n1801), .B1(n108), 
    .D0(counter_23_N_178_10), .C0(n109_adj_1144), .B0(n1801), .DI1(n134), 
    .DI0(n135), .LSR(rst_n_N_144), .CLK(clk_c), .F0(n135), .Q0(counter_16), 
    .F1(n134), .Q1(counter_17));
  SLICE_437 SLICE_437( .D1(n1801), .C1(n106), .A1(counter_23_N_178_10), 
    .D0(n1801), .B0(n107_adj_1145), .A0(counter_23_N_178_10), .DI1(n132), 
    .DI0(n133), .LSR(rst_n_N_144), .CLK(clk_c), .F0(n133), .Q0(counter_18), 
    .F1(n132), .Q1(counter_19));
  SLICE_438 SLICE_438( .C1(n1801), .B1(counter_23_N_178_10), .A1(n104), 
    .C0(n105), .B0(n1801), .A0(counter_23_N_178_10), .DI1(n130), .DI0(n131), 
    .LSR(rst_n_N_144), .CLK(clk_c), .F0(n131), .Q0(counter_20), .F1(n130), 
    .Q1(counter_21));
  SLICE_439 SLICE_439( .C1(counter_23_N_178_10), .B1(n102), .A1(n1801), 
    .C0(counter_23_N_178_10), .B0(n103), .A0(n1801), .DI1(n128), .DI0(n129), 
    .LSR(rst_n_N_144), .CLK(clk_c), .F0(n129), .Q0(counter_22), .F1(n128), 
    .Q1(counter_23));
  uart_SAMPLER_SLICE_440 \uart/SAMPLER/SLICE_440 ( 
    .D1(\uart/SAMPLER/nr_0_reg_3 ), .C1(\uart/SAMPLER/nr_1_reg_3 ), 
    .A1(\uart/SAMPLER/nr_0_reg_2 ), .D0(\uart/SAMPLER/nr_0_reg_0 ), 
    .C0(\uart/SAMPLER/nr_0_reg_1 ), .B0(\uart/SAMPLER/nr_1_reg_0 ), 
    .A0(\uart/SAMPLER/nr_1_reg_1 ), .DI0(\uart/SAMPLER/out_next_N_449 ), 
    .M0(\uart/SAMPLER/n8573 ), .CE(clk_UART_enable_3), .CLK(clk_UART), 
    .OFX0(\uart/SAMPLER/out_next_N_449 ), .Q0(data));
  db_DB_DF_UART_SLICE_441 \db/DB_DF_UART/SLICE_441 ( 
    .D1(\db/DB_DF_UART/ctr_ff_1 ), .A1(\db/DB_DF_UART/ctr_ff_0 ), 
    .D0(\db/DB_DF_UART/ctr_ff_1 ), .A0(\db/DB_DF_UART/ctr_ff_0 ), 
    .DI1(\db/DB_DF_UART/n8500 ), .DI0(\db/DB_DF_UART/n8522 ), 
    .CE(clk_c_enable_198), .LSR(n4203), .CLK(clk_c), 
    .F0(\db/DB_DF_UART/n8522 ), .Q0(\db/DB_DF_UART/ctr_ff_0 ), 
    .F1(\db/DB_DF_UART/n8500 ), .Q1(\db/DB_DF_UART/ctr_ff_1 ));
  db_DB_DF_VGA_SLICE_442 \db/DB_DF_VGA/SLICE_442 ( 
    .D1(\db/DB_DF_VGA/ctr_ff_0 ), .A1(\db/DB_DF_VGA/ctr_ff_1 ), 
    .D0(\db/DB_DF_VGA/ctr_ff_0 ), .A0(\db/DB_DF_VGA/ctr_ff_1 ), 
    .DI1(\db/DB_DF_VGA/n8506 ), .DI0(\db/DB_DF_VGA/n8528 ), 
    .CE(clk_c_enable_198), .LSR(n4202), .CLK(clk_c), .F0(\db/DB_DF_VGA/n8528 ), 
    .Q0(\db/DB_DF_VGA/ctr_ff_0 ), .F1(\db/DB_DF_VGA/n8506 ), 
    .Q1(\db/DB_DF_VGA/ctr_ff_1 ));
  db_DB_HS_SLICE_443 \db/DB_HS/SLICE_443 ( .B1(\db/DB_HS/ctr_ff_0 ), 
    .A1(\db/DB_HS/ctr_ff_1 ), .C0(\db/DB_HS/ctr_ff_1 ), 
    .A0(\db/DB_HS/ctr_ff_0 ), .DI1(\db/DB_HS/n8494 ), .DI0(\db/DB_HS/n8485 ), 
    .CE(clk_c_enable_198), .LSR(n4194), .CLK(clk_c), .F0(\db/DB_HS/n8485 ), 
    .Q0(\db/DB_HS/ctr_ff_0 ), .F1(\db/DB_HS/n8494 ), .Q1(\db/DB_HS/ctr_ff_1 ));
  db_DB_VS_SLICE_444 \db/DB_VS/SLICE_444 ( .C1(\db/DB_VS/ctr_ff_1 ), 
    .A1(\db/DB_VS/ctr_ff_0 ), .C0(\db/DB_VS/ctr_ff_1 ), 
    .A0(\db/DB_VS/ctr_ff_0 ), .DI1(\db/DB_VS/n8504 ), .DI0(\db/DB_VS/n8527 ), 
    .CE(clk_c_enable_198), .LSR(n4204), .CLK(clk_c), .F0(\db/DB_VS/n8527 ), 
    .Q0(\db/DB_VS/ctr_ff_0 ), .F1(\db/DB_VS/n8504 ), .Q1(\db/DB_VS/ctr_ff_1 ));
  uart_SAMPLER_SLICE_445 \uart/SAMPLER/SLICE_445 ( .B1(in_c), 
    .A1(\uart/SAMPLER/nr_1_reg_0 ), .B0(flag_reg), .A0(in_c), 
    .DI0(\uart/SAMPLER/flag_next ), .CE(clk_UART_enable_1), .CLK(clk_UART), 
    .F0(\uart/SAMPLER/flag_next ), .Q0(flag_reg), .F1(\uart/SAMPLER/n9190 ));
  uart_UART_STATE_SLICE_454 \uart/UART_STATE/SLICE_454 ( .D1(n474), 
    .C1(\uart/UART_STATE/n456 ), .B1(n473), .A1(n5308), 
    .D0(\uart/UART_STATE/n9173 ), .C0(n472), .B0(data), 
    .A0(\uart/UART_STATE/n9091 ), .DI1(\uart/UART_STATE/n2531 ), 
    .DI0(\uart/UART_STATE/n8227 ), .CE(clk_c_enable_87), .LSR(rst_n_N_350), 
    .CLK(clk_c), .F0(\uart/UART_STATE/n8227 ), .Q0(n472), 
    .F1(\uart/UART_STATE/n2531 ), .Q1(n473));
  SLICE_455 SLICE_455( .D1(data), .C1(n2), .B1(n476), 
    .A1(valid_error_next_N_411), .D0(n5308), .C0(data), .B0(n476), .A0(n474), 
    .DI1(n8285), .DI0(n2529), .CE(clk_c_enable_87), .LSR(rst_n_N_350), 
    .CLK(clk_c), .F0(n2529), .Q0(n474), .F1(n8285), .Q1(n476));
  SLICE_456 SLICE_456( .D1(n476), .C1(data), .B1(valid_data), .A1(n474), 
    .C0(data), .B0(n474), .A0(parity_check_reg), 
    .DI0(\uart/UART_STATE/parity_check_next_N_416 ), .CE(clk_UART_enable_4), 
    .LSR(rst_n_N_350), .CLK(clk_UART), 
    .F0(\uart/UART_STATE/parity_check_next_N_416 ), .Q0(parity_check_reg), 
    .F1(clk_UART_enable_4));
  uart_UART_STATE_SLICE_458 \uart/UART_STATE/SLICE_458 ( 
    .D1(stop_iteration_step_reg_0), .C1(n473), .A1(stop_iteration_step_reg_1), 
    .D0(n473), .A0(stop_iteration_step_reg_0), .DI1(\uart/UART_STATE/n18 ), 
    .DI0(\uart/UART_STATE/n19 ), .CE(\uart/clk_c_enable_218 ), 
    .LSR(rst_n_N_350), .CLK(clk_c), .F0(\uart/UART_STATE/n19 ), 
    .Q0(stop_iteration_step_reg_0), .F1(\uart/UART_STATE/n18 ), 
    .Q1(stop_iteration_step_reg_1));
  uart_SAMPLER_SLICE_459 \uart/SAMPLER/SLICE_459 ( 
    .B1(\uart/SAMPLER/nr_0_reg_0 ), .A1(\uart/SAMPLER/nr_0_reg_1 ), 
    .A0(\uart/SAMPLER/nr_0_reg_0 ), .DI1(\uart/SAMPLER/n24_adj_1128 ), 
    .DI0(\uart/SAMPLER/n9193 ), .CE(clk_c_enable_168), .LSR(n5755), 
    .CLK(clk_c), .F0(\uart/SAMPLER/n9193 ), .Q0(\uart/SAMPLER/nr_0_reg_0 ), 
    .F1(\uart/SAMPLER/n24_adj_1128 ), .Q1(\uart/SAMPLER/nr_0_reg_1 ));
  uart_SAMPLER_SLICE_460 \uart/SAMPLER/SLICE_460 ( 
    .D1(\uart/SAMPLER/nr_0_reg_3 ), .C1(\uart/SAMPLER/nr_0_reg_0 ), 
    .B1(\uart/SAMPLER/nr_0_reg_1 ), .A1(\uart/SAMPLER/nr_0_reg_2 ), 
    .D0(\uart/SAMPLER/nr_0_reg_0 ), .B0(\uart/SAMPLER/nr_0_reg_1 ), 
    .A0(\uart/SAMPLER/nr_0_reg_2 ), .DI1(\uart/SAMPLER/n22_adj_1129 ), 
    .DI0(\uart/SAMPLER/n23_adj_1130 ), .CE(clk_c_enable_168), .LSR(n5755), 
    .CLK(clk_c), .F0(\uart/SAMPLER/n23_adj_1130 ), 
    .Q0(\uart/SAMPLER/nr_0_reg_2 ), .F1(\uart/SAMPLER/n22_adj_1129 ), 
    .Q1(\uart/SAMPLER/nr_0_reg_3 ));
  uart_SAMPLER_SLICE_461 \uart/SAMPLER/SLICE_461 ( 
    .C1(\uart/SAMPLER/nr_1_reg_0 ), .B1(in_c), .A1(\uart/SAMPLER/nr_1_reg_1 ), 
    .C0(in_c), .A0(\uart/SAMPLER/nr_1_reg_0 ), .DI1(\uart/SAMPLER/n24 ), 
    .DI0(\uart/SAMPLER/n25 ), .CE(clk_c_enable_154), .LSR(n5755), .CLK(clk_c), 
    .F0(\uart/SAMPLER/n25 ), .Q0(\uart/SAMPLER/nr_1_reg_0 ), 
    .F1(\uart/SAMPLER/n24 ), .Q1(\uart/SAMPLER/nr_1_reg_1 ));
  uart_SAMPLER_SLICE_462 \uart/SAMPLER/SLICE_462 ( 
    .D1(\uart/SAMPLER/nr_1_reg_1 ), .C1(\uart/SAMPLER/n9190 ), 
    .B1(\uart/SAMPLER/nr_1_reg_2 ), .A1(\uart/SAMPLER/nr_1_reg_3 ), .D0(in_c), 
    .C0(\uart/SAMPLER/nr_1_reg_0 ), .B0(\uart/SAMPLER/nr_1_reg_1 ), 
    .A0(\uart/SAMPLER/nr_1_reg_2 ), .DI1(\uart/SAMPLER/n22 ), 
    .DI0(\uart/SAMPLER/n23 ), .CE(clk_c_enable_154), .LSR(n5755), .CLK(clk_c), 
    .F0(\uart/SAMPLER/n23 ), .Q0(\uart/SAMPLER/nr_1_reg_2 ), 
    .F1(\uart/SAMPLER/n22 ), .Q1(\uart/SAMPLER/nr_1_reg_3 ));
  uart_SAMPLER_SLICE_463 \uart/SAMPLER/SLICE_463 ( 
    .D1(\uart/SAMPLER/val_reg_0 ), .A1(\uart/SAMPLER/val_reg_1 ), 
    .A0(\uart/SAMPLER/val_reg_0 ), .DI1(\uart/SAMPLER/n24_adj_1134 ), 
    .DI0(\uart/SAMPLER/n25_adj_1127 ), .CE(\uart/clk_c_enable_215 ), 
    .CLK(clk_c), .F0(\uart/SAMPLER/n25_adj_1127 ), 
    .Q0(\uart/SAMPLER/val_reg_0 ), .F1(\uart/SAMPLER/n24_adj_1134 ), 
    .Q1(\uart/SAMPLER/val_reg_1 ));
  uart_SAMPLER_SLICE_464 \uart/SAMPLER/SLICE_464 ( 
    .D1(\uart/SAMPLER/val_reg_3 ), .C1(\uart/SAMPLER/val_reg_0 ), 
    .B1(\uart/SAMPLER/val_reg_2 ), .A1(\uart/SAMPLER/val_reg_1 ), 
    .D0(\uart/SAMPLER/val_reg_0 ), .B0(\uart/SAMPLER/val_reg_2 ), 
    .A0(\uart/SAMPLER/val_reg_1 ), .DI1(\uart/SAMPLER/n22_adj_1133 ), 
    .DI0(\uart/SAMPLER/n23_adj_1132 ), .CE(\uart/clk_c_enable_215 ), 
    .CLK(clk_c), .F0(\uart/SAMPLER/n23_adj_1132 ), 
    .Q0(\uart/SAMPLER/val_reg_2 ), .F1(\uart/SAMPLER/n22_adj_1133 ), 
    .Q1(\uart/SAMPLER/val_reg_3 ));
  uart_UART_STATE_SLICE_465 \uart/UART_STATE/SLICE_465 ( .C1(n474), 
    .B1(\uart/UART_STATE/data_iteration_step_reg_0 ), 
    .A1(\uart/UART_STATE/data_iteration_step_reg_1 ), .C0(n474), 
    .A0(\uart/UART_STATE/data_iteration_step_reg_0 ), 
    .DI1(\uart/UART_STATE/n24 ), .DI0(\uart/UART_STATE/n25 ), 
    .CE(clk_c_enable_224), .LSR(rst_n_N_350), .CLK(clk_c), 
    .F0(\uart/UART_STATE/n25 ), 
    .Q0(\uart/UART_STATE/data_iteration_step_reg_0 ), 
    .F1(\uart/UART_STATE/n24 ), 
    .Q1(\uart/UART_STATE/data_iteration_step_reg_1 ));
  uart_UART_STATE_SLICE_466 \uart/UART_STATE/SLICE_466 ( 
    .D1(\uart/UART_STATE/data_iteration_step_reg_2 ), 
    .C1(\uart/UART_STATE/data_iteration_step_reg_0 ), 
    .A1(\uart/UART_STATE/data_iteration_step_reg_1 ), 
    .D0(\uart/UART_STATE/data_iteration_step_reg_1 ), 
    .C0(\uart/UART_STATE/data_iteration_step_reg_0 ), .B0(n474), 
    .A0(\uart/UART_STATE/data_iteration_step_reg_2 ), 
    .DI0(\uart/UART_STATE/n23 ), .CE(clk_c_enable_224), .LSR(rst_n_N_350), 
    .CLK(clk_c), .F0(\uart/UART_STATE/n23 ), 
    .Q0(\uart/UART_STATE/data_iteration_step_reg_2 ), .F1(n5308));
  uart_UART_STATE_SLICE_467 \uart/UART_STATE/SLICE_467 ( 
    .D1(\uart/UART_STATE/wait_iteration_step_reg_0 ), .C1(n472), 
    .A1(\uart/UART_STATE/wait_iteration_step_reg_1 ), .B0(n472), 
    .A0(\uart/UART_STATE/wait_iteration_step_reg_0 ), 
    .DI1(\uart/UART_STATE/n8437 ), .DI0(\uart/UART_STATE/n8253 ), 
    .CE(\uart/clk_c_enable_212 ), .LSR(rst_n_N_350), .CLK(clk_c), 
    .F0(\uart/UART_STATE/n8253 ), 
    .Q0(\uart/UART_STATE/wait_iteration_step_reg_0 ), 
    .F1(\uart/UART_STATE/n8437 ), 
    .Q1(\uart/UART_STATE/wait_iteration_step_reg_1 ));
  uart_SAMPLER_SLICE_469 \uart/SAMPLER/SLICE_469 ( 
    .D1(\uart/SAMPLER/val_reg_0 ), .C1(\uart/SAMPLER/val_reg_1 ), 
    .B1(\uart/SAMPLER/val_reg_3 ), .A1(\uart/SAMPLER/val_reg_2 ), 
    .D0(\uart/SAMPLER/val_reg_0 ), .C0(\uart/SAMPLER/val_reg_1 ), 
    .B0(\uart/SAMPLER/val_reg_3 ), .A0(\uart/SAMPLER/val_reg_2 ), .DI0(n9144), 
    .LSR(clk_UART_enable_1), .CLK(clk_UART), .F0(n9144), .Q0(valid_data), 
    .F1(n25));
  SLICE_470 SLICE_470( .D1(clk_c_enable_87), .C1(n476), .B1(n472), .A1(data), 
    .D0(n9197), .C0(data), .B0(n473), .A0(n472), .DI0(n513), 
    .CE(clk_c_enable_87), .LSR(rst_n_N_350), .CLK(clk_c), .F0(n513), 
    .Q0(valid_error_next_N_411), .F1(\uart/clk_c_enable_212 ));
  SLICE_494 SLICE_494( .D1(Count_v_7), .C1(n1373), .B1(Count_v_6), .A1(n8407), 
    .D0(Active_nxt_N_1068), .C0(\vga/assgncolor/n6 ), .B0(n8410), .A0(n1947), 
    .DI0(\vga/assgncolor/Active_nxt ), .CLK(clk_c), 
    .F0(\vga/assgncolor/Active_nxt ), .Q0(\vga/assgncolor/Active_reg ), 
    .F1(Active_nxt_N_1068));
  vga_config1_SLICE_498 \vga/config1/SLICE_498 ( .D0(\vga/H_count_max_5 ), 
    .C0(n9153), .B0(c_data_1), .DI0(\vga/config1/H_Count_Max_nxt_11__N_1026 ), 
    .CLK(\vga/config1/H_Left_Margin_nxt_8__N_969 ), 
    .F0(\vga/config1/H_Count_Max_nxt_11__N_1026 ), 
    .Q0(\vga/config1/H_Count_Max_nxt_5 ));
  SLICE_500 SLICE_500( .D1(H_count_max_8), .C1(n9153), .B1(c_data_1), 
    .A1(c_data_0), .D0(c_data_0), .C0(n9153), .B0(\vga/H_count_max_7 ), 
    .A0(c_data_1), .DI1(H_Count_Max_nxt_11__N_1022), 
    .DI0(\vga/config1/H_Count_Max_nxt_11__N_1024 ), 
    .CLK(\vga/config1/H_Left_Margin_nxt_8__N_969 ), 
    .F0(\vga/config1/H_Count_Max_nxt_11__N_1024 ), 
    .Q0(\vga/config1/H_Count_Max_nxt_7 ), .F1(H_Count_Max_nxt_11__N_1022), 
    .Q1(\vga/config1/H_Count_Max_nxt_8 ));
  vga_config1_SLICE_501 \vga/config1/SLICE_501 ( .D1(c_data_0), .C1(n9153), 
    .B1(\vga/H_count_max_10 ), .A1(c_data_1), .D0(c_data_0), .C0(n9153), 
    .A0(\vga/H_count_max_9 ), .DI1(\vga/config1/H_Count_Max_nxt_11__N_1020 ), 
    .DI0(\vga/config1/H_Count_Max_nxt_11__N_1021 ), 
    .CLK(\vga/config1/H_Left_Margin_nxt_8__N_969 ), 
    .F0(\vga/config1/H_Count_Max_nxt_11__N_1021 ), 
    .Q0(\vga/config1/H_Count_Max_nxt_9 ), 
    .F1(\vga/config1/H_Count_Max_nxt_11__N_1020 ), 
    .Q1(\vga/config1/H_Count_Max_nxt_10 ));
  vga_config1_SLICE_502 \vga/config1/SLICE_502 ( .D0(\vga/H_count_max_11 ), 
    .C0(n9153), .B0(c_data_1), .A0(c_data_0), 
    .DI0(\vga/config1/H_Count_Max_nxt_11__N_1019 ), 
    .CLK(\vga/config1/H_Left_Margin_nxt_8__N_969 ), 
    .F0(\vga/config1/H_Count_Max_nxt_11__N_1019 ), 
    .Q0(\vga/config1/H_Count_Max_nxt_11 ));
  vga_config1_SLICE_504 \vga/config1/SLICE_504 ( .D1(c_data_0), .C1(n9153), 
    .B1(c_data_1), .A1(H_left_margin_3), .D0(c_data_0), .C0(n9153), 
    .B0(c_data_1), .A0(H_left_margin_2), 
    .DI1(\vga/config1/H_Left_Margin_nxt_8__N_964 ), 
    .DI0(\vga/config1/H_Left_Margin_nxt_8__N_965 ), 
    .CLK(\vga/config1/H_Left_Margin_nxt_8__N_969 ), 
    .F0(\vga/config1/H_Left_Margin_nxt_8__N_965 ), 
    .Q0(\vga/config1/H_Left_Margin_nxt_2 ), 
    .F1(\vga/config1/H_Left_Margin_nxt_8__N_964 ), 
    .Q1(\vga/config1/H_Left_Margin_nxt_3 ));
  vga_config1_SLICE_505 \vga/config1/SLICE_505 ( .D1(H_left_margin_5), 
    .C1(n9153), .B1(c_data_1), .A1(c_data_0), .C0(n9153), .B0(c_data_1), 
    .A0(H_left_margin_4), .DI1(\vga/config1/H_Left_Margin_nxt_8__N_962 ), 
    .DI0(\vga/config1/H_Left_Margin_nxt_8__N_963 ), 
    .CLK(\vga/config1/H_Left_Margin_nxt_8__N_969 ), 
    .F0(\vga/config1/H_Left_Margin_nxt_8__N_963 ), 
    .Q0(\vga/config1/H_Left_Margin_nxt_4 ), 
    .F1(\vga/config1/H_Left_Margin_nxt_8__N_962 ), 
    .Q1(\vga/config1/H_Left_Margin_nxt_5 ));
  vga_config1_SLICE_506 \vga/config1/SLICE_506 ( .D1(H_left_margin_7), 
    .C1(n9153), .A1(c_data_1), .D0(H_left_margin_6), .C0(n9153), .B0(c_data_0), 
    .A0(c_data_1), .DI1(\vga/config1/H_Left_Margin_nxt_8__N_958 ), 
    .DI0(\vga/config1/H_Left_Margin_nxt_8__N_960 ), 
    .CLK(\vga/config1/H_Left_Margin_nxt_8__N_969 ), 
    .F0(\vga/config1/H_Left_Margin_nxt_8__N_960 ), 
    .Q0(\vga/config1/H_Left_Margin_nxt_6 ), 
    .F1(\vga/config1/H_Left_Margin_nxt_8__N_958 ), 
    .Q1(\vga/config1/H_Left_Margin_nxt_7 ));
  vga_config1_SLICE_507 \vga/config1/SLICE_507 ( .D0(c_data_1), .C0(n9153), 
    .B0(H_left_margin_8), .A0(c_data_0), 
    .DI0(\vga/config1/H_Left_Margin_nxt_8__N_954 ), 
    .CLK(\vga/config1/H_Left_Margin_nxt_8__N_969 ), 
    .F0(\vga/config1/H_Left_Margin_nxt_8__N_954 ), 
    .Q0(\vga/config1/H_Left_Margin_nxt_8 ));
  vga_config1_SLICE_510 \vga/config1/SLICE_510 ( .D1(\vga/H_right_margin_4 ), 
    .C1(n9153), .B1(c_data_1), .D0(\vga/H_right_margin_3 ), .C0(n9153), 
    .B0(c_data_0), .A0(c_data_1), 
    .DI1(\vga/config1/H_Right_Margin_nxt_10__N_988 ), 
    .DI0(\vga/config1/H_Right_Margin_nxt_10__N_989 ), 
    .CLK(\vga/config1/H_Left_Margin_nxt_8__N_969 ), 
    .F0(\vga/config1/H_Right_Margin_nxt_10__N_989 ), 
    .Q0(\vga/config1/H_Right_Margin_nxt_3 ), 
    .F1(\vga/config1/H_Right_Margin_nxt_10__N_988 ), 
    .Q1(\vga/config1/H_Right_Margin_nxt_4 ));
  vga_config1_SLICE_511 \vga/config1/SLICE_511 ( .D1(\vga/H_right_margin_6 ), 
    .C1(n9153), .B1(c_data_0), .A1(c_data_1), .D0(c_data_1), .C0(n9153), 
    .B0(c_data_0), .A0(\vga/H_right_margin_5 ), 
    .DI1(\vga/config1/H_Right_Margin_nxt_10__N_986 ), 
    .DI0(\vga/config1/H_Right_Margin_nxt_10__N_987 ), 
    .CLK(\vga/config1/H_Left_Margin_nxt_8__N_969 ), 
    .F0(\vga/config1/H_Right_Margin_nxt_10__N_987 ), 
    .Q0(\vga/config1/H_Right_Margin_nxt_5 ), 
    .F1(\vga/config1/H_Right_Margin_nxt_10__N_986 ), 
    .Q1(\vga/config1/H_Right_Margin_nxt_6 ));
  vga_config1_SLICE_512 \vga/config1/SLICE_512 ( .D1(c_data_1), .C1(n9153), 
    .B1(c_data_0), .A1(\vga/H_right_margin_8 ), .D0(\vga/H_right_margin_7 ), 
    .C0(n9153), .B0(c_data_0), .A0(c_data_1), 
    .DI1(\vga/config1/H_Right_Margin_nxt_10__N_984 ), 
    .DI0(\vga/config1/H_Right_Margin_nxt_10__N_985 ), 
    .CLK(\vga/config1/H_Left_Margin_nxt_8__N_969 ), 
    .F0(\vga/config1/H_Right_Margin_nxt_10__N_985 ), 
    .Q0(\vga/config1/H_Right_Margin_nxt_7 ), 
    .F1(\vga/config1/H_Right_Margin_nxt_10__N_984 ), 
    .Q1(\vga/config1/H_Right_Margin_nxt_8 ));
  vga_config1_SLICE_513 \vga/config1/SLICE_513 ( .D1(c_data_0), .C1(n9153), 
    .B1(\vga/H_right_margin_10 ), .A1(c_data_1), .D0(\vga/H_right_margin_9 ), 
    .C0(n9153), .A0(c_data_1), 
    .DI1(\vga/config1/H_Right_Margin_nxt_10__N_982 ), 
    .DI0(\vga/config1/H_Right_Margin_nxt_10__N_983 ), 
    .CLK(\vga/config1/H_Left_Margin_nxt_8__N_969 ), 
    .F0(\vga/config1/H_Right_Margin_nxt_10__N_983 ), 
    .Q0(\vga/config1/H_Right_Margin_nxt_9 ), 
    .F1(\vga/config1/H_Right_Margin_nxt_10__N_982 ), 
    .Q1(\vga/config1/H_Right_Margin_nxt_10 ));
  vga_config1_SLICE_515 \vga/config1/SLICE_515 ( .D1(c_data_0), .C1(n9153), 
    .B1(H_sync_pulse_2), .A1(c_data_1), .D0(H_sync_pulse_1), .C0(n9153), 
    .B0(c_data_0), .A0(c_data_1), 
    .DI1(\vga/config1/H_Sync_Pulse_nxt_7__N_1008 ), 
    .DI0(\vga/config1/H_Sync_Pulse_nxt_7__N_1009 ), 
    .CLK(\vga/config1/H_Left_Margin_nxt_8__N_969 ), 
    .F0(\vga/config1/H_Sync_Pulse_nxt_7__N_1009 ), 
    .Q0(\vga/config1/H_Sync_Pulse_nxt_1 ), 
    .F1(\vga/config1/H_Sync_Pulse_nxt_7__N_1008 ), 
    .Q1(\vga/config1/H_Sync_Pulse_nxt_2 ));
  vga_config1_SLICE_516 \vga/config1/SLICE_516 ( .C1(n9153), 
    .B1(H_sync_pulse_4), .A1(c_data_1), .D0(H_sync_pulse_3), .C0(n9153), 
    .A0(c_data_1), .DI1(\vga/config1/H_Sync_Pulse_nxt_7__N_1006 ), 
    .DI0(\vga/config1/H_Sync_Pulse_nxt_7__N_1007 ), 
    .CLK(\vga/config1/H_Left_Margin_nxt_8__N_969 ), 
    .F0(\vga/config1/H_Sync_Pulse_nxt_7__N_1007 ), 
    .Q0(\vga/config1/H_Sync_Pulse_nxt_3 ), 
    .F1(\vga/config1/H_Sync_Pulse_nxt_7__N_1006 ), 
    .Q1(\vga/config1/H_Sync_Pulse_nxt_4 ));
  vga_config1_SLICE_517 \vga/config1/SLICE_517 ( .D1(c_data_1), .C1(n9153), 
    .B1(H_sync_pulse_6), .D0(H_sync_pulse_5), .C0(n9153), .B0(c_data_1), 
    .A0(c_data_0), .DI1(\vga/config1/H_Sync_Pulse_nxt_7__N_1004 ), 
    .DI0(\vga/config1/H_Sync_Pulse_nxt_7__N_1005 ), 
    .CLK(\vga/config1/H_Left_Margin_nxt_8__N_969 ), 
    .F0(\vga/config1/H_Sync_Pulse_nxt_7__N_1005 ), 
    .Q0(\vga/config1/H_Sync_Pulse_nxt_5 ), 
    .F1(\vga/config1/H_Sync_Pulse_nxt_7__N_1004 ), 
    .Q1(\vga/config1/H_Sync_Pulse_nxt_6 ));
  vga_config1_SLICE_518 \vga/config1/SLICE_518 ( .D0(c_data_1), .C0(n9153), 
    .B0(H_sync_pulse_7), .A0(c_data_0), 
    .DI0(\vga/config1/H_Sync_Pulse_nxt_7__N_1003 ), 
    .CLK(\vga/config1/H_Left_Margin_nxt_8__N_969 ), 
    .F0(\vga/config1/H_Sync_Pulse_nxt_7__N_1003 ), 
    .Q0(\vga/config1/H_Sync_Pulse_nxt_7 ));
  vga_config1_SLICE_519 \vga/config1/SLICE_519 ( .D1(c_addr_2), 
    .C1(c_data_1_derived_1), .B1(c_valid), .A1(c_addr_3), .C0(c_data_1), 
    .B0(c_data_0), .DI0(c_data_1_derived_1), 
    .LSR(\vga/config1/Load_nxt_N_1044 ), .CLK(c_data_1_derived_1), 
    .F0(c_data_1_derived_1), .Q0(\vga/config1/Load_nxt ), 
    .F1(\vga/config1/H_Left_Margin_nxt_8__N_969 ));
  vga_config1_SLICE_521 \vga/config1/SLICE_521 ( .D1(c_data_0), .C1(n9153), 
    .B1(c_data_1), .A1(\vga/V_count_max_2 ), .D0(c_data_0), .C0(n9153), 
    .B0(\vga/V_count_max_1 ), .A0(c_data_1), 
    .DI1(\vga/config1/V_Count_Max_nxt_11__N_1041 ), 
    .DI0(\vga/config1/V_Count_Max_nxt_11__N_1042 ), 
    .CLK(\vga/config1/H_Left_Margin_nxt_8__N_969 ), 
    .F0(\vga/config1/V_Count_Max_nxt_11__N_1042 ), 
    .Q0(\vga/config1/V_Count_Max_nxt_1 ), 
    .F1(\vga/config1/V_Count_Max_nxt_11__N_1041 ), 
    .Q1(\vga/config1/V_Count_Max_nxt_2 ));
  SLICE_522 SLICE_522( .D1(c_data_0), .C1(n9153), .B1(\vga/V_count_max_4 ), 
    .A1(c_data_1), .D0(V_count_max_3), .C0(n9153), .B0(c_data_0), 
    .A0(c_data_1), .DI1(\vga/config1/V_Count_Max_nxt_11__N_1039 ), 
    .DI0(V_Count_Max_nxt_11__N_1040), 
    .CLK(\vga/config1/H_Left_Margin_nxt_8__N_969 ), 
    .F0(V_Count_Max_nxt_11__N_1040), .Q0(\vga/config1/V_Count_Max_nxt_3 ), 
    .F1(\vga/config1/V_Count_Max_nxt_11__N_1039 ), 
    .Q1(\vga/config1/V_Count_Max_nxt_4 ));
  vga_config1_SLICE_523 \vga/config1/SLICE_523 ( .D1(c_data_0), .C1(n9153), 
    .B1(c_data_1), .A1(\vga/V_count_max_6 ), .D0(c_data_1), .C0(n9153), 
    .B0(\vga/V_count_max_5 ), .A0(c_data_0), 
    .DI1(\vga/config1/V_Count_Max_nxt_11__N_1037 ), 
    .DI0(\vga/config1/V_Count_Max_nxt_11__N_1038 ), 
    .CLK(\vga/config1/H_Left_Margin_nxt_8__N_969 ), 
    .F0(\vga/config1/V_Count_Max_nxt_11__N_1038 ), 
    .Q0(\vga/config1/V_Count_Max_nxt_5 ), 
    .F1(\vga/config1/V_Count_Max_nxt_11__N_1037 ), 
    .Q1(\vga/config1/V_Count_Max_nxt_6 ));
  vga_config1_SLICE_525 \vga/config1/SLICE_525 ( .D1(c_data_1), .C1(n9153), 
    .B1(\vga/V_count_max_9 ), .A1(c_data_0), .D0(c_data_1), .C0(n9153), 
    .B0(c_data_0), .A0(\vga/V_count_max_8 ), 
    .DI1(\vga/config1/V_Count_Max_nxt_11__N_1034 ), 
    .DI0(\vga/config1/V_Count_Max_nxt_11__N_1035 ), 
    .CLK(\vga/config1/H_Left_Margin_nxt_8__N_969 ), 
    .F0(\vga/config1/V_Count_Max_nxt_11__N_1035 ), 
    .Q0(\vga/config1/V_Count_Max_nxt_8 ), 
    .F1(\vga/config1/V_Count_Max_nxt_11__N_1034 ), 
    .Q1(\vga/config1/V_Count_Max_nxt_9 ));
  vga_config1_SLICE_527 \vga/config1/SLICE_527 ( .D1(c_data_1), .C1(n9153), 
    .B1(c_data_0), .A1(V_left_margin_1), .D0(c_data_1), .C0(n9153), 
    .B0(c_data_0), .A0(V_left_margin_0), 
    .DI1(\vga/config1/V_Left_Margin_nxt_5__N_978 ), 
    .DI0(\vga/config1/V_Left_Margin_nxt_5__N_980 ), 
    .CLK(\vga/config1/H_Left_Margin_nxt_8__N_969 ), 
    .F0(\vga/config1/V_Left_Margin_nxt_5__N_980 ), 
    .Q0(\vga/config1/V_Left_Margin_nxt_0 ), 
    .F1(\vga/config1/V_Left_Margin_nxt_5__N_978 ), 
    .Q1(\vga/config1/V_Left_Margin_nxt_1 ));
  SLICE_528 SLICE_528( .M1(\vga/H_count_max_0 ), .M0(V_left_margin_2), 
    .LSR(n9153), .CLK(\vga/config1/H_Left_Margin_nxt_8__N_969 ), .F0(VCC_net), 
    .Q0(\vga/config1/V_Left_Margin_nxt_2 ), 
    .Q1(\vga/config1/H_Count_Max_nxt_0 ));
  vga_config1_SLICE_529 \vga/config1/SLICE_529 ( .D1(c_data_0), .C1(n9153), 
    .B1(c_data_1), .A1(V_left_margin_4), .D0(c_data_0), .C0(n9153), 
    .B0(c_data_1), .A0(V_left_margin_3), 
    .DI1(\vga/config1/V_Left_Margin_nxt_5__N_975 ), 
    .DI0(\vga/config1/V_Left_Margin_nxt_5__N_976 ), 
    .CLK(\vga/config1/H_Left_Margin_nxt_8__N_969 ), 
    .F0(\vga/config1/V_Left_Margin_nxt_5__N_976 ), 
    .Q0(\vga/config1/V_Left_Margin_nxt_3 ), 
    .F1(\vga/config1/V_Left_Margin_nxt_5__N_975 ), 
    .Q1(\vga/config1/V_Left_Margin_nxt_4 ));
  SLICE_530 SLICE_530( .B1(Count_v_5), .A1(V_left_margin_5), .D0(c_data_0), 
    .C0(n9153), .A0(V_left_margin_5), 
    .DI0(\vga/config1/V_Left_Margin_nxt_5__N_973 ), 
    .CLK(\vga/config1/H_Left_Margin_nxt_8__N_969 ), 
    .F0(\vga/config1/V_Left_Margin_nxt_5__N_973 ), 
    .Q0(\vga/config1/V_Left_Margin_nxt_5 ), .F1(n9175));
  vga_config1_SLICE_531 \vga/config1/SLICE_531 ( .D1(\vga/V_right_margin_1 ), 
    .C1(n9153), .B1(c_data_1), .A1(c_data_0), .D0(\vga/V_right_margin_0 ), 
    .C0(n9153), .B0(c_data_1), .A0(c_data_0), 
    .DI1(\vga/config1/V_Right_Margin_nxt_9__N_1001 ), 
    .DI0(\vga/config1/V_Right_Margin_nxt_9__N_1002 ), 
    .CLK(\vga/config1/H_Left_Margin_nxt_8__N_969 ), 
    .F0(\vga/config1/V_Right_Margin_nxt_9__N_1002 ), 
    .Q0(\vga/config1/V_Right_Margin_nxt_0 ), 
    .F1(\vga/config1/V_Right_Margin_nxt_9__N_1001 ), 
    .Q1(\vga/config1/V_Right_Margin_nxt_1 ));
  SLICE_532 SLICE_532( .C1(\cm/assignCM/VGA_Notification_nxt_3_N_889_1 ), 
    .B1(\cm/assignCM/Current_Qudran_Config_reg_0 ), .C0(V_sync_pulse_6), 
    .B0(Count_v_6), .M1(\vga/V_right_margin_3 ), .M0(\vga/V_right_margin_2 ), 
    .LSR(n9153), .CLK(\vga/config1/H_Left_Margin_nxt_8__N_969 ), .F0(n9185), 
    .Q0(\vga/config1/V_Right_Margin_nxt_2 ), .F1(\cm/assignCM/n11 ), 
    .Q1(\vga/config1/V_Right_Margin_nxt_3 ));
  vga_config1_SLICE_533 \vga/config1/SLICE_533 ( .D1(\vga/V_right_margin_5 ), 
    .C1(n9153), .B1(c_data_1), .A1(c_data_0), .D0(\vga/V_right_margin_4 ), 
    .C0(n9153), .B0(c_data_1), .A0(c_data_0), 
    .DI1(\vga/config1/V_Right_Margin_nxt_9__N_997 ), 
    .DI0(\vga/config1/V_Right_Margin_nxt_9__N_998 ), 
    .CLK(\vga/config1/H_Left_Margin_nxt_8__N_969 ), 
    .F0(\vga/config1/V_Right_Margin_nxt_9__N_998 ), 
    .Q0(\vga/config1/V_Right_Margin_nxt_4 ), 
    .F1(\vga/config1/V_Right_Margin_nxt_9__N_997 ), 
    .Q1(\vga/config1/V_Right_Margin_nxt_5 ));
  vga_config1_SLICE_534 \vga/config1/SLICE_534 ( .D1(c_addr_2), .C1(c_valid), 
    .A1(c_addr_3), .D0(\vga/V_right_margin_6 ), .C0(n9153), .B0(c_data_1), 
    .A0(c_data_0), .DI0(\vga/config1/V_Right_Margin_nxt_9__N_996 ), 
    .CLK(\vga/config1/H_Left_Margin_nxt_8__N_969 ), 
    .F0(\vga/config1/V_Right_Margin_nxt_9__N_996 ), 
    .Q0(\vga/config1/V_Right_Margin_nxt_6 ), .F1(n9153));
  SLICE_535 SLICE_535( .D1(\vga/assgncolor/Active_nxt_N_1069 ), 
    .A1(\vga/assgncolor/Active_nxt_N_1067 ), .C0(H_sync_pulse_6), 
    .B0(Count_h_6), .M1(\vga/H_count_max_1 ), .M0(\vga/V_right_margin_7 ), 
    .LSR(n9153), .CLK(\vga/config1/H_Left_Margin_nxt_8__N_969 ), .F0(n9179), 
    .Q0(\vga/config1/V_Right_Margin_nxt_7 ), .F1(\vga/assgncolor/n6 ), 
    .Q1(\vga/config1/H_Count_Max_nxt_1 ));
  vga_config1_SLICE_536 \vga/config1/SLICE_536 ( .D1(\vga/V_right_margin_9 ), 
    .C1(n9153), .B1(c_data_1), .A1(c_data_0), .D0(c_data_0), .C0(n9153), 
    .B0(\vga/V_right_margin_8 ), .A0(c_data_1), 
    .DI1(\vga/config1/V_Right_Margin_nxt_9__N_993 ), 
    .DI0(\vga/config1/V_Right_Margin_nxt_9__N_994 ), 
    .CLK(\vga/config1/H_Left_Margin_nxt_8__N_969 ), 
    .F0(\vga/config1/V_Right_Margin_nxt_9__N_994 ), 
    .Q0(\vga/config1/V_Right_Margin_nxt_8 ), 
    .F1(\vga/config1/V_Right_Margin_nxt_9__N_993 ), 
    .Q1(\vga/config1/V_Right_Margin_nxt_9 ));
  SLICE_537 SLICE_537( .D1(\uart/SAMPLER/nr_1_reg_2 ), 
    .C1(\uart/SAMPLER/nr_0_reg_3 ), .B1(\uart/SAMPLER/nr_1_reg_3 ), 
    .A1(\uart/SAMPLER/nr_0_reg_2 ), .B0(UART_valid_error), .A0(w_empty_reg), 
    .M1(\vga/H_count_max_2 ), .M0(V_sync_pulse_0), .LSR(n9153), 
    .CLK(\vga/config1/H_Left_Margin_nxt_8__N_969 ), .F0(clk_LM_enable_2), 
    .Q0(\vga/config1/V_Sync_Pulse_nxt_0 ), .F1(\uart/SAMPLER/n8573 ), 
    .Q1(\vga/config1/H_Count_Max_nxt_2 ));
  vga_config1_SLICE_538 \vga/config1/SLICE_538 ( .D1(c_data_0), .C1(n9153), 
    .B1(c_data_1), .A1(V_sync_pulse_2), .D0(c_data_0), .C0(n9153), 
    .B0(c_data_1), .A0(V_sync_pulse_1), 
    .DI1(\vga/config1/V_Sync_Pulse_nxt_7__N_1016 ), 
    .DI0(\vga/config1/V_Sync_Pulse_nxt_7__N_1017 ), 
    .CLK(\vga/config1/H_Left_Margin_nxt_8__N_969 ), 
    .F0(\vga/config1/V_Sync_Pulse_nxt_7__N_1017 ), 
    .Q0(\vga/config1/V_Sync_Pulse_nxt_1 ), 
    .F1(\vga/config1/V_Sync_Pulse_nxt_7__N_1016 ), 
    .Q1(\vga/config1/V_Sync_Pulse_nxt_2 ));
  SLICE_539 SLICE_539( .D1(H_sync_pulse_0), .C1(Count_h_0), 
    .B1(H_sync_pulse_1), .A1(Count_h_1), .D0(\db/DB_DF_UART/ctr_ff_0 ), 
    .B0(\db/DB_DF_UART/ctr_ff_1 ), .M1(V_sync_pulse_4), .M0(V_sync_pulse_3), 
    .LSR(n9153), .CLK(\vga/config1/H_Left_Margin_nxt_8__N_969 ), 
    .F0(\db/DB_DF_UART/clk_DB_enable_4 ), 
    .Q0(\vga/config1/V_Sync_Pulse_nxt_3 ), .F1(n4), 
    .Q1(\vga/config1/V_Sync_Pulse_nxt_4 ));
  SLICE_540 SLICE_540( .C1(\db/DB_DF_VGA/ctr_ff_1 ), 
    .B1(\db/DB_DF_VGA/ctr_ff_0 ), .D0(\db/DB_HS/ctr_ff_0 ), 
    .A0(\db/DB_HS/ctr_ff_1 ), .M1(V_sync_pulse_6), .M0(V_sync_pulse_5), 
    .LSR(n9153), .CLK(\vga/config1/H_Left_Margin_nxt_8__N_969 ), 
    .F0(\db/DB_HS/clk_DB_enable_3 ), .Q0(\vga/config1/V_Sync_Pulse_nxt_5 ), 
    .F1(\db/DB_DF_VGA/clk_DB_enable_2 ), .Q1(\vga/config1/V_Sync_Pulse_nxt_6 ));
  SLICE_541 SLICE_541( .D1(\db/DB_VS/ctr_ff_0 ), .A1(\db/DB_VS/ctr_ff_1 ), 
    .D0(V_left_margin_2), .A0(Count_v_2), .M1(\vga/H_count_max_3 ), 
    .M0(V_sync_pulse_7), .LSR(n9153), 
    .CLK(\vga/config1/H_Left_Margin_nxt_8__N_969 ), .F0(n5), 
    .Q0(\vga/config1/V_Sync_Pulse_nxt_7 ), .F1(\db/DB_VS/clk_DB_enable_1 ), 
    .Q1(\vga/config1/H_Count_Max_nxt_3 ));
  SLICE_542 SLICE_542( .D1(clk_UART), .C1(counter_23_N_178_10), 
    .B1(UART_valid_error), .A1(n1801), .D0(UART_valid_error), 
    .DI0(\FIFO_UART_error/n9155 ), .CLK(clk_UART), 
    .F0(\FIFO_UART_error/n9155 ), .Q0(w_empty_reg), .F1(clk_c_enable_187));
  LessThan_841_i16_SLICE_543 \LessThan_841_i16/SLICE_543 ( .D1(n12_adj_1155), 
    .C1(n4_adj_1151), .B1(n8604), .A1(n9186), .D0(V_sync_pulse_4), 
    .C0(Count_v_4), .B0(n6_adj_1152), .M0(n8607), .OFX0(n1367));
  LessThan_838_i16_SLICE_544 \LessThan_838_i16/SLICE_544 ( .D1(n12), 
    .C1(n9180), .B1(n4), .A1(n8564), .D0(Count_h_4), .B0(n6), 
    .A0(H_sync_pulse_4), .M0(n8567), .OFX0(n1364));
  LessThan_847_i12_SLICE_545 \LessThan_847_i12/SLICE_545 ( 
    .D1(V_left_margin_5), .B1(Count_v_5), .A1(n4_adj_1147), .C0(n6_adj_1148), 
    .B0(V_left_margin_4), .A0(Count_v_4), .M0(n8589), .OFX0(n1373));
  cm_configCM_i7676_SLICE_546 \cm/configCM/i7676/SLICE_546 ( 
    .D1(\cm/configCM/RXD_Data_reg_13 ), .C1(\cm/configCM/RXD_Data_reg_10 ), 
    .B1(\cm/configCM/n9146 ), .A1(\cm/configCM/RXD_Data_reg_9 ), 
    .D0(\cm/configCM/n9146 ), .C0(\cm/configCM/RXD_Data_reg_10 ), 
    .A0(\cm/configCM/RXD_Data_reg_9 ), .M0(\cm/configCM/RXD_Data_reg_8 ), 
    .OFX0(\cm/configCM/n9203 ));
  cm_assignCM_mux_742_i2_SLICE_547 \cm/assignCM/mux_742_i2/SLICE_547 ( 
    .D1(\cm/Counter_X_Valid ), .C1(\cm/Counter_Y_Valid ), 
    .B1(button_signal_DEBUG_VGA), .A1(\cm/assignCM/Right_DOWN_reg_1 ), 
    .C0(\cm/assignCM/Right_UP_reg_1 ), .B0(\cm/assignCM/n1329 ), 
    .A0(\cm/assignCM/Left_DOWN_reg_1 ), .M0(\cm/assignCM/n1337 ), 
    .OFX0(\cm/assignCM/n1243 ));
  cm_assignCM_mux_742_i11_SLICE_548 \cm/assignCM/mux_742_i11/SLICE_548 ( 
    .D1(button_signal_DEBUG_VGA), .C1(\cm/Counter_Y_Valid ), 
    .B1(\cm/assignCM/Right_DOWN_reg_10 ), .A1(\cm/Counter_X_Valid ), 
    .D0(\cm/assignCM/Right_UP_reg_10 ), .C0(\cm/assignCM/n1329 ), 
    .B0(\cm/assignCM/Left_DOWN_reg_10 ), .M0(\cm/assignCM/n1337 ), 
    .OFX0(\cm/assignCM/n1234 ));
  cm_assignCM_mux_742_i10_SLICE_549 \cm/assignCM/mux_742_i10/SLICE_549 ( 
    .D1(\cm/Counter_Y_Valid ), .C1(\cm/assignCM/Right_DOWN_reg_9 ), 
    .B1(button_signal_DEBUG_VGA), .A1(\cm/Counter_X_Valid ), 
    .D0(\cm/assignCM/Left_DOWN_reg_9 ), .C0(\cm/assignCM/n1329 ), 
    .B0(\cm/assignCM/Right_UP_reg_9 ), .M0(\cm/assignCM/n1337 ), 
    .OFX0(\cm/assignCM/n1235 ));
  cm_assignCM_mux_742_i9_SLICE_550 \cm/assignCM/mux_742_i9/SLICE_550 ( 
    .D1(\cm/Counter_Y_Valid ), .C1(button_signal_DEBUG_VGA), 
    .B1(\cm/Counter_X_Valid ), .A1(\cm/assignCM/Right_DOWN_reg_8 ), 
    .D0(\cm/assignCM/Right_UP_reg_8 ), .C0(\cm/assignCM/n1329 ), 
    .A0(\cm/assignCM/Left_DOWN_reg_8 ), .M0(\cm/assignCM/n1337 ), 
    .OFX0(\cm/assignCM/n1236 ));
  cm_assignCM_mux_742_i7_SLICE_551 \cm/assignCM/mux_742_i7/SLICE_551 ( 
    .D1(\cm/Counter_X_Valid ), .C1(button_signal_DEBUG_VGA), 
    .B1(\cm/Counter_Y_Valid ), .A1(\cm/assignCM/Right_DOWN_reg_6 ), 
    .D0(\cm/assignCM/Right_UP_reg_6 ), .C0(\cm/assignCM/Left_DOWN_reg_6 ), 
    .B0(\cm/assignCM/n1329 ), .M0(\cm/assignCM/n1337 ), 
    .OFX0(\cm/assignCM/n1238 ));
  cm_assignCM_mux_742_i6_SLICE_552 \cm/assignCM/mux_742_i6/SLICE_552 ( 
    .D1(\cm/Counter_X_Valid ), .C1(\cm/Counter_Y_Valid ), 
    .B1(\cm/assignCM/Right_DOWN_reg_5 ), .A1(button_signal_DEBUG_VGA), 
    .D0(\cm/assignCM/Left_DOWN_reg_5 ), .C0(\cm/assignCM/n1329 ), 
    .A0(\cm/assignCM/Right_UP_reg_5 ), .M0(\cm/assignCM/n1337 ), 
    .OFX0(\cm/assignCM/n1239 ));
  cm_assignCM_mux_742_i3_SLICE_553 \cm/assignCM/mux_742_i3/SLICE_553 ( 
    .D1(\cm/Counter_X_Valid ), .C1(button_signal_DEBUG_VGA), 
    .B1(\cm/Counter_Y_Valid ), .A1(\cm/assignCM/Right_DOWN_reg_2 ), 
    .D0(\cm/assignCM/Right_UP_reg_2 ), .C0(\cm/assignCM/n1329 ), 
    .B0(\cm/assignCM/Left_DOWN_reg_2 ), .M0(\cm/assignCM/n1337 ), 
    .OFX0(\cm/assignCM/n1242 ));
  cm_assignCM_i7593_SLICE_554 \cm/assignCM/i7593/SLICE_554 ( 
    .C1(\cm/assignCM/n523 ), .A1(\cm/assignCM/n521 ), 
    .D0(\cm/Counter_Y_Valid ), .C0(button_signal_DEBUG_VGA), 
    .B0(\cm/assignCM/Right_DOWN_reg_4 ), .A0(\cm/Counter_X_Valid ), 
    .M0(\cm/assignCM/n9133 ), .OFX0(\cm/assignCM/n8965 ));
  cm_assignCM_i7674_SLICE_555 \cm/assignCM/i7674/SLICE_555 ( 
    .D1(\cm/assignCM/n8492 ), .C1(\cm/assignCM/n521 ), .B1(\cm/assignCM/n523 ), 
    .A1(\cm/assignCM/Current_Qudran_Config_reg_0 ), .D0(\cm/assignCM/n8492 ), 
    .C0(\cm/assignCM/n523 ), .A0(\cm/assignCM/Current_Qudran_Config_reg_0 ), 
    .M0(\cm/assignCM/VGA_Notification_nxt_3_N_889_1 ), 
    .OFX0(\cm/assignCM/n1343 ));
  i7672_SLICE_556 \i7672/SLICE_556 ( .B1(data), .D0(parity_check_reg), 
    .C0(paritybit), .B0(data), .A0(stop_iteration_step_reg_1), 
    .M0(stop_iteration_step_reg_0), .OFX0(n9197));
  i111_SLICE_557 \i111/SLICE_557 ( .D1(n473), .C1(clk_UART), .B1(n9119), 
    .A1(n4737), .D0(n9135), .C0(n9118), .B0(n473), .A0(n476), .M0(data), 
    .OFX0(n109));
  SLICE_558 SLICE_558( .D1(valid_data), .C1(data), .B1(n9119), .A1(clk_UART), 
    .D0(n109), .C0(n9113), .B0(valid_data), .A0(n472), .F0(clk_c_enable_222), 
    .F1(n9113));
  uart_UART_STATE_SLICE_559 \uart/UART_STATE/SLICE_559 ( .D1(data), .C1(n9135), 
    .B1(\uart/UART_STATE/n6 ), .A1(\uart/stopbit ), .D0(\uart/n9192 ), 
    .C0(data), .B0(paritybit), .A0(parity_check_reg), .F0(n9135), 
    .F1(\uart/UART_STATE/n456 ));
  cm_configCM_SLICE_560 \cm/configCM/SLICE_560 ( 
    .D1(\cm/configCM/RXD_Data_reg_11 ), .C1(\cm/configCM/n8413 ), 
    .B1(\cm/configCM/n3693 ), .A1(\cm/configCM/n3525 ), 
    .D0(\cm/configCM/RXD_Data_reg_14 ), .C0(\cm/configCM/RXD_Data_reg_11 ), 
    .B0(\cm/configCM/n9128 ), .A0(\cm/configCM/RXD_Data_reg_13 ), 
    .M1(UART_out_CM_data_5), .M0(UART_out_CM_data_4), 
    .CE(\cm/configCM/clk_c_enable_220 ), .LSR(\cm/configCM/clk_c_enable_69 ), 
    .CLK(clk_c), .F0(\cm/configCM/n8413 ), .Q0(\cm/configCM/RXD_Data_reg_4 ), 
    .F1(\cm/configCM/clk_c_enable_48 ), .Q1(\cm/configCM/RXD_Data_reg_5 ));
  cm_configCM_SLICE_561 \cm/configCM/SLICE_561 ( .D1(\cm/configCM/n9389 ), 
    .C1(\cm/configCM/n9146 ), .B1(\cm/configCM/RXD_Data_reg_14 ), 
    .A1(\cm/configCM/n9158 ), .D0(\cm/configCM/n9123 ), 
    .C0(\cm/configCM/n9146 ), .B0(\cm/configCM/RXD_Data_reg_11 ), 
    .A0(\cm/configCM/RXD_Data_reg_10 ), .F0(\cm/configCM/n5 ), 
    .F1(\cm/configCM/n9123 ));
  cm_configCM_SLICE_562 \cm/configCM/SLICE_562 ( 
    .D1(\cm/configCM/RXD_Data_reg_14 ), .C1(\cm/configCM/RXD_Data_reg_12 ), 
    .B1(\cm/configCM/RXD_Data_reg_11 ), .A1(\cm/configCM/RXD_Data_reg_13 ), 
    .D0(\cm/configCM/RXD_Data_reg_11 ), .C0(\cm/configCM/n9138 ), 
    .B0(\cm/configCM/n9134 ), .A0(\cm/configCM/n9203 ), 
    .F0(\cm/configCM/n8547 ), .F1(\cm/configCM/n9134 ));
  cm_configCM_SLICE_563 \cm/configCM/SLICE_563 ( 
    .C1(\cm/configCM/RXD_Data_reg_12 ), .B1(\cm/configCM/RXD_Data_reg_14 ), 
    .A1(\cm/configCM/RXD_Data_reg_13 ), .D0(\cm/configCM/n3200 ), 
    .C0(\cm/configCM/n9146 ), .B0(\cm/configCM/RXD_Data_reg_11 ), 
    .A0(\cm/configCM/RXD_Data_reg_13 ), .F0(\cm/configCM/n4108 ), 
    .F1(\cm/configCM/n9146 ));
  cm_configCM_SLICE_564 \cm/configCM/SLICE_564 ( .D1(\cm/configCM/n22 ), 
    .C1(\cm/configCM/RXD_Data_reg_15 ), .B1(\cm/configCM/n9158 ), 
    .A1(\cm/configCM/RXD_Data_reg_14 ), .D0(\cm/configCM/n9140 ), 
    .C0(\cm/configCM/n8488 ), .B0(\cm/configCM/n16 ), 
    .A0(\cm/configCM/RXD_Data_reg_14 ), .F0(\cm/configCM/clk_c_enable_25 ), 
    .F1(\cm/configCM/n16 ));
  cm_configCM_SLICE_565 \cm/configCM/SLICE_565 ( 
    .D1(\cm/configCM/RXD_Data_reg_8 ), .C1(c_data_1), 
    .B1(\cm/configCM/RXD_Data_reg_9 ), .A1(\cm/configCM/RXD_Data_reg_11 ), 
    .D0(\cm/configCM/n20 ), .C0(\cm/configCM/n4_adj_1100 ), 
    .B0(\cm/configCM/RXD_Data_reg_9 ), .A0(\cm/configCM/RXD_Data_reg_12 ), 
    .M1(\cm/configCM/RXD_Data_reg_13 ), .M0(\cm/configCM/RXD_Data_reg_12 ), 
    .CE(\cm/configCM/clk_c_enable_60 ), .CLK(clk_c), .F0(\cm/configCM/n23 ), 
    .Q0(\cm/c_data_12 ), .F1(\cm/configCM/n4_adj_1100 ), .Q1(\cm/c_data_13 ));
  cm_assignCM_SLICE_566 \cm/assignCM/SLICE_566 ( 
    .D1(\cm/assignCM/clk_c_enable_151 ), .C1(\cm/assignCM/n1337 ), 
    .B1(button_signal_DEBUG_VGA), .A1(\cm/assignCM/n1343 ), 
    .D0(\cm/assignCM/clk_c_enable_151 ), .C0(\cm/assignCM/n8634 ), 
    .B0(\cm/assignCM/n5 ), .A0(\cm/assignCM/n11 ), .M1(\cm/c_data_7 ), 
    .M0(\cm/c_data_6 ), .CE(\cm/assignCM/clk_c_enable_128 ), .CLK(clk_c), 
    .F0(\cm/assignCM/n1337 ), .Q0(\cm/assignCM/Left_DOWN_reg_6 ), 
    .F1(\cm/assignCM/n8580 ), .Q1(\cm/assignCM/Left_DOWN_reg_7 ));
  SLICE_567 SLICE_567( .D1(c_addr_3), .C1(c_addr_0), .B1(c_addr_1), 
    .A1(c_addr_2), .D0(counter_31__N_85), .C0(c_valid), .B0(n9147), 
    .A0(clk_VGA), .M1(btnVS_c), .M0(btnHS_c), .CLK(clk_DB), 
    .F0(clk_c_enable_19), .Q0(button_ff_adj_1146), .F1(n9147), .Q1(button_ff));
  SLICE_568 SLICE_568( .D1(c_data_1), .C1(c_data_2), .B1(n9112), 
    .A1(\cd/CLOCK_DIVIDER_CONFIG/n9130 ), .D0(counter_31__N_85), .C0(c_valid), 
    .B0(clk_VGA), .M0(button_ff), .CE(\db/DB_VS/clk_DB_enable_1 ), 
    .CLK(clk_DB), .F0(n9112), .Q0(button_signal_VS), 
    .F1(\cd/CLOCK_DIVIDER_CONFIG/n4221 ));
  SLICE_569 SLICE_569( .D1(Count_v_4), .C1(V_sync_pulse_4), .D0(n9185), 
    .C0(n9184), .B0(n9188), .A0(n8593), .F0(n8746), .F1(n9188));
  SLICE_570 SLICE_570( .D1(Count_h_4), .A1(H_sync_pulse_4), .D0(n9179), 
    .C0(n9181), .B0(n8553), .A0(n9178), .F0(n8702), .F1(n9181));
  SLICE_571 SLICE_571( .C1(V_left_margin_4), .B1(Count_v_4), .D0(n9175), 
    .C0(n9176), .B0(n9177), .A0(n5), .F0(n8589), .F1(n9177));
  SLICE_572 SLICE_572( .D1(n9115), .C1(n9154), .B1(n8939), .A1(n9144), 
    .D0(flag_reg), .C0(UART_valid_out), .F0(n9154), .F1(clk_c_enable_168));
  SLICE_573 SLICE_573( .D1(\uart/SAMPLER/val_reg_2 ), 
    .A1(\uart/SAMPLER/val_reg_3 ), .D0(flag_reg), .C0(UART_valid_out), 
    .B0(n9169), .A0(n9168), .F0(n9131), .F1(n9169));
  SLICE_574 SLICE_574( .D1(n1801), .C1(clk_UART_enable_1), 
    .B1(counter_23_N_178_10), .A1(clk_UART), .D0(UART_valid_out), 
    .C0(flag_reg), .B0(UART_valid_error), .F0(clk_UART_enable_1), 
    .F1(\uart/clk_c_enable_215 ));
  SLICE_575 SLICE_575( .C1(n1801), .B1(counter_23_N_178_10), .D0(n9131), 
    .C0(n9119), .B0(UART_valid_error), .A0(clk_UART), .F0(n5755), .F1(n9119));
  SLICE_576 SLICE_576( .D1(n476), .B1(n474), .A1(data), .D0(n9119), .C0(n9143), 
    .B0(clk_UART), .A0(valid_data), .M0(button_ff_adj_1146), 
    .CE(\db/DB_HS/clk_DB_enable_3 ), .CLK(clk_DB), .F0(clk_c_enable_224), 
    .Q0(button_signal_HS), .F1(n9143));
  SLICE_577 SLICE_577( .D1(n476), .C1(clk_c_enable_87), .B1(data), .A1(n473), 
    .D0(counter_23_N_178_10), .C0(clk_UART), .B0(valid_data), .A0(n1801), 
    .F0(clk_c_enable_87), .F1(\uart/clk_c_enable_218 ));
  SLICE_578 SLICE_578( .D1(\uart/SAMPLER/val_reg_0 ), 
    .A1(\uart/SAMPLER/val_reg_1 ), .D0(n9169), .C0(n9168), 
    .B0(UART_valid_error), .A0(n9154), .M1(\FIFO_CM_error/w_data_reg_3 ), 
    .M0(\FIFO_CM_error/w_data_reg_2 ), .CE(\FIFO_CM_error/clk_c_enable_170 ), 
    .CLK(clk_c), .F0(clk_UART_enable_3), .Q0(VGA_error_data_2), .F1(n9168), 
    .Q1(VGA_error_data_3));
  SLICE_579 SLICE_579( .D1(n9168), .C1(n25), .B1(n9154), .A1(n9115), 
    .D0(n1801), .C0(UART_valid_error), .B0(clk_UART), .A0(counter_23_N_178_10), 
    .F0(n9115), .F1(clk_c_enable_154));
  uart_SLICE_580 \uart/SLICE_580 ( .D1(paritybit), .C1(\uart/n9192 ), 
    .B1(n8008), .A1(\uart/n9182 ), .D0(parity_check_reg), .B0(data), 
    .M0(c_data_1), .CE(clk_c_enable_19), .CLK(clk_c), .F0(\uart/n9182 ), 
    .Q0(paritybit), .F1(\uart/n130 ));
  uart_SLICE_581 \uart/SLICE_581 ( .D1(paritybit), .C1(\uart/n9192 ), 
    .B1(parity_check_reg), .A1(data), .D0(stop_iteration_step_reg_0), 
    .A0(stop_iteration_step_reg_1), .M0(c_data_0), .CE(clk_VGA_enable_1), 
    .CLK(clk_VGA), .F0(\uart/n9192 ), .Q0(\uart/stopbit ), .F1(n4737));
  uart_UART_STATE_SLICE_582 \uart/UART_STATE/SLICE_582 ( .D1(data), 
    .C1(\uart/UART_STATE/wait_iteration_step_reg_0 ), 
    .B1(\uart/UART_STATE/wait_iteration_step_reg_1 ), .D0(n476), 
    .C0(\uart/UART_STATE/n9151 ), .B0(valid_data), .A0(n472), 
    .F0(\uart/UART_STATE/clk_UART_enable_5 ), .F1(\uart/UART_STATE/n9151 ));
  uart_UART_STATE_SLICE_583 \uart/UART_STATE/SLICE_583 ( 
    .D1(stop_iteration_step_reg_0), .C1(\uart/stopbit ), .B1(paritybit), 
    .A1(stop_iteration_step_reg_1), .D0(n473), .C0(\uart/UART_STATE/n9090 ), 
    .F0(\uart/UART_STATE/n9091 ), .F1(\uart/UART_STATE/n9090 ));
  SLICE_584 SLICE_584( .D1(c_addr_2), .C1(c_addr_3), .B1(c_valid), .A1(n8448), 
    .C0(c_addr_0), .A0(c_addr_1), .F0(n8448), .F1(n9124));
  uart_SAMPLER_SLICE_585 \uart/SAMPLER/SLICE_585 ( .D1(in_c), 
    .C1(\uart/SAMPLER/n8938 ), .D0(\uart/SAMPLER/val_reg_2 ), 
    .C0(\uart/SAMPLER/val_reg_0 ), .B0(\uart/SAMPLER/val_reg_3 ), 
    .A0(\uart/SAMPLER/val_reg_1 ), .F0(\uart/SAMPLER/n8938 ), .F1(n8939));
  SLICE_586 SLICE_586( .D1(n1801), .C1(clk_UART), .B1(counter_23_N_178_10), 
    .D0(valid_data), .C0(n9118), .B0(n476), .A0(n473), .F0(n8008), .F1(n9118));
  SLICE_587 SLICE_587( .D1(H_sync_pulse_7), .C1(n10), .A1(Count_h_7), 
    .D0(Count_h_6), .C0(Count_h_5), .A0(H_sync_pulse_6), 
    .CE(\FIFO_CM_error/clk_LM_enable_4 ), .CLK(clk_LM), .F0(n10), 
    .Q0(VGA_error_empty), .F1(n12));
  SLICE_588 SLICE_588( .D1(c_valid), .C1(c_addr_1), .B1(c_addr_0), 
    .A1(\cd/CLOCK_DIVIDER_CONFIG/n9164 ), .D0(button_signal_DEBUG_VGA), 
    .C0(H_BackPorch_nxt_7__N_782), .B0(c_data_1), .A0(c_data_0), 
    .M1(\vga/config1/H_Count_Max_nxt_11 ), 
    .M0(\vga/config1/H_Count_Max_nxt_10 ), .CLK(clk_c), .F0(clk_c_enable_93), 
    .Q0(\vga/H_count_max_10 ), .F1(H_BackPorch_nxt_7__N_782), 
    .Q1(\vga/H_count_max_11 ));
  SLICE_589 SLICE_589( .D1(V_sync_pulse_7), .C1(Count_v_7), .A1(n10_adj_1154), 
    .C0(V_sync_pulse_6), .B0(Count_v_5), .A0(Count_v_6), 
    .M1(\FIFO_UART_CM/w_data_reg_7 ), .M0(\FIFO_UART_CM/w_data_reg_6 ), 
    .CE(\FIFO_UART_CM/clk_c_enable_221 ), .CLK(clk_c), .F0(n10_adj_1154), 
    .Q0(UART_out_CM_data_6), .F1(n12_adj_1155), .Q1(UART_out_CM_data_7));
  cm_configCM_SLICE_590 \cm/configCM/SLICE_590 ( 
    .D1(\cm/configCM/State_reg_2 ), .B1(\cm/configCM/State_reg_0 ), 
    .A1(\cm/configCM/State_reg_1 ), .D0(\cm/configCM/n8547 ), 
    .C0(\cm/configCM/RXD_Data_reg_15 ), .B0(\cm/configCM/n9140 ), 
    .A0(\cm/configCM/RXD_Data_reg_14 ), .M1(UART_out_CM_data_3), 
    .M0(UART_out_CM_data_2), .CE(\cm/configCM/clk_c_enable_220 ), 
    .LSR(\cm/configCM/clk_c_enable_69 ), .CLK(clk_c), 
    .F0(\cm/configCM/clk_c_enable_30 ), .Q0(\cm/configCM/RXD_Data_reg_2 ), 
    .F1(\cm/configCM/n9140 ), .Q1(\cm/configCM/RXD_Data_reg_3 ));
  cm_configCM_SLICE_591 \cm/configCM/SLICE_591 ( .D1(\cm/configCM/n9158 ), 
    .C1(\cm/configCM/RXD_Data_reg_15 ), .B1(\cm/configCM/RXD_Data_reg_14 ), 
    .A1(\cm/configCM/n9389 ), .C0(\cm/configCM/RXD_Data_reg_11 ), 
    .B0(\cm/configCM/RXD_Data_reg_12 ), .A0(\cm/configCM/RXD_Data_reg_13 ), 
    .M1(UART_out_CM_data_7), .M0(UART_out_CM_data_6), 
    .CE(\cm/configCM/clk_c_enable_69 ), .CLK(clk_c), .F0(\cm/configCM/n9389 ), 
    .Q0(\cm/configCM/RXD_Data_reg_14 ), .F1(\cm/configCM/n9127 ), 
    .Q1(\cm/configCM/RXD_Data_reg_15 ));
  cm_configCM_SLICE_592 \cm/configCM/SLICE_592 ( 
    .D1(\cm/configCM/RXD_Data_reg_9 ), .A1(\cm/configCM/RXD_Data_reg_10 ), 
    .D0(\cm/configCM/n9138 ), .C0(\cm/configCM/n9170 ), 
    .B0(\cm/configCM/RXD_Data_reg_15 ), .A0(\cm/configCM/n9129 ), 
    .M1(\cm/configCM/State_nxt_1 ), .M0(\cm/configCM/State_nxt_0 ), 
    .CLK(clk_c), .F0(\cm/configCM/n8002 ), .Q0(\cm/configCM/State_reg_0 ), 
    .F1(\cm/configCM/n9170 ), .Q1(\cm/configCM/State_reg_1 ));
  cm_configCM_SLICE_593 \cm/configCM/SLICE_593 ( 
    .D1(\cm/configCM/RXD_Data_reg_15 ), .C1(\cm/configCM/RXD_Data_reg_14 ), 
    .B1(\cm/configCM/n9140 ), .A1(\cm/configCM/n8 ), 
    .D0(\cm/configCM/RXD_Data_reg_11 ), .C0(\cm/configCM/n9138 ), 
    .B0(\cm/configCM/n9170 ), .A0(\cm/configCM/n9146 ), 
    .M1(UART_out_CM_data_5), .M0(UART_out_CM_data_4), 
    .CE(\cm/configCM/clk_c_enable_69 ), .CLK(clk_c), .F0(\cm/configCM/n8 ), 
    .Q0(\cm/configCM/RXD_Data_reg_12 ), .F1(\cm/configCM/clk_c_enable_27 ), 
    .Q1(\cm/configCM/RXD_Data_reg_13 ));
  cm_configCM_SLICE_594 \cm/configCM/SLICE_594 ( .C1(\cm/configCM/n3525 ), 
    .B1(\cm/configCM/n3937 ), .A1(\cm/configCM/RXD_Data_reg_11 ), 
    .D0(\cm/configCM/n9140 ), .C0(\cm/configCM/n8418 ), 
    .B0(\cm/configCM/n9127 ), .A0(\cm/configCM/n8468 ), 
    .M1(UART_out_CM_data_7), .M0(UART_out_CM_data_6), 
    .CE(\cm/configCM/clk_c_enable_220 ), .LSR(\cm/configCM/clk_c_enable_69 ), 
    .CLK(clk_c), .F0(\cm/configCM/clk_c_enable_207 ), 
    .Q0(\cm/configCM/RXD_Data_reg_6 ), .F1(\cm/configCM/n8418 ), 
    .Q1(\cm/configCM/RXD_Data_reg_7 ));
  cm_configCM_SLICE_595 \cm/configCM/SLICE_595 ( 
    .D1(\cm/configCM/RXD_Data_reg_11 ), .C1(\cm/configCM/n8468 ), 
    .B1(\cm/configCM/n3525 ), .A1(\cm/configCM/n4108 ), 
    .D0(\cm/configCM/n9127 ), .C0(\cm/configCM/n8470 ), 
    .B0(\cm/configCM/n9140 ), .A0(\cm/configCM/n8002 ), 
    .M1(UART_out_CM_data_1), .M0(UART_out_CM_data_0), 
    .CE(\cm/configCM/clk_c_enable_69 ), .CLK(clk_c), 
    .F0(\cm/configCM/clk_c_enable_33 ), .Q0(\cm/configCM/RXD_Data_reg_8 ), 
    .F1(\cm/configCM/n8470 ), .Q1(\cm/configCM/RXD_Data_reg_9 ));
  cm_SLICE_596 \cm/SLICE_596 ( .D1(\cm/configCM/RXD_Data_reg_13 ), 
    .A1(\cm/configCM/RXD_Data_reg_11 ), .D0(\cm/configCM/RXD_Data_reg_15 ), 
    .C0(\cm/configCM/n9158 ), .B0(\cm/configCM/n9138 ), 
    .A0(\cm/configCM/n9146 ), .M1(\cm/c_data_7 ), .M0(\cm/c_data_6 ), 
    .CE(\cm/assignCM/clk_c_enable_117 ), .CLK(clk_c), .F0(\cm/configCM/n8468 ), 
    .Q0(\cm/assignCM/Right_UP_reg_6 ), .F1(\cm/configCM/n9158 ), 
    .Q1(\cm/assignCM/Right_UP_reg_7 ));
  cm_configCM_SLICE_597 \cm/configCM/SLICE_597 ( .D1(\cm/configCM/n8986 ), 
    .C1(\cm/configCM/n9126 ), .B1(\cm/configCM/n3525 ), 
    .A1(\cm/configCM/RXD_Data_reg_11 ), .D0(\cm/configCM/n9158 ), 
    .C0(\cm/configCM/n9389 ), .B0(\cm/configCM/RXD_Data_reg_14 ), 
    .A0(\cm/configCM/RXD_Data_reg_15 ), .M1(UART_out_CM_data_1), 
    .M0(UART_out_CM_data_0), .CE(\cm/configCM/clk_c_enable_220 ), 
    .LSR(\cm/configCM/clk_c_enable_69 ), .CLK(clk_c), .F0(\cm/configCM/n9126 ), 
    .Q0(\cm/configCM/RXD_Data_reg_0 ), .F1(\cm/configCM/n53 ), 
    .Q1(\cm/configCM/RXD_Data_reg_1 ));
  cm_SLICE_598 \cm/SLICE_598 ( .D1(\cm/configCM/n1618 ), 
    .C1(\cm/configCM/n5_adj_1101 ), .B1(\cm/configCM/n22_adj_1102 ), 
    .A1(\cm/configCM/RXD_Data_reg_14 ), .D0(\cm/configCM/n9159 ), 
    .C0(\cm/configCM/n9110 ), .B0(\cm/configCM/RXD_Data_reg_15 ), 
    .A0(\cm/configCM/State_reg_0 ), .M1(\cm/c_data_9 ), .M0(\cm/c_data_8 ), 
    .CE(\cm/assignCM/clk_c_enable_117 ), .CLK(clk_c), 
    .F0(\cm/configCM/clk_c_enable_49 ), .Q0(\cm/assignCM/Right_UP_reg_8 ), 
    .F1(\cm/configCM/n9110 ), .Q1(\cm/assignCM/Right_UP_reg_9 ));
  cm_configCM_SLICE_599 \cm/configCM/SLICE_599 ( 
    .D1(\cm/configCM/State_reg_1 ), .C1(\cm/configCM/State_reg_2 ), 
    .D0(\cm/configCM/n9127 ), .C0(\cm/configCM/n9159 ), .B0(\cm/configCM/n53 ), 
    .A0(\cm/configCM/State_reg_0 ), .M1(UART_out_CM_data_3), 
    .M0(UART_out_CM_data_2), .CE(\cm/configCM/clk_c_enable_69 ), .CLK(clk_c), 
    .F0(\cm/configCM/clk_c_enable_34 ), .Q0(\cm/configCM/RXD_Data_reg_10 ), 
    .F1(\cm/configCM/n9159 ), .Q1(\cm/configCM/RXD_Data_reg_11 ));
  cm_configCM_SLICE_600 \cm/configCM/SLICE_600 ( 
    .D1(\cm/configCM/RXD_Data_reg_9 ), .B1(c_data_1), 
    .A1(\cm/configCM/RXD_Data_reg_8 ), .D0(\cm/configCM/RXD_Data_reg_11 ), 
    .C0(\cm/configCM/n9171 ), .B0(\cm/configCM/RXD_Data_reg_13 ), 
    .A0(\cm/configCM/n8513 ), .M1(\cm/configCM/RXD_Data_reg_4 ), 
    .M0(\cm/configCM/RXD_Data_reg_3 ), .CE(\cm/configCM/clk_c_enable_60 ), 
    .CLK(clk_c), .F0(\cm/configCM/n20 ), .Q0(\cm/c_data_3 ), 
    .F1(\cm/configCM/n9171 ), .Q1(\cm/c_data_4 ));
  cm_configCM_SLICE_601 \cm/configCM/SLICE_601 ( 
    .D1(\cm/configCM/RXD_Data_reg_11 ), .C1(\cm/configCM/n8496 ), 
    .B1(\cm/configCM/n9165 ), .A1(c_data_0), 
    .D0(\cm/configCM/RXD_Data_reg_14 ), .C0(\cm/configCM/RXD_Data_reg_9 ), 
    .B0(\cm/configCM/RXD_Data_reg_12 ), .A0(\cm/configCM/RXD_Data_reg_13 ), 
    .F0(\cm/configCM/n8496 ), .F1(\cm/configCM/n8541 ));
  cm_SLICE_602 \cm/SLICE_602 ( .D1(\cm/configCM/RXD_Data_reg_9 ), 
    .B1(\cm/configCM/RXD_Data_reg_8 ), .D0(\cm/configCM/n9170 ), 
    .C0(\cm/configCM/n3200 ), .B0(\cm/configCM/n9146 ), 
    .A0(\cm/configCM/RXD_Data_reg_13 ), 
    .M0(\cm/assignCM/VGA_Notification_nxt_3_N_889_1 ), 
    .CE(\cm/assignCM/clk_c_enable_157 ), .CLK(clk_c), .F0(\cm/configCM/n3937 ), 
    .Q0(VGA_Notification_1), .F1(\cm/configCM/n3200 ));
  cm_configCM_SLICE_603 \cm/configCM/SLICE_603 ( 
    .C1(\cm/configCM/RXD_Data_reg_12 ), .B1(\cm/configCM/RXD_Data_reg_9 ), 
    .D0(\cm/configCM/RXD_Data_reg_11 ), .C0(\cm/configCM/n9165 ), 
    .B0(\cm/configCM/n3920 ), .A0(\cm/configCM/RXD_Data_reg_8 ), 
    .M1(\cm/configCM/RXD_Data_reg_8 ), .M0(\cm/configCM/RXD_Data_reg_7 ), 
    .CE(\cm/configCM/clk_c_enable_60 ), .CLK(clk_c), .F0(\cm/configCM/n3921 ), 
    .Q0(\cm/c_data_7 ), .F1(\cm/configCM/n9165 ), .Q1(\cm/c_data_8 ));
  SLICE_604 SLICE_604( .D1(c_valid), .C1(c_addr_0), 
    .B1(\cd/CLOCK_DIVIDER_CONFIG/n9164 ), .A1(c_addr_1), 
    .D0(button_signal_DEBUG_VGA), .C0(n9125), .B0(\cm/c_data_12 ), 
    .A0(\cm/c_data_13 ), .M1(c_data_1), .M0(c_data_0), 
    .CE(\cm/assignCM/clk_c_enable_128 ), .CLK(clk_c), 
    .F0(\cm/assignCM/clk_c_enable_106 ), .Q0(\cm/assignCM/Left_DOWN_reg_0 ), 
    .F1(n9125), .Q1(\cm/assignCM/Left_DOWN_reg_1 ));
  cm_assignCM_SLICE_605 \cm/assignCM/SLICE_605 ( .D1(\cm/Counter_X_Valid ), 
    .B1(\cm/Counter_Y_Valid ), .A1(button_signal_DEBUG_VGA), 
    .D0(\cm/assignCM/VGA_Notification_nxt_3_N_889_1 ), 
    .C0(\cm/assignCM/n8492 ), .B0(\cm/assignCM/n8486 ), 
    .A0(\cm/assignCM/n521 ), .M1(\cm/c_data_5 ), .M0(\cm/c_data_4 ), 
    .CE(\cm/assignCM/clk_c_enable_128 ), .CLK(clk_c), .F0(\cm/assignCM/n1329 ), 
    .Q0(\cm/assignCM/Left_DOWN_reg_4 ), .F1(\cm/assignCM/n8492 ), 
    .Q1(\cm/assignCM/Left_DOWN_reg_5 ));
  cm_assignCM_SLICE_606 \cm/assignCM/SLICE_606 ( 
    .D1(\cm/assignCM/Right_DOWN_reg_3 ), .C1(\cm/assignCM/clk_c_enable_151 ), 
    .B1(\cm/assignCM/n523 ), .A1(button_signal_DEBUG_VGA), 
    .D0(\cm/Counter_X_Valid ), .A0(\cm/Counter_Y_Valid ), .M1(c_data_1), 
    .M0(c_data_0), .CE(\cm/assignCM/clk_c_enable_139 ), .CLK(clk_c), 
    .F0(\cm/assignCM/clk_c_enable_151 ), .Q0(\cm/assignCM/Left_UP_reg_0 ), 
    .F1(\cm/assignCM/n1241 ), .Q1(\cm/assignCM/Left_UP_reg_1 ));
  SLICE_607 SLICE_607( .D1(c_addr_2), .B1(c_addr_3), .A1(c_valid), 
    .D0(Current_Qudran_Config_nxt_1__N_886), .C0(n9148), .B0(n8448), 
    .A0(button_signal_DEBUG_VGA), .M1(\cm/c_data_3 ), .M0(c_data_2), 
    .CE(\cm/assignCM/clk_c_enable_139 ), .CLK(clk_c), 
    .F0(\cm/assignCM/clk_c_enable_95 ), .Q0(\cm/assignCM/Left_UP_reg_2 ), 
    .F1(n9148), .Q1(\cm/assignCM/Left_UP_reg_3 ));
  SLICE_608 SLICE_608( .D1(c_valid), .C1(Current_Qudran_Config_nxt_1__N_886), 
    .B1(\cd/CLOCK_DIVIDER_CONFIG/n9164 ), .A1(n8448), .D0(button_signal_HS), 
    .B0(button_signal_VS), .M0(V_FrontPorch_nxt_9_N_804_3), 
    .CE(clk_c_enable_93), .CLK(clk_c), .F0(Current_Qudran_Config_nxt_1__N_886), 
    .Q0(\cm/H_BackPorch_3 ), .F1(n3408));
  SLICE_609 SLICE_609( .D1(c_addr_2), .C1(c_addr_3), .B1(c_addr_1), 
    .A1(c_addr_0), .D0(n9112), .C0(\cd/CLOCK_DIVIDER_CONFIG/n9142 ), 
    .B0(\cd/CLOCK_DIVIDER_CONFIG/n9130 ), .A0(c_data_1_derived_1), 
    .CE(clk_LM_enable_2), .CLK(clk_LM), 
    .F0(\cd/CLOCK_DIVIDER_CONFIG/clk_c_enable_158 ), .Q0(UART_error_empty), 
    .F1(\cd/CLOCK_DIVIDER_CONFIG/n9142 ));
  cm_configCM_SLICE_610 \cm/configCM/SLICE_610 ( 
    .D1(\cm/configCM/RXD_Data_reg_12 ), .C1(\cm/configCM/RXD_Data_reg_13 ), 
    .B1(\cm/configCM/RXD_Data_reg_14 ), .A1(\cm/configCM/RXD_Data_reg_11 ), 
    .D0(\cm/configCM/RXD_Data_reg_12 ), .C0(\cm/configCM/RXD_Data_reg_13 ), 
    .B0(\cm/configCM/RXD_Data_reg_14 ), .A0(\cm/configCM/RXD_Data_reg_11 ), 
    .M1(\cm/configCM/RXD_Data_reg_6 ), .M0(\cm/configCM/RXD_Data_reg_5 ), 
    .CE(\cm/configCM/clk_c_enable_60 ), .CLK(clk_c), .F0(\cm/configCM/n9 ), 
    .Q0(\cm/c_data_5 ), .F1(\cm/configCM/n9129 ), .Q1(\cm/c_data_6 ));
  cm_configCM_SLICE_611 \cm/configCM/SLICE_611 ( .D1(\cm/configCM/n9170 ), 
    .C1(\cm/configCM/n9146 ), .B1(\cm/configCM/n3200 ), 
    .A1(\cm/configCM/RXD_Data_reg_13 ), .D0(\cm/configCM/n9170 ), 
    .C0(\cm/configCM/n9146 ), .B0(\cm/configCM/n3200 ), 
    .A0(\cm/configCM/RXD_Data_reg_13 ), .F0(\cm/configCM/n8986 ), 
    .F1(\cm/configCM/n3920 ));
  cm_assignCM_SLICE_612 \cm/assignCM/SLICE_612 ( .D1(n9125), 
    .C1(\cm/c_data_13 ), .B1(\cm/c_data_12 ), .A1(button_signal_DEBUG_VGA), 
    .D0(n9125), .C0(\cm/c_data_13 ), .B0(\cm/c_data_12 ), 
    .A0(button_signal_DEBUG_VGA), .M1(\cm/c_data_11 ), .M0(\cm/c_data_10 ), 
    .CE(\cm/assignCM/clk_c_enable_139 ), .CLK(clk_c), 
    .F0(\cm/assignCM/clk_c_enable_139 ), .Q0(\cm/assignCM/Left_UP_reg_10 ), 
    .F1(\cm/assignCM/clk_c_enable_117 ), .Q1(\cm/assignCM/Left_UP_reg_11 ));
  uart_UART_STATE_SLICE_613 \uart/UART_STATE/SLICE_613 ( .D1(paritybit), 
    .C1(stop_iteration_step_reg_1), .B1(stop_iteration_step_reg_0), 
    .D0(paritybit), .C0(stop_iteration_step_reg_1), 
    .B0(stop_iteration_step_reg_0), .F0(\uart/UART_STATE/n6 ), .F1(n9150));
  SLICE_614 SLICE_614( .D1(c_addr_2), .C1(c_valid), .B1(c_addr_3), .A1(n8448), 
    .D0(c_addr_2), .C0(c_valid), .B0(c_addr_3), .A0(Load_config), 
    .M1(\vga/config1/H_Count_Max_nxt_1 ), .M0(\vga/config1/H_Count_Max_nxt_0 ), 
    .CLK(clk_c), .F0(\vga/config1/Load_nxt_N_1044 ), .Q0(\vga/H_count_max_0 ), 
    .F1(clk_VGA_enable_1), .Q1(\vga/H_count_max_1 ));
  SLICE_615 SLICE_615( .D1(H_sync_pulse_3), .C1(Count_h_2), 
    .B1(H_sync_pulse_2), .A1(Count_h_3), .D0(H_sync_pulse_3), .B0(Count_h_2), 
    .A0(Count_h_3), .M1(\FIFO_UART_CM/w_data_reg_5 ), 
    .M0(\FIFO_UART_CM/w_data_reg_4 ), .CE(\FIFO_UART_CM/clk_c_enable_221 ), 
    .CLK(clk_c), .F0(n6), .Q0(UART_out_CM_data_4), .F1(n8553), 
    .Q1(UART_out_CM_data_5));
  SLICE_616 SLICE_616( .D1(Count_v_2), .C1(Count_v_3), .B1(V_sync_pulse_2), 
    .A1(V_sync_pulse_3), .D0(Count_v_2), .B0(V_sync_pulse_3), .A0(Count_v_3), 
    .M1(UART_out_3), .M0(UART_out_2), .CE(\FIFO_UART_CM/clk_c_enable_166 ), 
    .CLK(clk_c), .F0(n6_adj_1152), .Q0(\FIFO_UART_CM/w_data_reg_2 ), 
    .F1(n8593), .Q1(\FIFO_UART_CM/w_data_reg_3 ));
  cm_configCM_SLICE_617 \cm/configCM/SLICE_617 ( 
    .D1(\cm/configCM/RXD_Data_reg_14 ), .C1(\cm/configCM/n9138 ), 
    .B1(\cm/configCM/RXD_Data_reg_15 ), .A1(\cm/configCM/n9140 ), 
    .C0(\cm/configCM/RXD_Data_reg_14 ), .B0(\cm/configCM/RXD_Data_reg_15 ), 
    .A0(\cm/configCM/n9140 ), .M0(\cm/configCM/State_nxt_2 ), .CLK(clk_c), 
    .F0(\cm/configCM/n4942 ), .Q0(\cm/configCM/State_reg_2 ), 
    .F1(\cm/configCM/clk_c_enable_208 ));
  cm_SLICE_618 \cm/SLICE_618 ( .D1(\cm/configCM/State_reg_0 ), 
    .C1(\cm/configCM/State_reg_1 ), .B1(\cm/configCM/State_reg_2 ), 
    .A1(\cm/configCM/RXD_Data_reg_15 ), .D0(\cm/configCM/n9138 ), 
    .C0(\cm/configCM/State_reg_1 ), .B0(\cm/configCM/State_reg_2 ), 
    .A0(\cm/configCM/RXD_Data_reg_15 ), .M0(H_Left_Margin_nxt_8__N_959), 
    .CE(clk_c_enable_93), .CLK(clk_c), .F0(\cm/configCM/n4 ), 
    .Q0(\cm/V_BackPorch_1 ), .F1(\cm/configCM/n9128 ));
  cm_configCM_SLICE_619 \cm/configCM/SLICE_619 ( 
    .D1(\cm/configCM/State_reg_2 ), .B1(UART_out_CM_data_empty), 
    .A1(\cm/configCM/State_reg_1 ), .D0(\cm/configCM/State_reg_0 ), 
    .C0(\cm/configCM/State_reg_2 ), .B0(UART_out_CM_data_empty), 
    .A0(\cm/configCM/State_reg_1 ), .F0(\cm/configCM/clk_c_enable_69 ), 
    .F1(\cm/configCM/clk_c_enable_220 ));
  cm_SLICE_620 \cm/SLICE_620 ( .D1(\cm/configCM/RXD_Data_reg_10 ), 
    .C1(\cm/configCM/n9158 ), .B1(\cm/configCM/RXD_Data_reg_12 ), 
    .A1(\cm/configCM/RXD_Data_reg_9 ), .D0(\cm/configCM/RXD_Data_reg_10 ), 
    .C0(\cm/configCM/RXD_Data_reg_12 ), .A0(\cm/configCM/RXD_Data_reg_9 ), 
    .M1(\cm/assignCM/VGA_Notification_nxt_3_N_889_1 ), 
    .M0(\cm/assignCM/Current_Qudran_Config_reg_0 ), 
    .CE(\cm/assignCM/clk_c_enable_95 ), .CLK(clk_c), .F0(\cm/configCM/n3693 ), 
    .Q0(\cm/assignCM/Previous_Qudran_Config_reg_0 ), 
    .F1(\cm/configCM/n22_adj_1102 ), 
    .Q1(\cm/assignCM/Previous_Qudran_Config_reg_1 ));
  cm_assignCM_SLICE_621 \cm/assignCM/SLICE_621 ( 
    .D1(\cm/assignCM/clk_c_enable_151 ), .C1(\cm/assignCM/Right_DOWN_reg_11 ), 
    .B1(button_signal_DEBUG_VGA), .A1(\cm/assignCM/n521 ), 
    .D0(button_signal_DEBUG_VGA), .C0(\cm/assignCM/clk_c_enable_151 ), 
    .B0(\cm/assignCM/n523 ), .A0(\cm/assignCM/n521 ), .M1(\cm/c_data_11 ), 
    .M0(\cm/c_data_10 ), .CE(\cm/assignCM/clk_c_enable_128 ), .CLK(clk_c), 
    .F0(\cm/assignCM/n5 ), .Q0(\cm/assignCM/Left_DOWN_reg_10 ), 
    .F1(\cm/assignCM/n9 ), .Q1(\cm/assignCM/Left_DOWN_reg_11 ));
  SLICE_622 SLICE_622( .D1(Count_v_1), .C1(Count_v_0), .B1(V_sync_pulse_1), 
    .A1(V_sync_pulse_0), .D0(V_left_margin_1), .C0(Count_v_0), .B0(Count_v_1), 
    .A0(V_left_margin_0), .M1(UART_out_5), .M0(UART_out_4), 
    .CE(\FIFO_UART_CM/clk_c_enable_166 ), .CLK(clk_c), .F0(n4_adj_1147), 
    .Q0(\FIFO_UART_CM/w_data_reg_4 ), .F1(n4_adj_1151), 
    .Q1(\FIFO_UART_CM/w_data_reg_5 ));
  SLICE_623 SLICE_623( .D1(clk_DB), .C1(btnVS_c), 
    .B1(counter_31__N_85_adj_1141), .A1(button_ff), .D0(btnHS_c), 
    .C0(button_ff_adj_1146), .B0(counter_31__N_85_adj_1141), .A0(clk_DB), 
    .F0(n4194), .F1(n4204));
  SLICE_624 SLICE_624( .D1(clk_DB), .C1(counter_31__N_85_adj_1141), 
    .B1(button_ff_adj_1142), .A1(btnUART_c), .D0(counter_31__N_85_adj_1141), 
    .C0(btnVGA_c), .B0(clk_DB), .A0(button_ff_adj_1143), .F0(n4202), 
    .F1(n4203));
  SLICE_625 SLICE_625( .D1(clk_LM), .C1(\FIFO_UART_info/w_empty_reg ), 
    .B1(counter_31__N_85_adj_1140), .A1(\FIFO_UART_info/n9167 ), .D0(clk_LM), 
    .C0(VGA_error_empty), .B0(counter_31__N_85_adj_1140), 
    .M0(button_ff_adj_1142), .CE(\db/DB_DF_UART/clk_DB_enable_4 ), 
    .CLK(clk_DB), .F0(n2266), .Q0(button_signal_DEBUG_UART), 
    .F1(\FIFO_UART_info/clk_c_enable_186 ));
  SLICE_626 SLICE_626( .D1(counter_31__N_85_adj_1140), 
    .C1(\FIFO_CM_error/n9162 ), .B1(\FIFO_CM_error/w_empty_reg ), .A1(clk_LM), 
    .D0(counter_31__N_85_adj_1140), .C0(clk_LM), .A0(UART_error_empty), 
    .M1(btnVGA_c), .M0(btnUART_c), .CLK(clk_DB), .F0(n2262), 
    .Q0(button_ff_adj_1142), .F1(\FIFO_CM_error/clk_c_enable_170 ), 
    .Q1(button_ff_adj_1143));
  SLICE_627 SLICE_627( .D1(w_empty_reg), .C1(counter_31__N_85_adj_1140), 
    .B1(clk_LM), .A1(UART_valid_error), .D0(clk_LM), 
    .C0(counter_31__N_85_adj_1140), .B0(UART_info_empty), 
    .M0(button_ff_adj_1143), .CE(\db/DB_DF_VGA/clk_DB_enable_2 ), .CLK(clk_DB), 
    .F0(n2268), .Q0(button_signal_DEBUG_VGA), .F1(clk_c_enable_176));
  SLICE_628 SLICE_628( .D1(UART_valid_out), .C1(button_signal_DEBUG_UART), 
    .A1(\FIFO_UART_info/w_empty_reg ), .D0(button_signal_DEBUG_UART), 
    .B0(\FIFO_UART_CM/w_empty_reg ), .A0(UART_valid_out), 
    .M1(\FIFO_CM_error/w_data_reg_1 ), .M0(\FIFO_CM_error/w_data_reg_0 ), 
    .CE(\FIFO_CM_error/clk_c_enable_170 ), .CLK(clk_c), 
    .F0(\FIFO_UART_CM/clk_LM_enable_3 ), .Q0(VGA_error_data_0), 
    .F1(\FIFO_UART_info/clk_LM_enable_1 ), .Q1(VGA_error_data_1));
  SLICE_629 SLICE_629( .D1(Count_v_3), .B1(V_left_margin_3), .A1(Count_v_2), 
    .D0(Count_v_3), .B0(V_left_margin_3), .M1(UART_out_7), .M0(UART_out_6), 
    .CE(\FIFO_UART_CM/clk_c_enable_166 ), .CLK(clk_c), .F0(n9176), 
    .Q0(\FIFO_UART_CM/w_data_reg_6 ), .F1(n6_adj_1148), 
    .Q1(\FIFO_UART_CM/w_data_reg_7 ));
  SLICE_630 SLICE_630( .D1(H_sync_pulse_6), .C1(H_sync_pulse_5), 
    .B1(Count_h_5), .A1(Count_h_6), .D0(Count_h_5), .C0(H_sync_pulse_5), 
    .M1(\FIFO_UART_CM/w_data_reg_1 ), .M0(\FIFO_UART_CM/w_data_reg_0 ), 
    .CE(\FIFO_UART_CM/clk_c_enable_221 ), .CLK(clk_c), .F0(n9178), 
    .Q0(UART_out_CM_data_0), .F1(n8564), .Q1(UART_out_CM_data_1));
  SLICE_631 SLICE_631( .D1(H_sync_pulse_7), .C1(n8702), .A1(Count_h_7), 
    .D0(H_sync_pulse_7), .C0(Count_h_7), .M1(\FIFO_UART_CM/w_data_reg_3 ), 
    .M0(\FIFO_UART_CM/w_data_reg_2 ), .CE(\FIFO_UART_CM/clk_c_enable_221 ), 
    .CLK(clk_c), .F0(n9180), .Q0(UART_out_CM_data_2), .F1(n8567), 
    .Q1(UART_out_CM_data_3));
  SLICE_632 SLICE_632( .D1(Count_v_5), .C1(V_sync_pulse_6), .B1(Count_v_6), 
    .A1(V_sync_pulse_5), .D0(Count_v_5), .A0(V_sync_pulse_5), 
    .CE(\FIFO_UART_CM/clk_LM_enable_3 ), .CLK(clk_LM), .F0(n9184), 
    .Q0(UART_out_CM_data_empty), .F1(n8604));
  SLICE_633 SLICE_633( .C1(n8746), .B1(Count_v_7), .A1(V_sync_pulse_7), 
    .C0(V_sync_pulse_7), .B0(Count_v_7), .M1(UART_out_1), .M0(UART_out_0), 
    .CE(\FIFO_UART_CM/clk_c_enable_166 ), .CLK(clk_c), .F0(n9186), 
    .Q0(\FIFO_UART_CM/w_data_reg_0 ), .F1(n8607), 
    .Q1(\FIFO_UART_CM/w_data_reg_1 ));
  cm_configCM_SLICE_634 \cm/configCM/SLICE_634 ( 
    .C1(\cm/configCM/RXD_Data_reg_13 ), .B1(\cm/configCM/RXD_Data_reg_11 ), 
    .D0(\cm/configCM/n9170 ), .C0(\cm/configCM/RXD_Data_reg_13 ), 
    .B0(\cm/configCM/n9146 ), .A0(\cm/configCM/RXD_Data_reg_11 ), 
    .M1(\cm/configCM/RXD_Data_reg_11 ), .M0(\cm/configCM/RXD_Data_reg_10 ), 
    .CE(\cm/configCM/clk_c_enable_60 ), .CLK(clk_c), .F0(\cm/configCM/n22 ), 
    .Q0(\cm/c_data_10 ), .F1(\cm/configCM/n5_adj_1101 ), .Q1(\cm/c_data_11 ));
  cm_SLICE_635 \cm/SLICE_635 ( .B1(\cm/configCM/State_reg_0 ), 
    .A1(\cm/configCM/State_reg_1 ), .B0(\cm/configCM/State_reg_0 ), 
    .A0(\cm/configCM/State_reg_1 ), .M1(\cm/c_data_5 ), .M0(\cm/c_data_4 ), 
    .CE(\cm/assignCM/clk_c_enable_117 ), .CLK(clk_c), .F0(\cm/configCM/n39 ), 
    .Q0(\cm/assignCM/Right_UP_reg_4 ), .F1(\cm/configCM/State_nxt_2__N_488 ), 
    .Q1(\cm/assignCM/Right_UP_reg_5 ));
  cm_assignCM_SLICE_636 \cm/assignCM/SLICE_636 ( 
    .D1(\cm/assignCM/clk_c_enable_151 ), .C1(\cm/assignCM/Right_DOWN_reg_0 ), 
    .B1(\cm/assignCM/n523 ), .A1(button_signal_DEBUG_VGA), 
    .D0(button_signal_DEBUG_VGA), .C0(\cm/assignCM/clk_c_enable_151 ), 
    .B0(\cm/assignCM/n521 ), .A0(\cm/assignCM/Right_DOWN_reg_7 ), 
    .M1(\cm/c_data_3 ), .M0(c_data_2), .CE(\cm/assignCM/clk_c_enable_128 ), 
    .CLK(clk_c), .F0(\cm/assignCM/n16 ), .Q0(\cm/assignCM/Left_DOWN_reg_2 ), 
    .F1(\cm/assignCM/n1244 ), .Q1(\cm/assignCM/Left_DOWN_reg_3 ));
  SLICE_637 SLICE_637( .D1(c_data_0), 
    .C1(\cd/CLOCK_DIVIDER_CONFIG/clk_c_enable_219 ), .D0(c_data_0), 
    .C0(\cd/CLOCK_DIVIDER_CONFIG/clk_c_enable_219 ), 
    .M1(\FIFO_UART_error/w_data_reg_1 ), .M0(\FIFO_UART_error/w_data_reg_0 ), 
    .CE(clk_c_enable_176), .CLK(clk_c), .F0(\cd/CLOCK_DIVIDER_CONFIG/n4223 ), 
    .Q0(UART_error_data_0), .F1(\cd/CLOCK_DIVIDER_CONFIG/n4225 ), 
    .Q1(UART_error_data_1));
  vga_assgncolor_SLICE_638 \vga/assgncolor/SLICE_638 ( 
    .D1(\vga/assgncolor/Active_reg ), .B1(Data_VGA_0), 
    .B0(\vga/assgncolor/Active_reg ), .A0(Data_VGA_10), .F0(BLUE_c_2), 
    .F1(RED_c_0));
  vga_assgncolor_SLICE_639 \vga/assgncolor/SLICE_639 ( 
    .D1(\vga/assgncolor/Active_reg ), .B1(Data_VGA_7), 
    .D0(\vga/assgncolor/Active_reg ), .B0(Data_VGA_1), .F0(RED_c_1), 
    .F1(GREEN_c_3));
  vga_assgncolor_SLICE_640 \vga/assgncolor/SLICE_640 ( .C1(Data_VGA_6), 
    .B1(\vga/assgncolor/Active_reg ), .C0(Data_VGA_9), 
    .B0(\vga/assgncolor/Active_reg ), .F0(BLUE_c_1), .F1(GREEN_c_2));
  vga_assgncolor_SLICE_641 \vga/assgncolor/SLICE_641 ( .D1(Data_VGA_5), 
    .B1(\vga/assgncolor/Active_reg ), .B0(\vga/assgncolor/Active_reg ), 
    .A0(Data_VGA_8), .F0(BLUE_c_0), .F1(GREEN_c_1));
  vga_assgncolor_SLICE_642 \vga/assgncolor/SLICE_642 ( .C1(Data_VGA_4), 
    .A1(\vga/assgncolor/Active_reg ), .D0(Data_VGA_2), 
    .A0(\vga/assgncolor/Active_reg ), .F0(RED_c_2), .F1(GREEN_c_0));
  vga_assgncolor_SLICE_643 \vga/assgncolor/SLICE_643 ( .C1(Data_VGA_11), 
    .B1(\vga/assgncolor/Active_reg ), .C0(Data_VGA_3), 
    .B0(\vga/assgncolor/Active_reg ), .F0(RED_c_3), .F1(BLUE_c_3));
  SLICE_644 SLICE_644( .C1(rst_n_c), .B1(button_signal_DEBUG_UART), 
    .A1(leds_UART_info_7), .C0(\lm/leds_UART_info_0 ), 
    .B0(button_signal_DEBUG_UART), .A0(\lm/leds_CM_error_0 ), 
    .M1(VGA_error_data_1), .M0(VGA_error_data_0), .CE(clk_c_enable_81), 
    .LSR(n2266), .CLK(clk_c), .F0(LEDS_c_0), .Q0(\lm/leds_CM_error_0 ), 
    .F1(LEDS_c_7), .Q1(\lm/leds_CM_error_1 ));
  lm_SLICE_645 \lm/SLICE_645 ( .B1(button_signal_DEBUG_UART), 
    .A1(\lm/leds_UART_info_6 ), .D0(\lm/leds_UART_info_1 ), 
    .C0(\lm/leds_CM_error_1 ), .B0(button_signal_DEBUG_UART), 
    .M1(VGA_error_data_3), .M0(VGA_error_data_2), .CE(clk_c_enable_81), 
    .LSR(n2266), .CLK(clk_c), .F0(LEDS_c_1), .Q0(\lm/leds_CM_error_2 ), 
    .F1(LEDS_c_6), .Q1(\lm/leds_CM_error_3 ));
  lm_SLICE_646 \lm/SLICE_646 ( .D1(\lm/leds_UART_error_1 ), 
    .C1(button_signal_DEBUG_UART), .B1(\lm/leds_UART_info_5 ), 
    .D0(\lm/leds_UART_info_2 ), .C0(button_signal_DEBUG_UART), 
    .B0(\lm/leds_CM_error_2 ), .M1(UART_error_data_1), .M0(UART_error_data_0), 
    .CE(clk_c_enable_81), .LSR(n2262), .CLK(clk_c), .F0(LEDS_c_2), 
    .Q0(\lm/leds_UART_error_0 ), .F1(LEDS_c_5), .Q1(\lm/leds_UART_error_1 ));
  lm_SLICE_647 \lm/SLICE_647 ( .D1(button_signal_DEBUG_UART), 
    .C1(\lm/leds_UART_info_4 ), .A1(\lm/leds_UART_error_0 ), 
    .D0(\lm/leds_UART_info_3 ), .C0(button_signal_DEBUG_UART), 
    .A0(\lm/leds_CM_error_3 ), .M1(UART_out_data_1), .M0(UART_out_data_0), 
    .CE(clk_c_enable_81), .LSR(n2268), .CLK(clk_c), .F0(LEDS_c_3), 
    .Q0(\lm/leds_UART_info_0 ), .F1(LEDS_c_4), .Q1(\lm/leds_UART_info_1 ));
  cm_configCM_SLICE_648 \cm/configCM/SLICE_648 ( .B1(rst_n_c), 
    .A1(Load_config), .C0(c_ready_1), .B0(rst_n_c), .F0(rst_n_N_350), 
    .F1(rst_n_N_1047));
  cm_configCM_SLICE_649 \cm/configCM/SLICE_649 ( .C1(rst_n_c), 
    .A1(c_UART_ready), .D0(c_VGA_ready), .C0(rst_n_c), .F0(rst_n_N_52), 
    .F1(rst_n_N_144));
  cm_configCM_SLICE_650 \cm/configCM/SLICE_650 ( 
    .D1(\cm/configCM/RXD_Data_reg_8 ), .B1(\cm/configCM/RXD_Data_reg_12 ), 
    .A1(\cm/configCM/RXD_Data_reg_9 ), .D0(\cm/configCM/n9170 ), 
    .C0(\cm/configCM/RXD_Data_reg_13 ), .B0(\cm/configCM/RXD_Data_reg_12 ), 
    .A0(\cm/configCM/RXD_Data_reg_14 ), .M0(\cm/configCM/RXD_Data_reg_9 ), 
    .CE(\cm/configCM/clk_c_enable_60 ), .CLK(clk_c), .F0(\cm/configCM/n3927 ), 
    .Q0(\cm/c_data_9 ), .F1(\cm/configCM/n1618 ));
  cm_assignCM_SLICE_651 \cm/assignCM/SLICE_651 ( .B1(\cm/assignCM/n521 ), 
    .A1(\cm/assignCM/n523 ), .D0(\cm/assignCM/n523 ), 
    .C0(\cm/assignCM/Current_Qudran_Config_reg_0 ), .M1(\cm/c_data_9 ), 
    .M0(\cm/c_data_8 ), .CE(\cm/assignCM/clk_c_enable_128 ), .CLK(clk_c), 
    .F0(\cm/assignCM/n8486 ), .Q0(\cm/assignCM/Left_DOWN_reg_8 ), 
    .F1(\cm/assignCM/n8634 ), .Q1(\cm/assignCM/Left_DOWN_reg_9 ));
  SLICE_652 SLICE_652( .D1(Config_Notification_0), .C1(Error_Valid), 
    .B1(Config_Error_0), .A1(Config_Notification_Valid), 
    .D0(\FIFO_CM_error/n9162 ), .A0(\FIFO_CM_error/w_empty_reg ), 
    .M1(\vga/config1/H_Count_Max_nxt_3 ), .M0(\vga/config1/H_Count_Max_nxt_2 ), 
    .CLK(clk_c), .F0(\FIFO_CM_error/clk_LM_enable_4 ), 
    .Q0(\vga/H_count_max_2 ), .F1(VGA_error_data_3_N_13_0), 
    .Q1(\vga/H_count_max_3 ));
  BLUE_3_ \BLUE[3]_I ( .PADDO(BLUE_c_3), .BLUE3(BLUE[3]));
  GREEN_0_ \GREEN[0]_I ( .PADDO(GREEN_c_0), .GREEN0(GREEN[0]));
  GREEN_1_ \GREEN[1]_I ( .PADDO(GREEN_c_1), .GREEN1(GREEN[1]));
  GREEN_2_ \GREEN[2]_I ( .PADDO(GREEN_c_2), .GREEN2(GREEN[2]));
  GREEN_3_ \GREEN[3]_I ( .PADDO(GREEN_c_3), .GREEN3(GREEN[3]));
  RED_0_ \RED[0]_I ( .PADDO(RED_c_0), .RED0(RED[0]));
  RED_1_ \RED[1]_I ( .PADDO(RED_c_1), .RED1(RED[1]));
  RED_2_ \RED[2]_I ( .PADDO(RED_c_2), .RED2(RED[2]));
  RED_3_ \RED[3]_I ( .PADDO(RED_c_3), .RED3(RED[3]));
  LEDS_0_ \LEDS[0]_I ( .PADDO(LEDS_c_0), .LEDS0(LEDS[0]));
  LEDS_1_ \LEDS[1]_I ( .PADDO(LEDS_c_1), .LEDS1(LEDS[1]));
  LEDS_2_ \LEDS[2]_I ( .PADDO(LEDS_c_2), .LEDS2(LEDS[2]));
  LEDS_3_ \LEDS[3]_I ( .PADDO(LEDS_c_3), .LEDS3(LEDS[3]));
  LEDS_4_ \LEDS[4]_I ( .PADDO(LEDS_c_4), .LEDS4(LEDS[4]));
  LEDS_5_ \LEDS[5]_I ( .PADDO(LEDS_c_5), .LEDS5(LEDS[5]));
  LEDS_6_ \LEDS[6]_I ( .PADDO(LEDS_c_6), .LEDS6(LEDS[6]));
  LEDS_7_ \LEDS[7]_I ( .PADDO(LEDS_c_7), .LEDS7(LEDS[7]));
  VSYNC VSYNC_I( .PADDO(VSYNC_c), .VSYNC(VSYNC));
  HSYNC HSYNC_I( .PADDO(HSYNC_c), .HSYNC(HSYNC));
  out out_I( .PADDO(VCC_net), .out(out));
  BLUE_2_ \BLUE[2]_I ( .PADDO(BLUE_c_2), .BLUE2(BLUE[2]));
  BLUE_1_ \BLUE[1]_I ( .PADDO(BLUE_c_1), .BLUE1(BLUE[1]));
  BLUE_0_ \BLUE[0]_I ( .PADDO(BLUE_c_0), .BLUE0(BLUE[0]));
  clk clk_I( .PADDI(clk_c), .clk(clk));
  rst_n rst_n_I( .PADDI(rst_n_c), .rst_n(rst_n));
  btnHS btnHS_I( .PADDI(btnHS_c), .btnHS(btnHS));
  btnVS btnVS_I( .PADDI(btnVS_c), .btnVS(btnVS));
  btnUART btnUART_I( .PADDI(btnUART_c), .btnUART(btnUART));
  btnVGA btnVGA_I( .PADDI(btnVGA_c), .btnVGA(btnVGA));
  in in_I( .PADDI(in_c), .in(in));
  GSR_INST GSR_INST( .GSRNET(rst_n_c));
  PUR PUR_INST( .PUR(VCC_net));
endmodule

module SLICE_0 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu2 sub_1047_add_2_9( .A0(A0), .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), 
    .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ccu2 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h3999;
  defparam inst1.INIT1 = 16'h3999;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module gnd ( output PWR0 );

  VLO INST1( .Z(PWR0));
endmodule

module SLICE_1 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20001 sub_1047_add_2_7( .A0(A0), .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), 
    .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ccu20001 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h5999;
  defparam inst1.INIT1 = 16'h3999;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module SLICE_2 ( input FCI, output F0 );
  wire   GNDI;

  ccu20002 sub_1029_add_2_cout( .A0(GNDI), .B0(GNDI), .C0(GNDI), .D0(GNDI), 
    .A1(GNDI), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), .S1(), 
    .CO1());
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (FCI => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module ccu20002 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h0000;
  defparam inst1.INIT1 = 16'h0000;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module SLICE_3 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20003 sub_1029_add_2_24( .A0(A0), .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), 
    .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ccu20003 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h3999;
  defparam inst1.INIT1 = 16'h5999;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module SLICE_4 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20004 sub_1029_add_2_22( .A0(A0), .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), 
    .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ccu20004 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h5999;
  defparam inst1.INIT1 = 16'h5999;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module SLICE_5 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20003 sub_1029_add_2_20( .A0(A0), .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), 
    .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICE_6 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20001 sub_1047_add_2_5( .A0(A0), .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), 
    .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICE_7 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20003 sub_1047_add_2_3( .A0(A0), .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), 
    .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICE_8 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu2 sub_1029_add_2_18( .A0(A0), .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), 
    .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICE_9 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20004 sub_1029_add_2_16( .A0(A0), .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), 
    .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICE_10 ( input B1, A1, B0, A0, M1, M0, CE, LSR, CLK, FCI, output Q0, 
    Q1, FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly, LSR_dly;

  vmuxregsre \lm/UART_info/leds_reg__i7 ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \lm/UART_info/leds_reg__i6 ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20003 sub_1029_add_2_14( .A0(A0), .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), 
    .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), .CO1(FCO));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module vmuxregsre ( input D0, D1, SD, SP, CK, LSR, output Q );

  FL1P3IY INST01( .D0(D0), .D1(D1), .SP(SP), .CK(CK), .SD(SD), .CD(LSR), .Q(Q));
  defparam INST01.GSR = "ENABLED";
endmodule

module vcc ( output PWR1 );

  VHI INST1( .Z(PWR1));
endmodule

module SLICE_11 ( input B1, A1, B0, A0, M1, M0, CE, LSR, CLK, FCI, output Q0, 
    Q1, FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly, LSR_dly;

  vmuxregsre \lm/UART_info/leds_reg__i5 ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \lm/UART_info/leds_reg__i4 ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20001 sub_1029_add_2_12( .A0(A0), .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), 
    .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), .CO1(FCO));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_12 ( input B1, A1, B0, A0, M1, M0, CE, LSR, CLK, FCI, output Q0, 
    Q1, FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly, LSR_dly;

  vmuxregsre \lm/UART_info/leds_reg__i3 ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \lm/UART_info/leds_reg__i2 ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20003 sub_1029_add_2_10( .A0(A0), .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), 
    .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), .CO1(FCO));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_13 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20001 sub_1029_add_2_8( .A0(A0), .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), 
    .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICE_14 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20003 sub_1029_add_2_6( .A0(A0), .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), 
    .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICE_15 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20004 sub_1029_add_2_4( .A0(A0), .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), 
    .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICE_16 ( input B1, A1, B0, output FCO );
  wire   GNDI;

  ccu20005 sub_1029_add_2_2( .A0(GNDI), .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), 
    .B1(B1), .C1(GNDI), .D1(GNDI), .CI(GNDI), .S0(), .S1(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ccu20005 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h3000;
  defparam inst1.INIT1 = 16'h5999;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module SLICE_17 ( input B1, A1, output FCO );
  wire   GNDI;

  ccu20006 sub_1047_add_2_1( .A0(GNDI), .B0(GNDI), .C0(GNDI), .D0(GNDI), 
    .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(GNDI), .S0(), .S1(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ccu20006 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h0000;
  defparam inst1.INIT1 = 16'h3999;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module SLICE_18 ( input FCI, output F0 );
  wire   GNDI;

  ccu20002 sub_1047_add_2_cout( .A0(GNDI), .B0(GNDI), .C0(GNDI), .D0(GNDI), 
    .A1(GNDI), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), .S1(), 
    .CO1());
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (FCI => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module vga_assgncolor_SLICE_19 ( input B0, FCI, output F1 );
  wire   GNDI;

  ccu20007 \vga/assgncolor/sub_1045_add_2_13 ( .A0(GNDI), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(GNDI), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), 
    .S1(F1), .CO1());
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B0 => F1) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
  endspecify

endmodule

module ccu20007 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'hF333;
  defparam inst1.INIT1 = 16'h0000;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module vga_assgncolor_SLICE_20 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu2 \vga/assgncolor/sub_1045_add_2_11 ( .A0(A0), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), 
    .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module vga_assgncolor_SLICE_21 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20003 \vga/assgncolor/sub_1045_add_2_9 ( .A0(A0), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), 
    .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module vga_assgncolor_SLICE_22 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20001 \vga/assgncolor/sub_1045_add_2_7 ( .A0(A0), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), 
    .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module vga_assgncolor_SLICE_23 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20001 \vga/assgncolor/sub_1045_add_2_5 ( .A0(A0), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), 
    .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module vga_assgncolor_SLICE_24 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20003 \vga/assgncolor/sub_1045_add_2_3 ( .A0(A0), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), 
    .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module vga_assgncolor_SLICE_25 ( input B1, A1, output FCO );
  wire   GNDI;

  ccu20006 \vga/assgncolor/sub_1045_add_2_1 ( .A0(GNDI), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(GNDI), .S0(), .S1(), 
    .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module vga_assgncolor_SLICE_26 ( input B0, FCI, output F1 );
  wire   GNDI;

  ccu20007 \vga/assgncolor/sub_1046_add_2_13 ( .A0(GNDI), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(GNDI), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), 
    .S1(F1), .CO1());
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B0 => F1) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
  endspecify

endmodule

module vga_assgncolor_SLICE_27 ( input A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20008 \vga/assgncolor/sub_1046_add_2_11 ( .A0(A0), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), 
    .S1(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ccu20008 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h5999;
  defparam inst1.INIT1 = 16'hf555;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module vga_assgncolor_SLICE_28 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu2 \vga/assgncolor/sub_1046_add_2_9 ( .A0(A0), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), 
    .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module vga_assgncolor_SLICE_29 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu2 \vga/assgncolor/sub_1046_add_2_7 ( .A0(A0), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), 
    .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module vga_assgncolor_SLICE_30 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20003 \vga/assgncolor/sub_1046_add_2_5 ( .A0(A0), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), 
    .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module vga_assgncolor_SLICE_31 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20004 \vga/assgncolor/sub_1046_add_2_3 ( .A0(A0), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), 
    .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module vga_assgncolor_SLICE_32 ( input B1, A1, output FCO );
  wire   GNDI;

  ccu20006 \vga/assgncolor/sub_1046_add_2_1 ( .A0(GNDI), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(GNDI), .S0(), .S1(), 
    .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module vga_CounterV_SLICE_33 ( input A0, FCI, output F0 );
  wire   GNDI;

  ccu20009 \vga/CounterV/Count_reg_1275_add_4_13 ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(GNDI), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(F0), .S1(), .CO1());
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A0 => F0) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module ccu20009 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'hfaaa;
  defparam inst1.INIT1 = 16'h0000;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module vga_CounterV_SLICE_34 ( input B1, A0, FCI, output F0, F1, FCO );
  wire   GNDI;

  ccu20010 \vga/CounterV/Count_reg_1275_add_4_11 ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(GNDI), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(F0), .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ccu20010 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'hFAAA;
  defparam inst1.INIT1 = 16'hFCCC;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module vga_CounterV_SLICE_35 ( input A1, B0, FCI, output F0, F1, FCO );
  wire   GNDI;

  ccu20011 \vga/CounterV/Count_reg_1275_add_4_9 ( .A0(GNDI), .B0(B0), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(F0), .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ccu20011 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'hFCCC;
  defparam inst1.INIT1 = 16'hFAAA;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module vga_CounterV_SLICE_36 ( input A1, A0, FCI, output F0, F1, FCO );
  wire   GNDI;

  ccu20012 \vga/CounterV/Count_reg_1275_add_4_7 ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(F0), .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ccu20012 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'hfaaa;
  defparam inst1.INIT1 = 16'hfaaa;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module vga_CounterV_SLICE_37 ( input B1, B0, FCI, output F0, F1, FCO );
  wire   GNDI;

  ccu20013 \vga/CounterV/Count_reg_1275_add_4_5 ( .A0(GNDI), .B0(B0), 
    .C0(GNDI), .D0(GNDI), .A1(GNDI), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(F0), .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ccu20013 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'hFCCC;
  defparam inst1.INIT1 = 16'hFCCC;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module vga_CounterV_SLICE_38 ( input B1, B0, FCI, output F0, F1, FCO );
  wire   GNDI;

  ccu20013 \vga/CounterV/Count_reg_1275_add_4_3 ( .A0(GNDI), .B0(B0), 
    .C0(GNDI), .D0(GNDI), .A1(GNDI), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(F0), .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module vga_CounterV_SLICE_39 ( input A1, output F1, FCO );
  wire   GNDI;

  ccu20014 \vga/CounterV/Count_reg_1275_add_4_1 ( .A0(GNDI), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(GNDI), 
    .S0(), .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ccu20014 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'hF000;
  defparam inst1.INIT1 = 16'h0555;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module vga_CounterV_SLICE_40 ( input B0, A0, FCI, output F1 );
  wire   GNDI;

  ccu20015 \vga/CounterV/sub_1043_add_2_13 ( .A0(A0), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(GNDI), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), 
    .S1(F1), .CO1());
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B0 => F1) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
  endspecify

endmodule

module ccu20015 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h5999;
  defparam inst1.INIT1 = 16'h0000;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module vga_CounterV_SLICE_41 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu2 \vga/CounterV/sub_1043_add_2_11 ( .A0(A0), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), 
    .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module vga_CounterV_SLICE_42 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20001 \vga/CounterV/sub_1043_add_2_9 ( .A0(A0), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), 
    .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module vga_CounterV_SLICE_43 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20001 \vga/CounterV/sub_1043_add_2_7 ( .A0(A0), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), 
    .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module vga_CounterV_SLICE_44 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu2 \vga/CounterV/sub_1043_add_2_5 ( .A0(A0), .B0(B0), .C0(GNDI), .D0(GNDI), 
    .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module vga_CounterV_SLICE_45 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20001 \vga/CounterV/sub_1043_add_2_3 ( .A0(A0), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), 
    .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module vga_CounterV_SLICE_46 ( input B1, A1, output FCO );
  wire   GNDI;

  ccu20006 \vga/CounterV/sub_1043_add_2_1 ( .A0(GNDI), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(GNDI), .S0(), .S1(), 
    .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module vga_CounterH_SLICE_47 ( input B0, FCI, output F0 );
  wire   GNDI;

  ccu20016 \vga/CounterH/Count_reg_1274_add_4_13 ( .A0(GNDI), .B0(B0), 
    .C0(GNDI), .D0(GNDI), .A1(GNDI), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(F0), .S1(), .CO1());
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B0 => F0) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module ccu20016 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'hFCCC;
  defparam inst1.INIT1 = 16'h0000;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module vga_CounterH_SLICE_48 ( input A1, B0, FCI, output F0, F1, FCO );
  wire   GNDI;

  ccu20011 \vga/CounterH/Count_reg_1274_add_4_11 ( .A0(GNDI), .B0(B0), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(F0), .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module vga_CounterH_SLICE_49 ( input A1, A0, FCI, output F0, F1, FCO );
  wire   GNDI;

  ccu20012 \vga/CounterH/Count_reg_1274_add_4_9 ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(F0), .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module vga_CounterH_SLICE_50 ( input B1, A0, FCI, output F0, F1, FCO );
  wire   GNDI;

  ccu20010 \vga/CounterH/Count_reg_1274_add_4_7 ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(GNDI), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(F0), .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module vga_CounterH_SLICE_51 ( input B1, A0, FCI, output F0, F1, FCO );
  wire   GNDI;

  ccu20010 \vga/CounterH/Count_reg_1274_add_4_5 ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(GNDI), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(F0), .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module vga_CounterH_SLICE_52 ( input A1, A0, FCI, output F0, F1, FCO );
  wire   GNDI;

  ccu20012 \vga/CounterH/Count_reg_1274_add_4_3 ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(F0), .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module vga_CounterH_SLICE_53 ( input B1, output F1, FCO );
  wire   GNDI;

  ccu20017 \vga/CounterH/Count_reg_1274_add_4_1 ( .A0(GNDI), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(GNDI), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(GNDI), 
    .S0(), .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ccu20017 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'hF000;
  defparam inst1.INIT1 = 16'h0333;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module vga_CounterH_SLICE_54 ( input B0, A0, FCI, output F1 );
  wire   GNDI;

  ccu20018 \vga/CounterH/sub_1041_add_2_13 ( .A0(A0), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(GNDI), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), 
    .S1(F1), .CO1());
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B0 => F1) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
  endspecify

endmodule

module ccu20018 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h3999;
  defparam inst1.INIT1 = 16'h0000;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module vga_CounterH_SLICE_55 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20003 \vga/CounterH/sub_1041_add_2_11 ( .A0(A0), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), 
    .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module vga_CounterH_SLICE_56 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20004 \vga/CounterH/sub_1041_add_2_9 ( .A0(A0), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), 
    .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module vga_CounterH_SLICE_57 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20003 \vga/CounterH/sub_1041_add_2_7 ( .A0(A0), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), 
    .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module vga_CounterH_SLICE_58 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20001 \vga/CounterH/sub_1041_add_2_5 ( .A0(A0), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), 
    .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module vga_CounterH_SLICE_59 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20001 \vga/CounterH/sub_1041_add_2_3 ( .A0(A0), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), 
    .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module vga_CounterH_SLICE_60 ( input B1, A1, output FCO );
  wire   GNDI;

  ccu20019 \vga/CounterH/sub_1041_add_2_1 ( .A0(GNDI), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(GNDI), .S0(), .S1(), 
    .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ccu20019 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h0000;
  defparam inst1.INIT1 = 16'h5999;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module cm_counterV_SLICE_61 ( input A0, DI0, LSR, CLK, FCI, output F0, Q0 );
  wire   VCCI, LSR_NOTIN, GNDI, DI0_dly, CLK_dly, LSR_dly;

  vmuxregsre \cm/counterV/Count_intern_reg_1271__i9 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_NOTIN), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));
  ccu20009 \cm/counterV/Count_intern_reg_1271_add_4_11 ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(GNDI), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(F0), .S1(), .CO1());
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module inverter ( input I, output Z );

  INV INST1( .A(I), .Z(Z));
endmodule

module cm_counterV_SLICE_62 ( input A1, A0, DI1, DI0, LSR, CLK, FCI, output F0, 
    Q0, F1, Q1, FCO );
  wire   VCCI, LSR_NOTIN, GNDI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre \cm/counterV/Count_intern_reg_1271__i8 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_NOTIN), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));
  vmuxregsre \cm/counterV/Count_intern_reg_1271__i7 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_NOTIN), .Q(Q0));
  ccu20012 \cm/counterV/Count_intern_reg_1271_add_4_9 ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(F0), .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module cm_counterV_SLICE_63 ( input A1, A0, DI1, DI0, LSR, CLK, FCI, output F0, 
    Q0, F1, Q1, FCO );
  wire   VCCI, LSR_NOTIN, GNDI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre \cm/counterV/Count_intern_reg_1271__i6 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_NOTIN), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));
  vmuxregsre \cm/counterV/Count_intern_reg_1271__i5 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_NOTIN), .Q(Q0));
  ccu20012 \cm/counterV/Count_intern_reg_1271_add_4_7 ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(F0), .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module cm_counterV_SLICE_64 ( input A1, A0, DI1, DI0, LSR, CLK, FCI, output F0, 
    Q0, F1, Q1, FCO );
  wire   VCCI, LSR_NOTIN, GNDI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre \cm/counterV/Count_intern_reg_1271__i4 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_NOTIN), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));
  vmuxregsre \cm/counterV/Count_intern_reg_1271__i3 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_NOTIN), .Q(Q0));
  ccu20012 \cm/counterV/Count_intern_reg_1271_add_4_5 ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(F0), .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module cm_counterV_SLICE_65 ( input A1, A0, DI1, DI0, LSR, CLK, FCI, output F0, 
    Q0, F1, Q1, FCO );
  wire   VCCI, LSR_NOTIN, GNDI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre \cm/counterV/Count_intern_reg_1271__i2 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_NOTIN), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));
  vmuxregsre \cm/counterV/Count_intern_reg_1271__i1 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_NOTIN), .Q(Q0));
  ccu20012 \cm/counterV/Count_intern_reg_1271_add_4_3 ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(F0), .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module cm_counterV_SLICE_66 ( input A1, DI1, LSR, CLK, output F1, Q1, FCO );
  wire   VCCI, LSR_NOTIN, GNDI, DI1_dly, CLK_dly, LSR_dly;

  vmuxregsre \cm/counterV/Count_intern_reg_1271__i0 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_NOTIN), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));
  ccu20014 \cm/counterV/Count_intern_reg_1271_add_4_1 ( .A0(GNDI), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(GNDI), 
    .S0(), .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module cm_counterV_SLICE_67 ( input A0, DI0, LSR, CLK, FCI, output F0, Q0 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly, LSR_dly;

  vmuxregsre \cm/counterV/Count_reg_1273__i9 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  ccu20009 \cm/counterV/Count_reg_1273_add_4_11 ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(GNDI), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(F0), .S1(), .CO1());
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module cm_counterV_SLICE_68 ( input A1, A0, DI1, DI0, LSR, CLK, FCI, output F0, 
    Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre \cm/counterV/Count_reg_1273__i8 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \cm/counterV/Count_reg_1273__i7 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20012 \cm/counterV/Count_reg_1273_add_4_9 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module cm_counterV_SLICE_69 ( input A1, A0, DI1, DI0, LSR, CLK, FCI, output F0, 
    Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre \cm/counterV/Count_reg_1273__i6 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \cm/counterV/Count_reg_1273__i5 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20012 \cm/counterV/Count_reg_1273_add_4_7 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module cm_counterV_SLICE_70 ( input A1, A0, DI1, DI0, LSR, CLK, FCI, output F0, 
    Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre \cm/counterV/Count_reg_1273__i4 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \cm/counterV/Count_reg_1273__i3 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20012 \cm/counterV/Count_reg_1273_add_4_5 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module cm_counterV_SLICE_71 ( input A1, A0, DI1, DI0, LSR, CLK, FCI, output F0, 
    Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre \cm/counterV/Count_reg_1273__i2 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \cm/counterV/Count_reg_1273__i1 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20012 \cm/counterV/Count_reg_1273_add_4_3 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module cm_counterV_SLICE_72 ( input A1, DI1, LSR, CLK, output F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, LSR_dly;

  vmuxregsre \cm/counterV/Count_reg_1273__i0 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  ccu20014 \cm/counterV/Count_reg_1273_add_4_1 ( .A0(GNDI), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(GNDI), 
    .S0(), .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module cm_counterV_SLICE_73 ( input FCI, output F0 );
  wire   GNDI;

  ccu20002 \cm/counterV/sub_1037_add_2_cout ( .A0(GNDI), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(GNDI), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(), .CO1());
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (FCI => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module cm_counterV_SLICE_74 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20004 \cm/counterV/sub_1037_add_2_10 ( .A0(A0), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), 
    .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module cm_counterV_SLICE_75 ( input B1, A1, A0, FCI, output FCO );
  wire   GNDI;

  ccu20020 \cm/counterV/sub_1037_add_2_8 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), 
    .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ccu20020 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h5aaa;
  defparam inst1.INIT1 = 16'h5999;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module cm_counterV_SLICE_76 ( input B1, A1, B0, FCI, output FCO );
  wire   GNDI;

  ccu20021 \cm/counterV/sub_1037_add_2_6 ( .A0(GNDI), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), 
    .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ccu20021 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h3CCC;
  defparam inst1.INIT1 = 16'h3999;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module cm_counterV_SLICE_77 ( input B1, A1, A0, FCI, output FCO );
  wire   GNDI;

  ccu20020 \cm/counterV/sub_1037_add_2_4 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), 
    .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module cm_counterV_SLICE_78 ( input B1, B0, output FCO );
  wire   GNDI;

  ccu20022 \cm/counterV/sub_1037_add_2_2 ( .A0(GNDI), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(GNDI), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(GNDI), .S0(), 
    .S1(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ccu20022 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h3000;
  defparam inst1.INIT1 = 16'h3CCC;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module cm_counterV_SLICE_79 ( input B0, FCI, output F1 );
  wire   GNDI;

  ccu20007 \cm/counterV/sub_1039_add_2_11 ( .A0(GNDI), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(GNDI), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), 
    .S1(F1), .CO1());
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B0 => F1) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
  endspecify

endmodule

module cm_counterV_SLICE_80 ( input A1, A0, FCI, output FCO );
  wire   GNDI;

  ccu20023 \cm/counterV/sub_1039_add_2_9 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), 
    .S1(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ccu20023 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'hf555;
  defparam inst1.INIT1 = 16'hf555;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module cm_counterV_SLICE_81 ( input A1, A0, FCI, output FCO );
  wire   GNDI;

  ccu20023 \cm/counterV/sub_1039_add_2_7 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), 
    .S1(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module cm_counterV_SLICE_82 ( input B1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20024 \cm/counterV/sub_1039_add_2_5 ( .A0(A0), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(GNDI), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), 
    .S1(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ccu20024 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h5999;
  defparam inst1.INIT1 = 16'h0CCC;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module cm_counterV_SLICE_83 ( input A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20025 \cm/counterV/sub_1039_add_2_3 ( .A0(A0), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), 
    .S1(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ccu20025 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h5999;
  defparam inst1.INIT1 = 16'h0aaa;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module cm_counterV_SLICE_84 ( input A1, output FCO );
  wire   GNDI;

  ccu20026 \cm/counterV/sub_1039_add_2_1 ( .A0(GNDI), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(GNDI), .S0(), 
    .S1(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ccu20026 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'hF000;
  defparam inst1.INIT1 = 16'h0aaa;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module cm_counterH_SLICE_85 ( input A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20027 \cm/counterH/sub_1033_add_2_10 ( .A0(A0), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), 
    .S1(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ccu20027 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h5999;
  defparam inst1.INIT1 = 16'h5aaa;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module cm_counterH_SLICE_86 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20001 \cm/counterH/sub_1033_add_2_8 ( .A0(A0), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), 
    .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module cm_counterH_SLICE_87 ( input A0, DI0, LSR, CLK, FCI, output F0, Q0 );
  wire   VCCI, LSR_NOTIN, GNDI, DI0_dly, CLK_dly, LSR_dly;

  vmuxregsre \cm/counterH/Count_intern_reg_1267__i9 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_NOTIN), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));
  ccu20009 \cm/counterH/Count_intern_reg_1267_add_4_11 ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(GNDI), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(F0), .S1(), .CO1());
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module cm_counterH_SLICE_88 ( input B1, A1, A0, FCI, output FCO );
  wire   GNDI;

  ccu20028 \cm/counterH/sub_1033_add_2_6 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), 
    .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ccu20028 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h5AAA;
  defparam inst1.INIT1 = 16'h3999;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module cm_counterH_SLICE_89 ( input A1, A0, DI1, DI0, LSR, CLK, FCI, output F0, 
    Q0, F1, Q1, FCO );
  wire   VCCI, LSR_NOTIN, GNDI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre \cm/counterH/Count_intern_reg_1267__i8 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_NOTIN), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));
  vmuxregsre \cm/counterH/Count_intern_reg_1267__i7 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_NOTIN), .Q(Q0));
  ccu20012 \cm/counterH/Count_intern_reg_1267_add_4_9 ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(F0), .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module cm_counterH_SLICE_90 ( input B1, A0, FCI, output FCO );
  wire   GNDI;

  ccu20029 \cm/counterH/sub_1033_add_2_4 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(GNDI), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), 
    .S1(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ccu20029 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h5AAA;
  defparam inst1.INIT1 = 16'h3CCC;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module cm_counterH_SLICE_91 ( input A1, A0, DI1, DI0, LSR, CLK, FCI, output F0, 
    Q0, F1, Q1, FCO );
  wire   VCCI, LSR_NOTIN, GNDI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre \cm/counterH/Count_intern_reg_1267__i6 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_NOTIN), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));
  vmuxregsre \cm/counterH/Count_intern_reg_1267__i5 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_NOTIN), .Q(Q0));
  ccu20012 \cm/counterH/Count_intern_reg_1267_add_4_7 ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(F0), .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module cm_counterH_SLICE_92 ( input A1, A0, DI1, DI0, LSR, CLK, FCI, output F0, 
    Q0, F1, Q1, FCO );
  wire   VCCI, LSR_NOTIN, GNDI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre \cm/counterH/Count_intern_reg_1267__i4 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_NOTIN), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));
  vmuxregsre \cm/counterH/Count_intern_reg_1267__i3 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_NOTIN), .Q(Q0));
  ccu20012 \cm/counterH/Count_intern_reg_1267_add_4_5 ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(F0), .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module cm_counterH_SLICE_93 ( input A1, A0, DI1, DI0, LSR, CLK, FCI, output F0, 
    Q0, F1, Q1, FCO );
  wire   VCCI, LSR_NOTIN, GNDI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre \cm/counterH/Count_intern_reg_1267__i2 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_NOTIN), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));
  vmuxregsre \cm/counterH/Count_intern_reg_1267__i1 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_NOTIN), .Q(Q0));
  ccu20012 \cm/counterH/Count_intern_reg_1267_add_4_3 ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(F0), .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module cm_counterH_SLICE_94 ( input A1, DI1, LSR, CLK, output F1, Q1, FCO );
  wire   VCCI, LSR_NOTIN, GNDI, DI1_dly, CLK_dly, LSR_dly;

  vmuxregsre \cm/counterH/Count_intern_reg_1267__i0 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_NOTIN), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));
  ccu20014 \cm/counterH/Count_intern_reg_1267_add_4_1 ( .A0(GNDI), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(GNDI), 
    .S0(), .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module cm_counterH_SLICE_95 ( input A0, DI0, LSR, CLK, FCI, output F0, Q0 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly, LSR_dly;

  vmuxregsre \cm/counterH/Count_reg_1269__i9 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  ccu20009 \cm/counterH/Count_reg_1269_add_4_11 ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(GNDI), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(F0), .S1(), .CO1());
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module cm_counterH_SLICE_96 ( input A1, A0, DI1, DI0, LSR, CLK, FCI, output F0, 
    Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre \cm/counterH/Count_reg_1269__i8 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \cm/counterH/Count_reg_1269__i7 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20012 \cm/counterH/Count_reg_1269_add_4_9 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module cm_counterH_SLICE_97 ( input A1, A0, DI1, DI0, LSR, CLK, FCI, output F0, 
    Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre \cm/counterH/Count_reg_1269__i6 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \cm/counterH/Count_reg_1269__i5 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20012 \cm/counterH/Count_reg_1269_add_4_7 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module cm_counterH_SLICE_98 ( input A1, A0, DI1, DI0, LSR, CLK, FCI, output F0, 
    Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre \cm/counterH/Count_reg_1269__i4 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \cm/counterH/Count_reg_1269__i3 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20012 \cm/counterH/Count_reg_1269_add_4_5 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module cm_counterH_SLICE_99 ( input A1, A0, DI1, DI0, LSR, CLK, FCI, output F0, 
    Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre \cm/counterH/Count_reg_1269__i2 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \cm/counterH/Count_reg_1269__i1 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20012 \cm/counterH/Count_reg_1269_add_4_3 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module cm_counterH_SLICE_100 ( input A1, DI1, LSR, CLK, output F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, LSR_dly;

  vmuxregsre \cm/counterH/Count_reg_1269__i0 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  ccu20014 \cm/counterH/Count_reg_1269_add_4_1 ( .A0(GNDI), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(GNDI), 
    .S0(), .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module cm_counterH_SLICE_101 ( input B1, A0, output FCO );
  wire   GNDI;

  ccu20030 \cm/counterH/sub_1033_add_2_2 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(GNDI), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(GNDI), .S0(), 
    .S1(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ccu20030 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h5000;
  defparam inst1.INIT1 = 16'h3CCC;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module cm_counterH_SLICE_102 ( input FCI, output F0 );
  wire   GNDI;

  ccu20002 \cm/counterH/sub_1035_add_2_cout ( .A0(GNDI), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(GNDI), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(), .CO1());
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (FCI => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module cm_counterH_SLICE_103 ( input A1, A0, FCI, output FCO );
  wire   GNDI;

  ccu20023 \cm/counterH/sub_1035_add_2_7 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), 
    .S1(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module cm_counterH_SLICE_104 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20004 \cm/counterH/sub_1035_add_2_5 ( .A0(A0), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), 
    .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module cm_counterH_SLICE_105 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu2 \cm/counterH/sub_1035_add_2_3 ( .A0(A0), .B0(B0), .C0(GNDI), .D0(GNDI), 
    .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module cm_counterH_SLICE_106 ( input B1, A1, output FCO );
  wire   GNDI;

  ccu20006 \cm/counterH/sub_1035_add_2_1 ( .A0(GNDI), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(GNDI), .S0(), .S1(), 
    .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module cm_counterH_SLICE_107 ( input FCI, output F0 );
  wire   GNDI;

  ccu20002 \cm/counterH/sub_1033_add_2_cout ( .A0(GNDI), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(GNDI), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(), .CO1());
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (FCI => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module cm_assignCM_SLICE_108 ( input M1, M0, CE, CLK, FCI, output F0, Q0, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0031 \cm/assignCM/Right_DOWN_reg_i0_i3 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0031 \cm/assignCM/Right_DOWN_reg_i0_i2 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20002 \cm/assignCM/sub_1030_add_2_cout ( .A0(GNDI), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(GNDI), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(), .CO1());

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module vmuxregsre0031 ( input D0, D1, SD, SP, CK, LSR, output Q );

  FL1P3DX INST01( .D0(D0), .D1(D1), .SP(SP), .CK(CK), .SD(SD), .CD(LSR), .Q(Q));
  defparam INST01.GSR = "ENABLED";
endmodule

module cm_assignCM_SLICE_109 ( input B1, A0, M1, M0, CE, CLK, FCI, output Q0, 
    Q1, FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0031 \cm/assignCM/Left_UP_reg_i0_i5 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0031 \cm/assignCM/Left_UP_reg_i0_i4 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20032 \cm/assignCM/sub_1030_add_2_10 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(GNDI), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), 
    .S1(), .CO1(FCO));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module ccu20032 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h5AAA;
  defparam inst1.INIT1 = 16'h3333;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module cm_assignCM_SLICE_110 ( input B1, A1, B0, A0, M1, M0, CE, CLK, FCI, 
    output Q0, Q1, FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0031 \cm/assignCM/Right_DOWN_reg_i0_i11 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0031 \cm/assignCM/Right_DOWN_reg_i0_i10 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu2 \cm/assignCM/sub_1030_add_2_8 ( .A0(A0), .B0(B0), .C0(GNDI), .D0(GNDI), 
    .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), .CO1(FCO));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module cm_assignCM_SLICE_111 ( input B1, A1, B0, A0, M1, M0, CE, CLK, FCI, 
    output Q0, Q1, FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0031 \cm/assignCM/Right_DOWN_reg_i0_i1 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0031 \cm/assignCM/Right_DOWN_reg_i0_i0 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20001 \cm/assignCM/sub_1030_add_2_6 ( .A0(A0), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), 
    .CO1(FCO));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module cm_assignCM_SLICE_112 ( input B1, A0, M1, M0, CE, CLK, FCI, output Q0, 
    Q1, FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0031 \cm/assignCM/Left_UP_reg_i0_i9 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0031 \cm/assignCM/Left_UP_reg_i0_i8 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20029 \cm/assignCM/sub_1030_add_2_4 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(GNDI), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), 
    .S1(), .CO1(FCO));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module cm_assignCM_SLICE_113 ( input B1, A0, M1, M0, CE, CLK, output Q0, Q1, 
    FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0031 \cm/assignCM/Left_UP_reg_i0_i7 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0031 \cm/assignCM/Left_UP_reg_i0_i6 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20030 \cm/assignCM/sub_1030_add_2_2 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(GNDI), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(GNDI), .S0(), 
    .S1(), .CO1(FCO));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module cm_assignCM_SLICE_114 ( input M1, M0, CE, CLK, FCI, output F0, Q0, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0031 \cm/assignCM/Right_UP_reg_i0_i3 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0031 \cm/assignCM/Right_UP_reg_i0_i2 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20002 \cm/assignCM/sub_1032_add_2_cout ( .A0(GNDI), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(GNDI), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(), .CO1());

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module cm_assignCM_SLICE_115 ( input A1, B0, A0, M1, M0, CE, CLK, FCI, output 
    Q0, Q1, FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0031 \cm/assignCM/Right_DOWN_reg_i0_i5 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0031 \cm/assignCM/Right_DOWN_reg_i0_i4 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20033 \cm/assignCM/sub_1032_add_2_10 ( .A0(A0), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), 
    .S1(), .CO1(FCO));

  specify
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module ccu20033 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h3999;
  defparam inst1.INIT1 = 16'h5555;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module cm_assignCM_SLICE_116 ( input B1, A1, B0, A0, M1, M0, CE, CLK, FCI, 
    output Q0, Q1, FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0031 \cm/assignCM/Right_UP_reg_i0_i11 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0031 \cm/assignCM/Right_UP_reg_i0_i10 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20001 \cm/assignCM/sub_1032_add_2_8 ( .A0(A0), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), 
    .CO1(FCO));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module cm_assignCM_SLICE_117 ( input A1, B0, A0, M1, M0, CE, CLK, FCI, output 
    Q0, Q1, FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0031 \cm/assignCM/Right_UP_reg_i0_i1 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0031 \cm/assignCM/Right_UP_reg_i0_i0 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20034 \cm/assignCM/sub_1032_add_2_6 ( .A0(A0), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), 
    .S1(), .CO1(FCO));

  specify
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module ccu20034 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h3999;
  defparam inst1.INIT1 = 16'h5AAA;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module cm_assignCM_SLICE_118 ( input B1, B0, A0, M1, M0, CE, CLK, FCI, output 
    Q0, Q1, FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0031 \cm/assignCM/Right_DOWN_reg_i0_i9 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0031 \cm/assignCM/Right_DOWN_reg_i0_i8 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20035 \cm/assignCM/sub_1032_add_2_4 ( .A0(A0), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(GNDI), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), 
    .S1(), .CO1(FCO));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module ccu20035 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h3999;
  defparam inst1.INIT1 = 16'h3CCC;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module cm_assignCM_SLICE_119 ( input A1, A0, M1, M0, CE, CLK, output Q0, Q1, 
    FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0031 \cm/assignCM/Right_DOWN_reg_i0_i7 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0031 \cm/assignCM/Right_DOWN_reg_i0_i6 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20036 \cm/assignCM/sub_1032_add_2_2 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(GNDI), .S0(), 
    .S1(), .CO1(FCO));

  specify
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module ccu20036 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h5000;
  defparam inst1.INIT1 = 16'h5aaa;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module cd_CNT_VGA_SLICE_120 ( input B1, B0, FCI, output F0, F1, FCO );
  wire   GNDI;

  ccu20013 \cd/CNT_VGA/counter_1249_add_4_3 ( .A0(GNDI), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(GNDI), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICE_121 ( input A1, M1, M0, LSR, CLK, output Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, LSR_dly;

  vmuxregsre0037 \vga/config1/V_Count_Max_nxt_11__I_0_i11 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0037 \vga/config1/V_Count_Max_nxt_11__I_0_i1 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20014 \cd/CNT_VGA/counter_1249_add_4_1 ( .A0(GNDI), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(GNDI), .S0(), 
    .S1(F1), .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module vmuxregsre0037 ( input D0, D1, SD, SP, CK, LSR, output Q );
  wire   Q_INT, D_INT, LSRB, L_IN;

  MUX41 INST10( .D0(Q_INT), .D1(Q_INT), .D2(D0), .D3(D1), .SD1(SD), .SD2(SP), 
    .Z(D_INT));
  INV INST20( .A(LSR), .Z(LSRB));
  AND2 INST30( .A(LSRB), .B(D_INT), .Z(L_IN));
  FD1S1A INST50( .D(L_IN), .CK(CK), .Q(Q_INT));
  defparam INST50.GSR = "DISABLED";
  BUFBA INST80( .A(Q_INT), .Z(Q));
endmodule

module cd_CNT_VGA_SLICE_122 ( input FCI, output F0 );
  wire   GNDI;

  ccu20002 \cd/CNT_VGA/sub_1026_add_2_cout ( .A0(GNDI), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(GNDI), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(), .CO1());
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (FCI => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module cd_CNT_VGA_SLICE_123 ( input C1, B1, A1, C0, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20038 \cd/CNT_VGA/sub_1026_add_2_32 ( .A0(A0), .B0(B0), .C0(C0), 
    .D0(GNDI), .A1(A1), .B1(B1), .C1(C1), .D1(GNDI), .CI(FCI), .S0(), .S1(), 
    .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (C1 => FCO) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (C0 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ccu20038 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h1e1e;
  defparam inst1.INIT1 = 16'h1e1e;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module cd_CNT_VGA_SLICE_124 ( input C1, B1, A1, C0, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20038 \cd/CNT_VGA/sub_1026_add_2_30 ( .A0(A0), .B0(B0), .C0(C0), 
    .D0(GNDI), .A1(A1), .B1(B1), .C1(C1), .D1(GNDI), .CI(FCI), .S0(), .S1(), 
    .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (C1 => FCO) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (C0 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module cd_CNT_VGA_SLICE_125 ( input C1, B1, A1, C0, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20038 \cd/CNT_VGA/sub_1026_add_2_28 ( .A0(A0), .B0(B0), .C0(C0), 
    .D0(GNDI), .A1(A1), .B1(B1), .C1(C1), .D1(GNDI), .CI(FCI), .S0(), .S1(), 
    .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (C1 => FCO) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (C0 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module cd_CNT_VGA_SLICE_126 ( input C1, B1, A1, C0, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20038 \cd/CNT_VGA/sub_1026_add_2_26 ( .A0(A0), .B0(B0), .C0(C0), 
    .D0(GNDI), .A1(A1), .B1(B1), .C1(C1), .D1(GNDI), .CI(FCI), .S0(), .S1(), 
    .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (C1 => FCO) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (C0 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module cd_CNT_VGA_SLICE_127 ( input C1, B1, A1, C0, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20038 \cd/CNT_VGA/sub_1026_add_2_24 ( .A0(A0), .B0(B0), .C0(C0), 
    .D0(GNDI), .A1(A1), .B1(B1), .C1(C1), .D1(GNDI), .CI(FCI), .S0(), .S1(), 
    .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (C1 => FCO) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (C0 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module cd_CNT_VGA_SLICE_128 ( input C1, B1, A1, C0, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20038 \cd/CNT_VGA/sub_1026_add_2_22 ( .A0(A0), .B0(B0), .C0(C0), 
    .D0(GNDI), .A1(A1), .B1(B1), .C1(C1), .D1(GNDI), .CI(FCI), .S0(), .S1(), 
    .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (C1 => FCO) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (C0 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module cd_CNT_VGA_SLICE_129 ( input C1, B1, A1, C0, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20038 \cd/CNT_VGA/sub_1026_add_2_20 ( .A0(A0), .B0(B0), .C0(C0), 
    .D0(GNDI), .A1(A1), .B1(B1), .C1(C1), .D1(GNDI), .CI(FCI), .S0(), .S1(), 
    .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (C1 => FCO) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (C0 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module cd_CNT_VGA_SLICE_130 ( input C1, B1, A1, C0, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20038 \cd/CNT_VGA/sub_1026_add_2_18 ( .A0(A0), .B0(B0), .C0(C0), 
    .D0(GNDI), .A1(A1), .B1(B1), .C1(C1), .D1(GNDI), .CI(FCI), .S0(), .S1(), 
    .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (C1 => FCO) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (C0 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module cd_CNT_VGA_SLICE_131 ( input C1, B1, A1, C0, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20038 \cd/CNT_VGA/sub_1026_add_2_16 ( .A0(A0), .B0(B0), .C0(C0), 
    .D0(GNDI), .A1(A1), .B1(B1), .C1(C1), .D1(GNDI), .CI(FCI), .S0(), .S1(), 
    .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (C1 => FCO) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (C0 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module cd_CNT_VGA_SLICE_132 ( input C1, B1, A1, C0, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20038 \cd/CNT_VGA/sub_1026_add_2_14 ( .A0(A0), .B0(B0), .C0(C0), 
    .D0(GNDI), .A1(A1), .B1(B1), .C1(C1), .D1(GNDI), .CI(FCI), .S0(), .S1(), 
    .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (C1 => FCO) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (C0 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module cd_CNT_VGA_SLICE_133 ( input C1, B1, A1, C0, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20038 \cd/CNT_VGA/sub_1026_add_2_12 ( .A0(A0), .B0(B0), .C0(C0), 
    .D0(GNDI), .A1(A1), .B1(B1), .C1(C1), .D1(GNDI), .CI(FCI), .S0(), .S1(), 
    .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (C1 => FCO) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (C0 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module cd_CNT_VGA_SLICE_134 ( input C1, B1, A1, C0, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20038 \cd/CNT_VGA/sub_1026_add_2_10 ( .A0(A0), .B0(B0), .C0(C0), 
    .D0(GNDI), .A1(A1), .B1(B1), .C1(C1), .D1(GNDI), .CI(FCI), .S0(), .S1(), 
    .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (C1 => FCO) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (C0 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module cd_CNT_VGA_SLICE_135 ( input C1, B1, A1, C0, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20038 \cd/CNT_VGA/sub_1026_add_2_8 ( .A0(A0), .B0(B0), .C0(C0), .D0(GNDI), 
    .A1(A1), .B1(B1), .C1(C1), .D1(GNDI), .CI(FCI), .S0(), .S1(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (C1 => FCO) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (C0 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module cd_CNT_VGA_SLICE_136 ( input C1, B1, A1, C0, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20038 \cd/CNT_VGA/sub_1026_add_2_6 ( .A0(A0), .B0(B0), .C0(C0), .D0(GNDI), 
    .A1(A1), .B1(B1), .C1(C1), .D1(GNDI), .CI(FCI), .S0(), .S1(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (C1 => FCO) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (C0 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module cd_CNT_VGA_SLICE_137 ( input C1, B1, A1, C0, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20038 \cd/CNT_VGA/sub_1026_add_2_4 ( .A0(A0), .B0(B0), .C0(C0), .D0(GNDI), 
    .A1(A1), .B1(B1), .C1(C1), .D1(GNDI), .CI(FCI), .S0(), .S1(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (C1 => FCO) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (C0 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module cd_CNT_VGA_SLICE_138 ( input C1, B1, A1, B0, A0, output FCO );
  wire   GNDI;

  ccu20039 \cd/CNT_VGA/sub_1026_add_2_2 ( .A0(A0), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(B1), .C1(C1), .D1(GNDI), .CI(GNDI), .S0(), .S1(), 
    .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (C1 => FCO) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ccu20039 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h1000;
  defparam inst1.INIT1 = 16'h9696;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module cd_CNT_VGA_SLICE_139 ( input A0, FCI, output F0 );
  wire   GNDI;

  ccu20009 \cd/CNT_VGA/counter_1249_add_4_33 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(GNDI), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(), .CO1());
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A0 => F0) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module cd_CNT_VGA_SLICE_140 ( input A1, B0, FCI, output F0, F1, FCO );
  wire   GNDI;

  ccu20011 \cd/CNT_VGA/counter_1249_add_4_31 ( .A0(GNDI), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module cd_CNT_VGA_SLICE_141 ( input A1, B0, FCI, output F0, F1, FCO );
  wire   GNDI;

  ccu20011 \cd/CNT_VGA/counter_1249_add_4_29 ( .A0(GNDI), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module cd_CNT_VGA_SLICE_142 ( input B1, B0, FCI, output F0, F1, FCO );
  wire   GNDI;

  ccu20013 \cd/CNT_VGA/counter_1249_add_4_27 ( .A0(GNDI), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(GNDI), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module cd_CNT_VGA_SLICE_143 ( input A1, B0, FCI, output F0, F1, FCO );
  wire   GNDI;

  ccu20011 \cd/CNT_VGA/counter_1249_add_4_25 ( .A0(GNDI), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module cd_CNT_VGA_SLICE_144 ( input A1, A0, FCI, output F0, F1, FCO );
  wire   GNDI;

  ccu20012 \cd/CNT_VGA/counter_1249_add_4_23 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module cd_CNT_VGA_SLICE_145 ( input B1, A0, FCI, output F0, F1, FCO );
  wire   GNDI;

  ccu20010 \cd/CNT_VGA/counter_1249_add_4_21 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(GNDI), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module cd_CNT_VGA_SLICE_146 ( input B1, B0, FCI, output F0, F1, FCO );
  wire   GNDI;

  ccu20013 \cd/CNT_VGA/counter_1249_add_4_19 ( .A0(GNDI), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(GNDI), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module cd_CNT_VGA_SLICE_147 ( input A1, A0, FCI, output F0, F1, FCO );
  wire   GNDI;

  ccu20012 \cd/CNT_VGA/counter_1249_add_4_17 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module cd_CNT_VGA_SLICE_148 ( input B1, A0, FCI, output F0, F1, FCO );
  wire   GNDI;

  ccu20010 \cd/CNT_VGA/counter_1249_add_4_15 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(GNDI), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module cd_CNT_VGA_SLICE_149 ( input B1, B0, FCI, output F0, F1, FCO );
  wire   GNDI;

  ccu20013 \cd/CNT_VGA/counter_1249_add_4_13 ( .A0(GNDI), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(GNDI), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICE_150 ( input A1, B0, M1, M0, LSR, CLK, FCI, output F0, Q0, F1, Q1, 
    FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, LSR_dly;

  vmuxregsre0037 \vga/config1/V_Count_Max_nxt_11__I_0_i8 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0037 \vga/config1/V_Count_Max_nxt_11__I_0_i12 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20011 \cd/CNT_VGA/counter_1249_add_4_11 ( .A0(GNDI), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module cd_CNT_VGA_SLICE_151 ( input A1, B0, FCI, output F0, F1, FCO );
  wire   GNDI;

  ccu20011 \cd/CNT_VGA/counter_1249_add_4_9 ( .A0(GNDI), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module cd_CNT_VGA_SLICE_152 ( input A1, B0, FCI, output F0, F1, FCO );
  wire   GNDI;

  ccu20011 \cd/CNT_VGA/counter_1249_add_4_7 ( .A0(GNDI), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module cd_CNT_VGA_SLICE_153 ( input A1, B0, FCI, output F0, F1, FCO );
  wire   GNDI;

  ccu20011 \cd/CNT_VGA/counter_1249_add_4_5 ( .A0(GNDI), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICE_154 ( input M0, CLK, FCI, output F0, Q0 );
  wire   VCCI, GNDI, M0_dly, CLK_dly;

  vmuxregsre0031 \vga/config1/V_Sync_Pulse_reg_i7 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  ccu20040 \cd/CNT_UART/limit_23__I_0_add_2_11 ( .A0(GNDI), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(GNDI), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(F0), .S1(), .CO1());

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module ccu20040 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'hffff;
  defparam inst1.INIT1 = 16'h0000;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module SLICE_155 ( input A0, M1, M0, LSR, CLK, FCI, output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, LSR_dly;

  vmuxregsre0037 \vga/config1/H_Sync_Pulse_nxt_7__I_0_i1 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0037 \vga/config1/H_Right_Margin_nxt_10__I_0_i3 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20041 \cd/CNT_UART/limit_23__I_0_add_2_9 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(GNDI), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));

  specify
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module ccu20041 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h5555;
  defparam inst1.INIT1 = 16'hffff;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module SLICE_156 ( input A1, A0, M1, M0, LSR, CLK, FCI, output F0, Q0, F1, Q1, 
    FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, LSR_dly;

  vmuxregsre0037 \vga/config1/H_Right_Margin_nxt_10__I_0_i2 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0037 \vga/config1/H_Right_Margin_nxt_10__I_0_i1 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20042 \cd/CNT_UART/limit_23__I_0_add_2_7 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module ccu20042 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h5555;
  defparam inst1.INIT1 = 16'h5555;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module SLICE_157 ( input B1, B0, M1, M0, LSR, CLK, FCI, output F0, Q0, F1, Q1, 
    FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, LSR_dly;

  vmuxregsre0037 \vga/config1/H_Left_Margin_nxt_8__I_0_i2 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0037 \vga/config1/H_Left_Margin_nxt_8__I_0_i1 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20043 \cd/CNT_UART/limit_23__I_0_add_2_5 ( .A0(GNDI), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(GNDI), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module ccu20043 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h3333;
  defparam inst1.INIT1 = 16'h3333;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module SLICE_158 ( input B1, B0, M1, M0, LSR, CLK, FCI, output F0, Q0, F1, Q1, 
    FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, LSR_dly;

  vmuxregsre0037 \vga/config1/H_Count_Max_nxt_11__I_0_i7 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0037 \vga/config1/H_Count_Max_nxt_11__I_0_i5 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20043 \cd/CNT_UART/limit_23__I_0_add_2_3 ( .A0(GNDI), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(GNDI), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_159 ( input A1, M1, M0, CLK, output Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre0031 \vga/config1/V_Sync_Pulse_reg_i6 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0031 \vga/config1/V_Sync_Pulse_reg_i5 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20044 \cd/CNT_UART/limit_23__I_0_add_2_1 ( .A0(GNDI), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(GNDI), 
    .S0(), .S1(F1), .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module ccu20044 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'hF000;
  defparam inst1.INIT1 = 16'h5555;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module SLICE_160 ( input A0, M1, M0, CLK, FCI, output F0, Q0, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre0031 \vga/config1/V_Right_Margin_reg_i6 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0031 \vga/config1/V_Right_Margin_reg_i5 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20009 \cd/CNT_UART/counter_1250_add_4_25 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(GNDI), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(), .CO1());

  specify
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_161 ( input B1, A0, M1, M0, CLK, FCI, output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre0031 \vga/config1/V_Right_Margin_reg_i4 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0031 \vga/config1/V_Right_Margin_reg_i3 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20010 \cd/CNT_UART/counter_1250_add_4_23 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(GNDI), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_162 ( input A1, A0, M1, M0, CLK, FCI, output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre0031 \vga/config1/V_Right_Margin_reg_i2 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0031 \vga/config1/V_Right_Margin_reg_i1 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20012 \cd/CNT_UART/counter_1250_add_4_21 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_163 ( input A1, A0, M1, M0, CLK, FCI, output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre0045 \vga/config1/V_Right_Margin_reg_i0 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0045 \vga/config1/V_Left_Margin_reg_i5 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20012 \cd/CNT_UART/counter_1250_add_4_19 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module vmuxregsre0045 ( input D0, D1, SD, SP, CK, LSR, output Q );

  FL1P3BX INST01( .D0(D0), .D1(D1), .SP(SP), .CK(CK), .SD(SD), .PD(LSR), .Q(Q));
  defparam INST01.GSR = "ENABLED";
endmodule

module SLICE_164 ( input B1, A0, M1, M0, CLK, FCI, output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre0031 \vga/config1/V_Left_Margin_reg_i4 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0031 \vga/config1/V_Left_Margin_reg_i3 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20010 \cd/CNT_UART/counter_1250_add_4_17 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(GNDI), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_165 ( input B1, B0, M1, M0, CLK, FCI, output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre0031 \vga/config1/V_Left_Margin_reg_i2 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0031 \vga/config1/V_Left_Margin_reg_i1 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20013 \cd/CNT_UART/counter_1250_add_4_15 ( .A0(GNDI), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(GNDI), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_166 ( input A1, A0, M1, M0, CLK, FCI, output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre0045 \vga/config1/V_Left_Margin_reg_i0 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0045 \vga/config1/V_Count_Max_reg_i9 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20012 \cd/CNT_UART/counter_1250_add_4_13 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_167 ( input A1, B0, M1, M0, CLK, FCI, output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre0031 \vga/config1/V_Count_Max_reg_i8 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0031 \vga/config1/V_Count_Max_reg_i7 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20011 \cd/CNT_UART/counter_1250_add_4_11 ( .A0(GNDI), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_168 ( input B1, B0, M1, M0, CLK, FCI, output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre0031 \vga/config1/V_Sync_Pulse_reg_i4 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0031 \vga/config1/V_Sync_Pulse_reg_i3 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20013 \cd/CNT_UART/counter_1250_add_4_9 ( .A0(GNDI), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(GNDI), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_169 ( input B1, B0, M1, M0, CLK, FCI, output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre0031 \vga/config1/V_Sync_Pulse_reg_i2 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0031 \vga/config1/V_Sync_Pulse_reg_i1 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20013 \cd/CNT_UART/counter_1250_add_4_7 ( .A0(GNDI), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(GNDI), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_170 ( input A1, B0, M1, M0, CLK, FCI, output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre0031 \vga/config1/V_Sync_Pulse_reg_i0 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0045 \vga/config1/V_Right_Margin_reg_i9 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20011 \cd/CNT_UART/counter_1250_add_4_5 ( .A0(GNDI), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_171 ( input A1, B0, M1, M0, CLK, FCI, output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre0031 \vga/config1/V_Right_Margin_reg_i8 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0031 \vga/config1/V_Right_Margin_reg_i7 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20011 \cd/CNT_UART/counter_1250_add_4_3 ( .A0(GNDI), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_172 ( input A1, M1, M0, CLK, output Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre0031 \vga/config1/V_Count_Max_reg_i6 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0031 \vga/config1/V_Count_Max_reg_i5 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20014 \cd/CNT_UART/counter_1250_add_4_1 ( .A0(GNDI), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(GNDI), .S0(), 
    .S1(F1), .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_173 ( input A1, A0, M1, M0, CLK, FCI, output Q0, Q1, FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre0045 \vga/config1/H_Left_Margin_reg_i7 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0031 \vga/config1/H_Left_Margin_reg_i6 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20042 \cd/CNT_LM/sub_1027_add_2_10 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), 
    .S1(), .CO1(FCO));

  specify
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_174 ( input A0, M1, M0, CLK, FCI, output Q0, F1, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre0031 \vga/config1/V_Count_Max_reg_i0 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0045 \vga/config1/Load_reg_732 ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20046 \cd/CNT_LM/sub_1027_add_2_30 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(GNDI), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), 
    .S1(F1), .CO1());

  specify
    (A0 => F1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module ccu20046 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h5555;
  defparam inst1.INIT1 = 16'h0000;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module SLICE_175 ( input A1, A0, M1, M0, CLK, FCI, output Q0, Q1, FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre0031 \vga/config1/H_Sync_Pulse_reg_i7 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0045 \vga/config1/H_Sync_Pulse_reg_i6 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20042 \cd/CNT_LM/sub_1027_add_2_28 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), 
    .S1(), .CO1(FCO));

  specify
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_176 ( input A1, A0, M1, M0, CLK, FCI, output Q0, Q1, FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre0031 \vga/config1/H_Sync_Pulse_reg_i5 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0045 \vga/config1/H_Sync_Pulse_reg_i4 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20042 \cd/CNT_LM/sub_1027_add_2_26 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), 
    .S1(), .CO1(FCO));

  specify
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_177 ( input B1, A0, M1, M0, CLK, FCI, output Q0, Q1, FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre0045 \vga/config1/H_Sync_Pulse_reg_i3 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0045 \vga/config1/H_Sync_Pulse_reg_i2 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20047 \cd/CNT_LM/sub_1027_add_2_24 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(GNDI), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), 
    .S1(), .CO1(FCO));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module ccu20047 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h5555;
  defparam inst1.INIT1 = 16'h3333;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module cd_CNT_LM_SLICE_178 ( input A0, DI0, LSR, CLK, FCI, output F0, Q0 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly, LSR_dly;

  vmuxregsre \cd/CNT_LM/counter_1251__i31 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  ccu20009 \cd/CNT_LM/counter_1251_add_4_33 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(GNDI), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(), .CO1());
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module cd_CNT_LM_SLICE_179 ( input A1, A0, DI1, DI0, LSR, CLK, FCI, output F0, 
    Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre \cd/CNT_LM/counter_1251__i30 ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \cd/CNT_LM/counter_1251__i29 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20012 \cd/CNT_LM/counter_1251_add_4_31 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module cd_CNT_LM_SLICE_180 ( input A1, A0, DI1, DI0, LSR, CLK, FCI, output F0, 
    Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre \cd/CNT_LM/counter_1251__i28 ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \cd/CNT_LM/counter_1251__i27 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20012 \cd/CNT_LM/counter_1251_add_4_29 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module cd_CNT_LM_SLICE_181 ( input A1, A0, DI1, DI0, LSR, CLK, FCI, output F0, 
    Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre \cd/CNT_LM/counter_1251__i26 ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \cd/CNT_LM/counter_1251__i25 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20012 \cd/CNT_LM/counter_1251_add_4_27 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module cd_CNT_LM_SLICE_182 ( input A1, A0, DI1, DI0, LSR, CLK, FCI, output F0, 
    Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre \cd/CNT_LM/counter_1251__i24 ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \cd/CNT_LM/counter_1251__i23 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20012 \cd/CNT_LM/counter_1251_add_4_25 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_183 ( input B1, A0, M1, M0, CLK, FCI, output Q0, Q1, FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre0045 \vga/config1/H_Sync_Pulse_reg_i1 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0031 \vga/config1/H_Sync_Pulse_reg_i0 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20047 \cd/CNT_LM/sub_1027_add_2_22 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(GNDI), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), 
    .S1(), .CO1(FCO));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module cd_CNT_LM_SLICE_184 ( input A1, A0, DI1, DI0, LSR, CLK, FCI, output F0, 
    Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre \cd/CNT_LM/counter_1251__i22 ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \cd/CNT_LM/counter_1251__i21 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20012 \cd/CNT_LM/counter_1251_add_4_23 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module cd_CNT_LM_SLICE_185 ( input A1, A0, DI1, DI0, LSR, CLK, FCI, output F0, 
    Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre \cd/CNT_LM/counter_1251__i20 ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \cd/CNT_LM/counter_1251__i19 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20012 \cd/CNT_LM/counter_1251_add_4_21 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module cd_CNT_LM_SLICE_186 ( input A1, A0, DI1, DI0, LSR, CLK, FCI, output F0, 
    Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre \cd/CNT_LM/counter_1251__i18 ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \cd/CNT_LM/counter_1251__i17 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20012 \cd/CNT_LM/counter_1251_add_4_19 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module cd_CNT_LM_SLICE_187 ( input A1, A0, DI1, DI0, LSR, CLK, FCI, output F0, 
    Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre \cd/CNT_LM/counter_1251__i16 ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \cd/CNT_LM/counter_1251__i15 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20012 \cd/CNT_LM/counter_1251_add_4_17 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module cd_CNT_LM_SLICE_188 ( input A1, A0, DI1, DI0, LSR, CLK, FCI, output F0, 
    Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre \cd/CNT_LM/counter_1251__i14 ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \cd/CNT_LM/counter_1251__i13 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20012 \cd/CNT_LM/counter_1251_add_4_15 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module cd_CNT_LM_SLICE_189 ( input A1, A0, DI1, DI0, LSR, CLK, FCI, output F0, 
    Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre \cd/CNT_LM/counter_1251__i12 ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \cd/CNT_LM/counter_1251__i11 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20012 \cd/CNT_LM/counter_1251_add_4_13 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module cd_CNT_LM_SLICE_190 ( input A1, A0, DI1, DI0, LSR, CLK, FCI, output F0, 
    Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre \cd/CNT_LM/counter_1251__i10 ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \cd/CNT_LM/counter_1251__i9 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20012 \cd/CNT_LM/counter_1251_add_4_11 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_191 ( input A1, A0, M1, M0, CLK, FCI, output Q0, Q1, FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre0045 \vga/config1/H_Right_Margin_reg_i9 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0045 \vga/config1/H_Right_Margin_reg_i8 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20042 \cd/CNT_LM/sub_1027_add_2_20 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), 
    .S1(), .CO1(FCO));

  specify
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_192 ( input A1, A0, M1, M0, CLK, FCI, output Q0, Q1, FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre0031 \vga/config1/H_Right_Margin_reg_i5 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0045 \vga/config1/H_Right_Margin_reg_i4 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20042 \cd/CNT_LM/sub_1027_add_2_18 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), 
    .S1(), .CO1(FCO));

  specify
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module cd_CNT_LM_SLICE_193 ( input A1, A0, DI1, DI0, LSR, CLK, FCI, output F0, 
    Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre \cd/CNT_LM/counter_1251__i8 ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \cd/CNT_LM/counter_1251__i7 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20012 \cd/CNT_LM/counter_1251_add_4_9 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_194 ( input B1, A0, M1, M0, CLK, FCI, output Q0, Q1, FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre0031 \vga/config1/H_Right_Margin_reg_i3 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0031 \vga/config1/H_Right_Margin_reg_i2 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20047 \cd/CNT_LM/sub_1027_add_2_16 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(GNDI), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), 
    .S1(), .CO1(FCO));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_195 ( input B1, A0, M1, M0, CLK, FCI, output Q0, Q1, FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre0031 \vga/config1/H_Right_Margin_reg_i10 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0031 \vga/config1/H_Right_Margin_reg_i1 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20047 \cd/CNT_LM/sub_1027_add_2_14 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(GNDI), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), 
    .S1(), .CO1(FCO));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module cd_CNT_LM_SLICE_196 ( input A1, A0, DI1, DI0, LSR, CLK, FCI, output F0, 
    Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre \cd/CNT_LM/counter_1251__i6 ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \cd/CNT_LM/counter_1251__i5 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20012 \cd/CNT_LM/counter_1251_add_4_7 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_197 ( input A1, A0, M1, M0, CLK, FCI, output Q0, Q1, FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre0031 \vga/config1/H_Right_Margin_reg_i0 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0031 \vga/config1/H_Left_Margin_reg_i8 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20042 \cd/CNT_LM/sub_1027_add_2_12 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), 
    .S1(), .CO1(FCO));

  specify
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_198 ( input A1, A0, M1, M0, CLK, output Q0, Q1, FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre0031 \vga/config1/H_Right_Margin_reg_i7 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0031 \vga/config1/H_Right_Margin_reg_i6 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20048 \cd/CNT_LM/sub_1027_add_2_2 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(GNDI), .S0(), 
    .S1(), .CO1(FCO));

  specify
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module ccu20048 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h5000;
  defparam inst1.INIT1 = 16'h5555;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module cd_CNT_LM_SLICE_199 ( input A1, A0, DI1, DI0, LSR, CLK, FCI, output F0, 
    Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre \cd/CNT_LM/counter_1251__i4 ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \cd/CNT_LM/counter_1251__i3 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20012 \cd/CNT_LM/counter_1251_add_4_5 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_200 ( input B1, A0, M1, M0, CLK, FCI, output Q0, Q1, FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre0031 \vga/config1/V_Count_Max_reg_i10 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0031 \vga/config1/V_Count_Max_reg_i1 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20047 \cd/CNT_LM/sub_1027_add_2_4 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(GNDI), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), 
    .S1(), .CO1(FCO));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module cd_CNT_LM_SLICE_201 ( input A1, A0, DI1, DI0, LSR, CLK, FCI, output F0, 
    Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre \cd/CNT_LM/counter_1251__i2 ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \cd/CNT_LM/counter_1251__i1 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20012 \cd/CNT_LM/counter_1251_add_4_3 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_202 ( input A1, A0, M1, M0, CLK, FCI, output Q0, Q1, FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre0031 \vga/config1/V_Count_Max_reg_i4 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0045 \vga/config1/V_Count_Max_reg_i3 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20042 \cd/CNT_LM/sub_1027_add_2_8 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), 
    .S1(), .CO1(FCO));

  specify
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module cd_CNT_LM_SLICE_203 ( input A1, DI1, LSR, CLK, output F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, LSR_dly;

  vmuxregsre \cd/CNT_LM/counter_1251__i0 ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  ccu20014 \cd/CNT_LM/counter_1251_add_4_1 ( .A0(GNDI), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(GNDI), .S0(), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_204 ( input B1, A0, M1, M0, CLK, FCI, output Q0, Q1, FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre0045 \vga/config1/V_Count_Max_reg_i2 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0031 \vga/config1/V_Count_Max_reg_i11 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20049 \cd/CNT_LM/sub_1027_add_2_6 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(GNDI), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), 
    .S1(), .CO1(FCO));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module ccu20049 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h5555;
  defparam inst1.INIT1 = 16'h3CCC;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module cd_CNT_DB_SLICE_205 ( input A1, A0, DI1, DI0, LSR, CLK, FCI, output F0, 
    Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre \cd/CNT_DB/counter_1252__i4 ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \cd/CNT_DB/counter_1252__i3 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20012 \cd/CNT_DB/counter_1252_add_4_5 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module cd_CNT_DB_SLICE_206 ( input A1, A0, DI1, DI0, LSR, CLK, FCI, output F0, 
    Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre \cd/CNT_DB/counter_1252__i2 ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \cd/CNT_DB/counter_1252__i1 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20012 \cd/CNT_DB/counter_1252_add_4_3 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_207 ( input M1, M0, CLK, FCI, output F0, Q0, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre0045 \vga/config1/H_Left_Margin_reg_i4 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0031 \vga/config1/H_Left_Margin_reg_i3 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20002 \cd/CNT_DB/sub_1028_add_2_cout ( .A0(GNDI), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(GNDI), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(), .CO1());

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_208 ( input B1, B0, M1, M0, CLK, FCI, output Q0, Q1, FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre0031 \vga/config1/H_Count_Max_reg_i6 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0045 \vga/config1/H_Count_Max_reg_i5 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20043 \cd/CNT_DB/sub_1028_add_2_32 ( .A0(GNDI), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(GNDI), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), 
    .S1(), .CO1(FCO));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module cd_CNT_DB_SLICE_209 ( input A1, DI1, LSR, CLK, output F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, LSR_dly;

  vmuxregsre \cd/CNT_DB/counter_1252__i0 ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  ccu20014 \cd/CNT_DB/counter_1252_add_4_1 ( .A0(GNDI), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(GNDI), .S0(), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module cd_SLICE_210 ( input B1, A0, M0, CE, LSR, CLK, FCI, output Q0, FCO );
  wire   VCCI, GNDI, M0_dly, CLK_dly, CE_dly, LSR_dly;

  vmuxregsre \cd/CLOCK_DIVIDER_CONFIG/baudrate_reg_i0_i8 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  ccu20047 \cd/CNT_DB/sub_1028_add_2_30 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(GNDI), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), 
    .S1(), .CO1(FCO));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module cd_SLICE_211 ( input B1, B0, M0, CE, LSR, CLK, FCI, output Q0, FCO );
  wire   VCCI, GNDI, M0_dly, CLK_dly, CE_dly, LSR_dly;

  vmuxregsre \cd/CLOCK_DIVIDER_CONFIG/baudrate_reg_i0_i2 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  ccu20043 \cd/CNT_DB/sub_1028_add_2_28 ( .A0(GNDI), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(GNDI), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), 
    .S1(), .CO1(FCO));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_212 ( input B1, A0, M1, M0, CE, CLK, FCI, output Q0, Q1, FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0031 \FIFO_UART_info/w_data_reg_i0_i7 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0031 \FIFO_UART_info/w_data_reg_i0_i6 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20047 \cd/CNT_DB/sub_1028_add_2_26 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(GNDI), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), 
    .S1(), .CO1(FCO));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_213 ( input B1, B0, M1, M0, CE, CLK, FCI, output Q0, Q1, FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0031 \FIFO_UART_info/w_data_reg_i0_i5 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0031 \FIFO_UART_info/w_data_reg_i0_i4 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20043 \cd/CNT_DB/sub_1028_add_2_24 ( .A0(GNDI), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(GNDI), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), 
    .S1(), .CO1(FCO));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_214 ( input B1, A0, M1, M0, CE, CLK, FCI, output Q0, Q1, FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0031 \FIFO_UART_info/w_data_reg_i0_i3 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0031 \FIFO_UART_info/w_data_reg_i0_i2 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20047 \cd/CNT_DB/sub_1028_add_2_22 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(GNDI), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), 
    .S1(), .CO1(FCO));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_215 ( input A1, B0, M1, M0, CE, CLK, FCI, output Q0, Q1, FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0031 \FIFO_UART_info/w_data_reg_i0_i1 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0031 \FIFO_UART_info/w_data_reg_i0_i0 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20050 \cd/CNT_DB/sub_1028_add_2_20 ( .A0(GNDI), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), 
    .S1(), .CO1(FCO));

  specify
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module ccu20050 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h3333;
  defparam inst1.INIT1 = 16'h5555;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module SLICE_216 ( input B1, A0, M1, M0, CE, CLK, FCI, output Q0, Q1, FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0031 \FIFO_UART_info/r_data_reg_i0_i7 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0031 \FIFO_UART_info/r_data_reg_i0_i6 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20047 \cd/CNT_DB/sub_1028_add_2_18 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(GNDI), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), 
    .S1(), .CO1(FCO));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_217 ( input B1, B0, M1, M0, CE, CLK, FCI, output Q0, Q1, FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0031 \FIFO_UART_info/r_data_reg_i0_i5 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0031 \FIFO_UART_info/r_data_reg_i0_i4 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20043 \cd/CNT_DB/sub_1028_add_2_16 ( .A0(GNDI), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(GNDI), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), 
    .S1(), .CO1(FCO));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_218 ( input A1, A0, M1, M0, CE, CLK, FCI, output Q0, Q1, FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0031 \FIFO_UART_info/r_data_reg_i0_i3 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0031 \FIFO_UART_info/r_data_reg_i0_i2 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20042 \cd/CNT_DB/sub_1028_add_2_14 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), 
    .S1(), .CO1(FCO));

  specify
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_219 ( input A1, B0, M1, M0, CE, CLK, FCI, output Q0, Q1, FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0031 \FIFO_UART_info/r_data_reg_i0_i1 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0031 \FIFO_UART_info/r_data_reg_i0_i0 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20050 \cd/CNT_DB/sub_1028_add_2_12 ( .A0(GNDI), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), 
    .S1(), .CO1(FCO));

  specify
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_220 ( input A1, A0, M1, M0, CE, CLK, FCI, output Q0, Q1, FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0031 \FIFO_UART_error/w_data_reg_i0_i1 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0031 \FIFO_UART_error/w_data_reg_i0_i0 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20042 \cd/CNT_DB/sub_1028_add_2_10 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), 
    .S1(), .CO1(FCO));

  specify
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_221 ( input B1, A0, M1, M0, CLK, FCI, output Q0, Q1, FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre0031 \vga/config1/H_Left_Margin_reg_i2 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0031 \vga/config1/H_Left_Margin_reg_i1 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20032 \cd/CNT_DB/sub_1028_add_2_8 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(GNDI), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), 
    .S1(), .CO1(FCO));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_222 ( input A1, A0, M1, M0, CLK, FCI, output Q0, Q1, FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre0031 \vga/config1/H_Left_Margin_reg_i0 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0045 \vga/config1/H_Count_Max_reg_i9 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20051 \cd/CNT_DB/sub_1028_add_2_6 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), 
    .S1(), .CO1(FCO));

  specify
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module ccu20051 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h5aaa;
  defparam inst1.INIT1 = 16'h5555;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module SLICE_223 ( input A1, B0, M1, M0, CLK, FCI, output Q0, Q1, FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre0045 \vga/config1/H_Count_Max_reg_i8 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0031 \vga/config1/H_Count_Max_reg_i7 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20052 \cd/CNT_DB/sub_1028_add_2_4 ( .A0(GNDI), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), 
    .S1(), .CO1(FCO));

  specify
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module ccu20052 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h3333;
  defparam inst1.INIT1 = 16'h5AAA;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module SLICE_224 ( input B1, B0, CE, CLK, output Q0, FCO );
  wire   GNDI, VCCI, CE_dly, CLK_dly;

  vmuxregsre0045 \FIFO_UART_info/r_empty_reg_23 ( .D0(GNDI), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  gnd DRIVEGND( .PWR0(GNDI));
  vcc DRIVEVCC( .PWR1(VCCI));
  ccu20053 \cd/CNT_DB/sub_1028_add_2_2 ( .A0(GNDI), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(GNDI), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(GNDI), .S0(), 
    .S1(), .CO1(FCO));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module ccu20053 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h3000;
  defparam inst1.INIT1 = 16'h3333;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module cd_CNT_DB_SLICE_225 ( input A0, DI0, LSR, CLK, FCI, output F0, Q0 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly, LSR_dly;

  vmuxregsre \cd/CNT_DB/counter_1252__i31 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  ccu20009 \cd/CNT_DB/counter_1252_add_4_33 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(GNDI), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(), .CO1());
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module cd_CNT_DB_SLICE_226 ( input A1, A0, DI1, DI0, LSR, CLK, FCI, output F0, 
    Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre \cd/CNT_DB/counter_1252__i30 ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \cd/CNT_DB/counter_1252__i29 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20012 \cd/CNT_DB/counter_1252_add_4_31 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module cd_CNT_DB_SLICE_227 ( input A1, A0, DI1, DI0, LSR, CLK, FCI, output F0, 
    Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre \cd/CNT_DB/counter_1252__i28 ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \cd/CNT_DB/counter_1252__i27 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20012 \cd/CNT_DB/counter_1252_add_4_29 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module cd_CNT_DB_SLICE_228 ( input A1, A0, DI1, DI0, LSR, CLK, FCI, output F0, 
    Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre \cd/CNT_DB/counter_1252__i26 ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \cd/CNT_DB/counter_1252__i25 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20012 \cd/CNT_DB/counter_1252_add_4_27 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module cd_CNT_DB_SLICE_229 ( input A1, A0, DI1, DI0, LSR, CLK, FCI, output F0, 
    Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre \cd/CNT_DB/counter_1252__i24 ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \cd/CNT_DB/counter_1252__i23 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20012 \cd/CNT_DB/counter_1252_add_4_25 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module cd_CNT_DB_SLICE_230 ( input A1, A0, DI1, DI0, LSR, CLK, FCI, output F0, 
    Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre \cd/CNT_DB/counter_1252__i22 ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \cd/CNT_DB/counter_1252__i21 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20012 \cd/CNT_DB/counter_1252_add_4_23 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module cd_CNT_DB_SLICE_231 ( input A1, A0, DI1, DI0, LSR, CLK, FCI, output F0, 
    Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre \cd/CNT_DB/counter_1252__i20 ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \cd/CNT_DB/counter_1252__i19 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20012 \cd/CNT_DB/counter_1252_add_4_21 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module cd_CNT_DB_SLICE_232 ( input A1, A0, DI1, DI0, LSR, CLK, FCI, output F0, 
    Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre \cd/CNT_DB/counter_1252__i18 ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \cd/CNT_DB/counter_1252__i17 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20012 \cd/CNT_DB/counter_1252_add_4_19 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module cd_CNT_DB_SLICE_233 ( input A1, A0, DI1, DI0, LSR, CLK, FCI, output F0, 
    Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre \cd/CNT_DB/counter_1252__i16 ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \cd/CNT_DB/counter_1252__i15 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20012 \cd/CNT_DB/counter_1252_add_4_17 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module cd_CNT_DB_SLICE_234 ( input A1, A0, DI1, DI0, LSR, CLK, FCI, output F0, 
    Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre \cd/CNT_DB/counter_1252__i14 ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \cd/CNT_DB/counter_1252__i13 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20012 \cd/CNT_DB/counter_1252_add_4_15 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module cd_CNT_DB_SLICE_235 ( input A1, A0, DI1, DI0, LSR, CLK, FCI, output F0, 
    Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre \cd/CNT_DB/counter_1252__i12 ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \cd/CNT_DB/counter_1252__i11 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20012 \cd/CNT_DB/counter_1252_add_4_13 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module cd_CNT_DB_SLICE_236 ( input A1, A0, DI1, DI0, LSR, CLK, FCI, output F0, 
    Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre \cd/CNT_DB/counter_1252__i10 ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \cd/CNT_DB/counter_1252__i9 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20012 \cd/CNT_DB/counter_1252_add_4_11 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module cd_CNT_DB_SLICE_237 ( input A1, A0, DI1, DI0, LSR, CLK, FCI, output F0, 
    Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre \cd/CNT_DB/counter_1252__i8 ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \cd/CNT_DB/counter_1252__i7 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20012 \cd/CNT_DB/counter_1252_add_4_9 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module cd_CNT_DB_SLICE_238 ( input A1, A0, DI1, DI0, LSR, CLK, FCI, output F0, 
    Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre \cd/CNT_DB/counter_1252__i6 ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \cd/CNT_DB/counter_1252__i5 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20012 \cd/CNT_DB/counter_1252_add_4_7 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module cm_configCM_SLICE_239 ( input D0, C0, B0, A0, DI0, CE, CLK, output F0, 
    Q0 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly, CE_dly;

  lut4 \cm/configCM/i1_4_lut_adj_45 ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0031 \cm/configCM/Config_Error_reg_i0 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut4 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hCECC) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module cm_configCM_SLICE_240 ( input D1, C1, A1, D0, C0, B0, A0, DI0, CE, CLK, 
    output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly;

  lut40054 \cm/configCM/i1_2_lut_3_lut_adj_29 ( .A(A1), .B(GNDI), .C(C1), 
    .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40055 \cm/configCM/i1_4_lut_adj_44 ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  vmuxregsre0031 \cm/configCM/Config_Error_reg_i1 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40054 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hA000) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40055 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hF8F0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module cm_configCM_SLICE_241 ( input D1, C1, A1, D0, C0, B0, DI0, CE, CLK, 
    output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly;

  lut40056 \cm/configCM/i3158_3_lut ( .A(A1), .B(GNDI), .C(C1), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40057 \cm/configCM/i2_3_lut ( .A(GNDI), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0031 \cm/configCM/Config_Error_reg_i2 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40056 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h55F0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40057 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h3000) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module cm_configCM_SLICE_243 ( input D1, B1, A1, D0, C0, B0, A0, DI0, CE, CLK, 
    output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly;

  lut40058 \cm/configCM/i7406_3_lut_4_lut_3_lut ( .A(A1), .B(B1), .C(GNDI), 
    .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40059 \cm/configCM/i3147_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0031 \cm/configCM/Config_Notification_reg_i1 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40058 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h77DD) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40059 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h4CEC) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_244 ( input DI0, M1, CE, CLK, output F0, Q0, Q1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, M1_dly, CE_dly;

  lut40060 m1_lut( .A(GNDI), .B(GNDI), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0031 \cm/configCM/Config_Notification_reg_i0 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0031 \cm/configCM/Config_Notification_reg_i3 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40060 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFFF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module cm_configCM_SLICE_245 ( input D1, C1, B1, A1, C0, B0, A0, DI0, M0, CLK, 
    output OFX0, Q0 );
  wire   \cm/configCM/SLICE_245/cm/configCM/SLICE_245_K1_H1 , GNDI, 
         \cm/configCM/SLICE_245/cm/configCM/i6/GATE_H0 , VCCI, DI0_dly, 
         CLK_dly;

  lut40061 \cm/configCM/SLICE_245_K1 ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(\cm/configCM/SLICE_245/cm/configCM/SLICE_245_K1_H1 ));
  lut40062 \cm/configCM/i6/GATE ( .A(A0), .B(B0), .C(C0), .D(GNDI), 
    .Z(\cm/configCM/SLICE_245/cm/configCM/i6/GATE_H0 ));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0031 \cm/configCM/Config_Notification_Valid_reg_152 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  selmux2 \cm/configCM/SLICE_245_K0K1MUX ( 
    .D0(\cm/configCM/SLICE_245/cm/configCM/i6/GATE_H0 ), 
    .D1(\cm/configCM/SLICE_245/cm/configCM/SLICE_245_K1_H1 ), .SD(M0), 
    .Z(OFX0));

  specify
    (D1 => OFX0) = (0:0:0,0:0:0);
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40061 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hAC00) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40062 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h2020) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module selmux2 ( input D0, D1, SD, output Z );

  MUX21 INST1( .D0(D0), .D1(D1), .SD(SD), .Z(Z));
endmodule

module vga_CounterH_SLICE_246 ( input D1, A1, D0, A0, DI1, DI0, LSR, CLK, 
    output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  lut40063 \vga/CounterH/i4393_2_lut ( .A(A1), .B(GNDI), .C(GNDI), .D(D1), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40063 \vga/CounterH/i4240_2_lut ( .A(A0), .B(GNDI), .C(GNDI), .D(D0), 
    .Z(F0));
  vmuxregsre0064 \vga/CounterH/Count_reg_1274__i1 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0064 \vga/CounterH/Count_reg_1274__i0 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40063 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h5500) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module vmuxregsre0064 ( input D0, D1, SD, SP, CK, LSR, output Q );

  FL1P3DX INST01( .D0(D0), .D1(D1), .SP(SP), .CK(CK), .SD(SD), .CD(LSR), .Q(Q));
  defparam INST01.GSR = "DISABLED";
endmodule

module vga_CounterH_SLICE_247 ( input C1, A1, B0, A0, DI1, DI0, LSR, CLK, 
    output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  lut40065 \vga/CounterH/i4395_2_lut ( .A(A1), .B(GNDI), .C(C1), .D(GNDI), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40066 \vga/CounterH/i4394_2_lut ( .A(A0), .B(B0), .C(GNDI), .D(GNDI), 
    .Z(F0));
  vmuxregsre0064 \vga/CounterH/Count_reg_1274__i3 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0064 \vga/CounterH/Count_reg_1274__i2 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40065 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h5050) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40066 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h4444) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module vga_CounterH_SLICE_248 ( input C1, B1, C0, B0, DI1, DI0, LSR, CLK, 
    output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  lut40067 \vga/CounterH/i4397_2_lut ( .A(GNDI), .B(B1), .C(C1), .D(GNDI), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40067 \vga/CounterH/i4396_2_lut ( .A(GNDI), .B(B0), .C(C0), .D(GNDI), 
    .Z(F0));
  vmuxregsre0064 \vga/CounterH/Count_reg_1274__i5 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0064 \vga/CounterH/Count_reg_1274__i4 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40067 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h3030) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module vga_CounterH_SLICE_249 ( input C1, A1, D0, A0, DI1, DI0, LSR, CLK, 
    output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  lut40065 \vga/CounterH/i4399_2_lut ( .A(A1), .B(GNDI), .C(C1), .D(GNDI), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40063 \vga/CounterH/i4398_2_lut ( .A(A0), .B(GNDI), .C(GNDI), .D(D0), 
    .Z(F0));
  vmuxregsre0064 \vga/CounterH/Count_reg_1274__i7 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0064 \vga/CounterH/Count_reg_1274__i6 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module vga_CounterH_SLICE_250 ( input D1, A1, D0, A0, DI1, DI0, LSR, CLK, 
    output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  lut40068 \vga/CounterH/i4401_2_lut ( .A(A1), .B(GNDI), .C(GNDI), .D(D1), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40068 \vga/CounterH/i4400_2_lut ( .A(A0), .B(GNDI), .C(GNDI), .D(D0), 
    .Z(F0));
  vmuxregsre0064 \vga/CounterH/Count_reg_1274__i9 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0064 \vga/CounterH/Count_reg_1274__i8 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40068 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h00AA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module vga_CounterH_SLICE_251 ( input D1, C1, D0, C0, DI1, DI0, LSR, CLK, 
    output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  lut40069 \vga/CounterH/i4403_2_lut ( .A(GNDI), .B(GNDI), .C(C1), .D(D1), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40069 \vga/CounterH/i4402_2_lut ( .A(GNDI), .B(GNDI), .C(C0), .D(D0), 
    .Z(F0));
  vmuxregsre0064 \vga/CounterH/Count_reg_1274__i11 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0064 \vga/CounterH/Count_reg_1274__i10 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40069 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0F00) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module vga_CounterV_SLICE_252 ( input B1, A1, C0, B0, DI1, DI0, LSR, CLK, 
    output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  lut40070 \vga/CounterV/i4374_2_lut ( .A(A1), .B(B1), .C(GNDI), .D(GNDI), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40067 \vga/CounterV/i4239_2_lut ( .A(GNDI), .B(B0), .C(C0), .D(GNDI), 
    .Z(F0));
  vmuxregsre0064 \vga/CounterV/Count_reg_1275__i1 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0064 \vga/CounterV/Count_reg_1275__i0 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40070 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h2222) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module vga_CounterV_SLICE_253 ( input C1, A1, D0, A0, DI1, DI0, LSR, CLK, 
    output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  lut40065 \vga/CounterV/i4376_2_lut ( .A(A1), .B(GNDI), .C(C1), .D(GNDI), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40063 \vga/CounterV/i4375_2_lut ( .A(A0), .B(GNDI), .C(GNDI), .D(D0), 
    .Z(F0));
  vmuxregsre0064 \vga/CounterV/Count_reg_1275__i3 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0064 \vga/CounterV/Count_reg_1275__i2 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module vga_CounterV_SLICE_254 ( input D1, C1, C0, A0, DI1, DI0, LSR, CLK, 
    output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  lut40069 \vga/CounterV/i4378_2_lut ( .A(GNDI), .B(GNDI), .C(C1), .D(D1), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40071 \vga/CounterV/i4377_2_lut ( .A(A0), .B(GNDI), .C(C0), .D(GNDI), 
    .Z(F0));
  vmuxregsre0064 \vga/CounterV/Count_reg_1275__i5 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0064 \vga/CounterV/Count_reg_1275__i4 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40071 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0A0A) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module vga_CounterV_SLICE_255 ( input D1, B1, C0, A0, DI1, DI0, LSR, CLK, 
    output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  lut40072 \vga/CounterV/i4380_2_lut ( .A(GNDI), .B(B1), .C(GNDI), .D(D1), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40065 \vga/CounterV/i4379_2_lut ( .A(A0), .B(GNDI), .C(C0), .D(GNDI), 
    .Z(F0));
  vmuxregsre0064 \vga/CounterV/Count_reg_1275__i7 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0064 \vga/CounterV/Count_reg_1275__i6 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40072 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h3300) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module vga_CounterV_SLICE_256 ( input C1, A1, B0, A0, DI1, DI0, LSR, CLK, 
    output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  lut40065 \vga/CounterV/i4382_2_lut ( .A(A1), .B(GNDI), .C(C1), .D(GNDI), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40066 \vga/CounterV/i4381_2_lut ( .A(A0), .B(B0), .C(GNDI), .D(GNDI), 
    .Z(F0));
  vmuxregsre0064 \vga/CounterV/Count_reg_1275__i9 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0064 \vga/CounterV/Count_reg_1275__i8 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module vga_CounterV_SLICE_257 ( input D1, C1, D0, B0, DI1, DI0, LSR, CLK, 
    output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  lut40073 \vga/CounterV/i4384_2_lut ( .A(GNDI), .B(GNDI), .C(C1), .D(D1), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40074 \vga/CounterV/i4383_2_lut ( .A(GNDI), .B(B0), .C(GNDI), .D(D0), 
    .Z(F0));
  vmuxregsre0064 \vga/CounterV/Count_reg_1275__i11 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0064 \vga/CounterV/Count_reg_1275__i10 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40073 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h00F0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40074 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h00CC) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module cm_assignCM_SLICE_258 ( input D1, B1, A1, D0, C0, B0, DI0, M0, CE, CLK, 
    output OFX0, Q0 );
  wire   GNDI, \cm/assignCM/SLICE_258/cm/assignCM/SLICE_258_K1_H1 , 
         \cm/assignCM/SLICE_258/cm/assignCM/mux_731_i1/GATE_H0 , VCCI, DI0_dly, 
         CLK_dly, CE_dly;

  lut40075 \cm/assignCM/SLICE_258_K1 ( .A(A1), .B(B1), .C(GNDI), .D(D1), 
    .Z(\cm/assignCM/SLICE_258/cm/assignCM/SLICE_258_K1_H1 ));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40076 \cm/assignCM/mux_731_i1/GATE ( .A(GNDI), .B(B0), .C(C0), .D(D0), 
    .Z(\cm/assignCM/SLICE_258/cm/assignCM/mux_731_i1/GATE_H0 ));
  vmuxregsre0031 \cm/assignCM/Data_VGA_reg_i0_i0 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  selmux2 \cm/assignCM/SLICE_258_K0K1MUX ( 
    .D0(\cm/assignCM/SLICE_258/cm/assignCM/mux_731_i1/GATE_H0 ), 
    .D1(\cm/assignCM/SLICE_258/cm/assignCM/SLICE_258_K1_H1 ), .SD(M0), 
    .Z(OFX0));

  specify
    (D1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40075 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hCCAA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40076 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hCFC0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module cm_assignCM_SLICE_259 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, DI0, 
    CE, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40077 \cm/assignCM/mux_731_i3_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40078 \cm/assignCM/mux_731_i2_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  vmuxregsre0031 \cm/assignCM/Data_VGA_reg_i0_i2 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0031 \cm/assignCM/Data_VGA_reg_i0_i1 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40077 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h8D88) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40078 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hB1A0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module cm_assignCM_SLICE_260 ( input D1, C1, B1, C0, B0, A0, DI0, M0, CE, CLK, 
    output OFX0, Q0 );
  wire   GNDI, \cm/assignCM/SLICE_260/cm/assignCM/SLICE_260_K1_H1 , 
         \cm/assignCM/SLICE_260/cm/assignCM/mux_731_i4/GATE_H0 , VCCI, DI0_dly, 
         CLK_dly, CE_dly;

  lut40079 \cm/assignCM/SLICE_260_K1 ( .A(GNDI), .B(B1), .C(C1), .D(D1), 
    .Z(\cm/assignCM/SLICE_260/cm/assignCM/SLICE_260_K1_H1 ));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40080 \cm/assignCM/mux_731_i4/GATE ( .A(A0), .B(B0), .C(C0), .D(GNDI), 
    .Z(\cm/assignCM/SLICE_260/cm/assignCM/mux_731_i4/GATE_H0 ));
  vmuxregsre0031 \cm/assignCM/Data_VGA_reg_i0_i3 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  selmux2 \cm/assignCM/SLICE_260_K0K1MUX ( 
    .D0(\cm/assignCM/SLICE_260/cm/assignCM/mux_731_i4/GATE_H0 ), 
    .D1(\cm/assignCM/SLICE_260/cm/assignCM/SLICE_260_K1_H1 ), .SD(M0), 
    .Z(OFX0));

  specify
    (D1 => OFX0) = (0:0:0,0:0:0);
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40079 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFC30) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40080 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hE2E2) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module cm_assignCM_SLICE_261 ( input C1, B1, A1, D0, C0, B0, DI0, M0, CE, CLK, 
    output OFX0, Q0 );
  wire   GNDI, \cm/assignCM/SLICE_261/cm/assignCM/SLICE_261_K1_H1 , 
         \cm/assignCM/SLICE_261/cm/assignCM/i34/GATE_H0 , VCCI, DI0_dly, 
         CLK_dly, CE_dly;

  lut40081 \cm/assignCM/SLICE_261_K1 ( .A(A1), .B(B1), .C(C1), .D(GNDI), 
    .Z(\cm/assignCM/SLICE_261/cm/assignCM/SLICE_261_K1_H1 ));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40079 \cm/assignCM/i34/GATE ( .A(GNDI), .B(B0), .C(C0), .D(D0), 
    .Z(\cm/assignCM/SLICE_261/cm/assignCM/i34/GATE_H0 ));
  vmuxregsre0031 \cm/assignCM/Data_VGA_reg_i0_i4 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  selmux2 \cm/assignCM/SLICE_261_K0K1MUX ( 
    .D0(\cm/assignCM/SLICE_261/cm/assignCM/i34/GATE_H0 ), 
    .D1(\cm/assignCM/SLICE_261/cm/assignCM/SLICE_261_K1_H1 ), .SD(M0), 
    .Z(OFX0));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40081 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hE4E4) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module cm_assignCM_SLICE_262 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, DI0, 
    CE, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40082 \cm/assignCM/mux_731_i7_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40083 \cm/assignCM/mux_731_i6_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  vmuxregsre0031 \cm/assignCM/Data_VGA_reg_i0_i6 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0031 \cm/assignCM/Data_VGA_reg_i0_i5 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40082 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hCCFA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40083 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hF0EE) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module cm_assignCM_SLICE_263 ( input D1, B1, A1, D0, C0, A0, DI0, M0, CE, CLK, 
    output OFX0, Q0 );
  wire   GNDI, \cm/assignCM/SLICE_263/cm/assignCM/SLICE_263_K1_H1 , 
         \cm/assignCM/SLICE_263/cm/assignCM/i30/GATE_H0 , VCCI, DI0_dly, 
         CLK_dly, CE_dly;

  lut40084 \cm/assignCM/SLICE_263_K1 ( .A(A1), .B(B1), .C(GNDI), .D(D1), 
    .Z(\cm/assignCM/SLICE_263/cm/assignCM/SLICE_263_K1_H1 ));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40085 \cm/assignCM/i30/GATE ( .A(A0), .B(GNDI), .C(C0), .D(D0), 
    .Z(\cm/assignCM/SLICE_263/cm/assignCM/i30/GATE_H0 ));
  vmuxregsre0031 \cm/assignCM/Data_VGA_reg_i0_i7 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  selmux2 \cm/assignCM/SLICE_263_K0K1MUX ( 
    .D0(\cm/assignCM/SLICE_263/cm/assignCM/i30/GATE_H0 ), 
    .D1(\cm/assignCM/SLICE_263/cm/assignCM/SLICE_263_K1_H1 ), .SD(M0), 
    .Z(OFX0));

  specify
    (D1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40084 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hDD88) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40085 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hF0AA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module cm_assignCM_SLICE_264 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, DI0, 
    CE, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40086 \cm/assignCM/mux_731_i10_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40087 \cm/assignCM/mux_731_i9_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  vmuxregsre0031 \cm/assignCM/Data_VGA_reg_i0_i9 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0031 \cm/assignCM/Data_VGA_reg_i0_i8 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40086 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hDDD8) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40087 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hCFCA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module cm_assignCM_SLICE_265 ( input D1, C1, A1, D0, C0, B0, A0, DI0, CE, CLK, 
    output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly;

  lut40088 \cm/assignCM/i1_2_lut_rep_180_2_lut_2_lut_3_lut ( .A(A1), .B(GNDI), 
    .C(C1), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40089 \cm/assignCM/mux_731_i11_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  vmuxregsre0031 \cm/assignCM/Data_VGA_reg_i0_i10 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40088 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hA000) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40089 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFE54) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module cm_assignCM_SLICE_266 ( input D1, C1, A1, D0, C0, B0, DI0, M0, CE, CLK, 
    output OFX0, Q0 );
  wire   GNDI, \cm/assignCM/SLICE_266/cm/assignCM/SLICE_266_K1_H1 , 
         \cm/assignCM/SLICE_266/cm/assignCM/mux_731_i12/GATE_H0 , VCCI, 
         DI0_dly, CLK_dly, CE_dly;

  lut40090 \cm/assignCM/SLICE_266_K1 ( .A(A1), .B(GNDI), .C(C1), .D(D1), 
    .Z(\cm/assignCM/SLICE_266/cm/assignCM/SLICE_266_K1_H1 ));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40076 \cm/assignCM/mux_731_i12/GATE ( .A(GNDI), .B(B0), .C(C0), .D(D0), 
    .Z(\cm/assignCM/SLICE_266/cm/assignCM/mux_731_i12/GATE_H0 ));
  vmuxregsre0031 \cm/assignCM/Data_VGA_reg_i0_i11 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  selmux2 \cm/assignCM/SLICE_266_K0K1MUX ( 
    .D0(\cm/assignCM/SLICE_266/cm/assignCM/mux_731_i12/GATE_H0 ), 
    .D1(\cm/assignCM/SLICE_266/cm/assignCM/SLICE_266_K1_H1 ), .SD(M0), 
    .Z(OFX0));

  specify
    (D1 => OFX0) = (0:0:0,0:0:0);
    (C1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40090 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hAAF0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module cm_configCM_SLICE_267 ( input D0, C0, DI0, LSR, CLK, output F0, Q0 );
  wire   GNDI, VCCI, LSR_NOTIN, DI0_dly, CLK_dly, LSR_dly;

  lut40091 \cm/configCM/i1_2_lut ( .A(GNDI), .B(GNDI), .C(C0), .D(D0), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \cm/configCM/Error_Valid_reg_154 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_NOTIN), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));

  specify
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40091 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hF000) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_268 ( input C1, B1, A1, D0, C0, A0, DI1, DI0, CE, CLK, output F0, 
    Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40092 VGA_error_data_3__I_2_i2_3_lut( .A(A1), .B(B1), .C(C1), .D(GNDI), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40093 VGA_error_data_3__I_2_i1_3_lut( .A(A0), .B(GNDI), .C(C0), .D(D0), 
    .Z(F0));
  vmuxregsre0031 \FIFO_CM_error/w_data_reg_i0_i1 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0031 \FIFO_CM_error/w_data_reg_i0_i0 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40092 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hD8D8) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40093 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hF5A0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_269 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI0, CE, LSR, CLK, 
    output F0, Q0, F1 );
  wire   VCCI, DI0_dly, CLK_dly, CE_dly, LSR_dly;

  lut40094 mux_8_i2_4_lut( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40095 mux_8_i3_3_lut_4_lut( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre \FIFO_CM_error/w_data_reg_i0_i2 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40094 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hE2C0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40095 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hE2C0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_270 ( input C1, B1, D0, C0, B0, A0, DI0, CE, CLK, output F0, Q0, 
    F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly;

  lut40096 i4218_2_lut_rep_221( .A(GNDI), .B(B1), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40097 VGA_error_data_3__I_2_i4_4_lut( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  vmuxregsre0031 \FIFO_CM_error/w_data_reg_i0_i3 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40096 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hC0C0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40097 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hAA0C) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module FIFO_CM_error_SLICE_271 ( input D1, C1, A1, D0, C0, B0, A0, DI0, CLK, 
    output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly;

  lut40098 \FIFO_CM_error/i347_2_lut_3_lut_3_lut ( .A(A1), .B(GNDI), .C(C1), 
    .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40099 \FIFO_CM_error/i7460_4_lut_rep_209 ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  vmuxregsre0045 \FIFO_CM_error/w_empty_reg_21 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40098 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0050) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40099 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hAAAB) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module FIFO_UART_CM_SLICE_276 ( input D1, C1, B1, A1, D0, A0, DI0, CLK, 
    output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly;

  lut40100 \FIFO_UART_CM/i7469_2_lut_3_lut_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40101 \FIFO_UART_CM/i7445_2_lut_rep_219 ( .A(A0), .B(GNDI), .C(GNDI), 
    .D(D0), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0045 \FIFO_UART_CM/w_empty_reg_21 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40100 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0020) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40101 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hAAFF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module FIFO_UART_info_SLICE_282 ( input D1, C1, B1, A1, D0, A0, DI0, CLK, 
    output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly;

  lut40102 \FIFO_UART_info/i454_2_lut_3_lut_4_lut_4_lut ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40103 \FIFO_UART_info/i7454_2_lut_rep_214 ( .A(A0), .B(GNDI), .C(GNDI), 
    .D(D0), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0045 \FIFO_UART_info/w_empty_reg_21 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40102 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0100) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40103 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h55FF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_283 ( input D1, C1, A1, D0, C0, B0, A0, DI0, LSR, CLK, output F0, 
    Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, LSR_dly;

  lut40104 i2_3_lut( .A(A1), .B(GNDI), .C(C1), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40105 \vga/CounterH/i4161_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0064 \vga/CounterH/Sync_State_reg_13 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40104 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFFA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40105 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0F0E) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_295 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, DI0, CE, LSR, 
    CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40106 i1_4_lut_adj_59( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40107 \uart/UART_STATE/i1_4_lut_adj_56 ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  vmuxregsre0064 \uart/UART_STATE/error_reg__i1 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0064 \uart/UART_STATE/error_reg__i0 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40106 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h3230) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40107 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h00B8) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_300 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, DI0, CE, LSR, 
    CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40108 i4288_2_lut_3_lut_4_lut( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40109 i4289_2_lut_3_lut_4_lut( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0064 \uart/UART_STATE/out_reg__i2 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0064 \uart/UART_STATE/out_reg__i1 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40108 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hC4CC) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40109 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hD0F0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_301 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, DI0, CE, LSR, 
    CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40110 i4286_2_lut_3_lut_4_lut( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40111 i4287_2_lut_3_lut_4_lut( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0064 \uart/UART_STATE/out_reg__i4 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0064 \uart/UART_STATE/out_reg__i3 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40110 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hB0F0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40111 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hAA2A) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_302 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, DI0, CE, LSR, 
    CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40112 i4284_2_lut_3_lut_4_lut( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40113 i4285_2_lut_3_lut_4_lut( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0064 \uart/UART_STATE/out_reg__i6 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0064 \uart/UART_STATE/out_reg__i5 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40112 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hDF00) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40113 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h8AAA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_303 ( input D1, B1, A1, D0, C0, B0, A0, DI0, M1, CE, LSR, CLK, 
    output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, M1_dly, CE_dly, LSR_dly;

  lut40114 \uart/UART_STATE/i1_2_lut_3_lut_adj_57 ( .A(A1), .B(B1), .C(GNDI), 
    .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40115 i4283_2_lut_3_lut_4_lut( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0064 \uart/UART_STATE/out_reg__i0 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0064 \uart/UART_STATE/out_reg__i7 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40114 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hCC88) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40115 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hC4CC) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module uart_SLICE_313 ( input D1, C1, B1, D0, B0, DI0, CE, LSR, CLK, output F0, 
    Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly, LSR_dly;

  lut40116 \uart/UART_STATE/i2_3_lut_adj_55 ( .A(GNDI), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40117 \uart/SAMPLER/i1_2_lut ( .A(GNDI), .B(B0), .C(GNDI), .D(D0), .Z(F0));
  vmuxregsre0064 \uart/UART_STATE/valid_error_reg_82 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40116 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFCFF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40117 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hCC00) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module uart_UART_STATE_SLICE_314 ( input B1, A1, D0, C0, B0, A0, DI0, CE, LSR, 
    CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly, LSR_dly;

  lut40118 \uart/UART_STATE/equal_22_i3_2_lut_rep_220 ( .A(A1), .B(B1), 
    .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40119 \uart/UART_STATE/i2_3_lut_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  vmuxregsre0064 \uart/UART_STATE/valid_out_reg_83 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40118 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hEEEE) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40119 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h8000) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module cm_assignCM_SLICE_316 ( input DI0, M1, CE, CLK, output F0, Q0, Q1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, M1_dly, CE_dly;

  lut40060 \cm/assignCM/n9391\000/BUF1/BUF1 ( .A(GNDI), .B(GNDI), .C(GNDI), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0031 \cm/assignCM/VGA_Notification_reg_i0_i0 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0031 \cm/assignCM/VGA_Notification_reg_i0_i3 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module cm_assignCM_SLICE_317 ( input D1, C1, D0, C0, B0, A0, DI0, LSR, CLK, 
    output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, LSR_dly;

  lut40073 \cm/assignCM/i450_2_lut ( .A(GNDI), .B(GNDI), .C(C1), .D(D1), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40120 \cm/assignCM/Previous_Qudran_Config_reg_1__I_0_i3_4_lut ( .A(A0), 
    .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre \cm/assignCM/VGA_Notification_Valid_reg_119 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40120 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h6FF6) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_321 ( input D1, C1, B1, A1, D0, C0, A0, DI0, LSR, CLK, output F0, 
    Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, LSR_dly;

  lut40121 i3_4_lut_adj_64( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40122 \vga/CounterV/i4188_3_lut ( .A(A0), .B(GNDI), .C(C0), .D(D0), 
    .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0064 \vga/CounterV/Sync_State_reg_13 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40121 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFFE) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40122 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0F0A) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module cd_CLOCK_DIVIDER_CONFIG_SLICE_337 ( input D1, C1, B1, A1, D0, C0, B0, 
    A0, DI0, LSR, CLK, output F0, Q0, F1 );
  wire   VCCI, LSR_NOTIN, DI0_dly, CLK_dly, LSR_dly;

  lut40123 \cd/CLOCK_DIVIDER_CONFIG/i1_4_lut_rep_158 ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40124 \cd/CLOCK_DIVIDER_CONFIG/i1_2_lut_rep_177_3_lut_4_lut ( .A(A0), 
    .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0125 \cd/CLOCK_DIVIDER_CONFIG/c_UART_ready_reg_28 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_NOTIN), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40123 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h040C) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40124 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFFD) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module vmuxregsre0125 ( input D0, D1, SD, SP, CK, LSR, output Q );

  FL1P3JY INST01( .D0(D0), .D1(D1), .SP(SP), .CK(CK), .SD(SD), .PD(LSR), .Q(Q));
  defparam INST01.GSR = "ENABLED";
endmodule

module SLICE_338 ( input D1, C1, D0, C0, B0, A0, DI0, LSR, CLK, output F0, Q0, 
    F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, LSR_dly;

  lut40126 \cd/CLOCK_DIVIDER_CONFIG/c_addr_3__I_0_30_i6_2_lut_rep_210 ( 
    .A(GNDI), .B(GNDI), .C(C1), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40127 \uart/UART_CONFIG/i7530_2_lut_3_lut_4_lut ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0125 \cd/CLOCK_DIVIDER_CONFIG/c_VGA_ready_reg_27 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40126 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFF0F) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40127 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h3337) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module cm_configCM_SLICE_339 ( input D0, C0, B0, DI0, CE, CLK, output F0, Q0 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly;

  lut40128 \cm/configCM/i1_2_lut_3_lut ( .A(GNDI), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0031 \cm/configCM/c_addr_reg_i0 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40128 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hC000) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module cm_configCM_SLICE_340 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, DI0, 
    CE, LSR, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40129 \cm/configCM/i1_2_lut_3_lut_4_lut_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40130 \cm/configCM/i7296_3_lut_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  vmuxregsre \cm/configCM/c_addr_reg_i2 ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \cm/configCM/c_addr_reg_i1 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40129 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h2333) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40130 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hD0E0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module cm_configCM_SLICE_341 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI0, CE, 
    CLK, output F0, Q0, F1 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly, CE_dly;

  lut40131 \cm/configCM/i7271_2_lut_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40132 \cm/configCM/RXD_Data_reg_11__bdd_4_lut ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0031 \cm/configCM/c_addr_reg_i3 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40131 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0E00) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40132 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFDFF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module cm_configCM_SLICE_342 ( input D0, C0, B0, A0, DI0, CE, CLK, output F0, 
    Q0 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly, CE_dly;

  lut40133 \cm/configCM/i32_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0031 \cm/configCM/c_data_reg_i0 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40133 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hB830) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module cm_configCM_SLICE_343 ( input D0, C0, B0, A0, DI0, CE, CLK, output F0, 
    Q0 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly, CE_dly;

  lut40134 \cm/configCM/c_data_nxt_13__I_0_i2_4_lut ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0031 \cm/configCM/c_data_reg_i1 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40134 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hB380) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module cm_configCM_SLICE_344 ( input D1, C1, B1, A1, D0, C0, A0, DI0, CE, CLK, 
    output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly;

  lut40135 \cm/configCM/i2_3_lut_4_lut_adj_34 ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40136 \cm/configCM/i13_3_lut ( .A(A0), .B(GNDI), .C(C0), .D(D0), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0031 \cm/configCM/c_data_reg_i2 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40135 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0400) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40136 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFA0A) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_345 ( input D1, A1, D0, C0, B0, A0, DI0, LSR, CLK, output F0, Q0, 
    F1 );
  wire   GNDI, VCCI, LSR_NOTIN, DI0_dly, CLK_dly, LSR_dly;

  lut40137 \cd/CLOCK_DIVIDER_CONFIG/i1_2_lut_rep_211 ( .A(A1), .B(GNDI), 
    .C(GNDI), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40138 \cd/CLOCK_DIVIDER_CONFIG/i4201_3_lut_4_lut_3_lut_4_lut ( .A(A0), 
    .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0125 \uart/UART_CONFIG/c_ready_reg_22 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_NOTIN), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40137 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFF55) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40138 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hEBFF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_346 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI0, LSR, CLK, 
    output F0, Q0, F1 );
  wire   VCCI, DI0_dly, CLK_dly, LSR_dly;

  lut40139 \cm/assignCM/i7456_2_lut_3_lut_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40140 \vga/config1/i1_4_lut_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  vmuxregsre0125 \cm/assignCM/c_ready_reg_118 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40139 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0010) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40140 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h004C) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_347 ( input D1, A1, D0, C0, B0, A0, DI0, LSR, CLK, output F0, Q0, 
    F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, LSR_dly;

  lut40141 \vga/config1/i1_2_lut ( .A(A1), .B(GNDI), .C(GNDI), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40142 \vga/config1/i3_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre \cm/configCM/c_valid_reg_148 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40141 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hAA00) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40142 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h2000) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module cd_CNT_VGA_SLICE_348 ( input D1, B1, C0, B0, DI1, DI0, LSR, CLK, 
    output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  lut40072 \cd/CNT_VGA/i4306_2_lut ( .A(GNDI), .B(B1), .C(GNDI), .D(D1), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40067 \cd/CNT_VGA/i4217_2_lut ( .A(GNDI), .B(B0), .C(C0), .D(GNDI), 
    .Z(F0));
  vmuxregsre0064 \cd/CNT_VGA/counter_1249__i1 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0064 \cd/CNT_VGA/counter_1249__i0 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module cd_CNT_VGA_SLICE_349 ( input D1, B1, C0, B0, DI1, DI0, LSR, CLK, 
    output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  lut40072 \cd/CNT_VGA/i4308_2_lut ( .A(GNDI), .B(B1), .C(GNDI), .D(D1), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40067 \cd/CNT_VGA/i4307_2_lut ( .A(GNDI), .B(B0), .C(C0), .D(GNDI), 
    .Z(F0));
  vmuxregsre0064 \cd/CNT_VGA/counter_1249__i3 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0064 \cd/CNT_VGA/counter_1249__i2 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module cd_CNT_VGA_SLICE_350 ( input D1, B1, C0, B0, DI1, DI0, LSR, CLK, 
    output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  lut40072 \cd/CNT_VGA/i4310_2_lut ( .A(GNDI), .B(B1), .C(GNDI), .D(D1), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40067 \cd/CNT_VGA/i4309_2_lut ( .A(GNDI), .B(B0), .C(C0), .D(GNDI), 
    .Z(F0));
  vmuxregsre0064 \cd/CNT_VGA/counter_1249__i5 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0064 \cd/CNT_VGA/counter_1249__i4 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module cd_CNT_VGA_SLICE_351 ( input D1, B1, C0, B0, DI1, DI0, LSR, CLK, 
    output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  lut40072 \cd/CNT_VGA/i4312_2_lut ( .A(GNDI), .B(B1), .C(GNDI), .D(D1), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40067 \cd/CNT_VGA/i4311_2_lut ( .A(GNDI), .B(B0), .C(C0), .D(GNDI), 
    .Z(F0));
  vmuxregsre0064 \cd/CNT_VGA/counter_1249__i7 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0064 \cd/CNT_VGA/counter_1249__i6 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module cd_CNT_VGA_SLICE_352 ( input D1, B1, B0, A0, DI1, DI0, LSR, CLK, 
    output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  lut40074 \cd/CNT_VGA/i4314_2_lut ( .A(GNDI), .B(B1), .C(GNDI), .D(D1), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40070 \cd/CNT_VGA/i4313_2_lut ( .A(A0), .B(B0), .C(GNDI), .D(GNDI), 
    .Z(F0));
  vmuxregsre0064 \cd/CNT_VGA/counter_1249__i9 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0064 \cd/CNT_VGA/counter_1249__i8 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module cd_CNT_VGA_SLICE_353 ( input B1, A1, C0, A0, DI1, DI0, LSR, CLK, 
    output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  lut40066 \cd/CNT_VGA/i4316_2_lut ( .A(A1), .B(B1), .C(GNDI), .D(GNDI), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40071 \cd/CNT_VGA/i4315_2_lut ( .A(A0), .B(GNDI), .C(C0), .D(GNDI), 
    .Z(F0));
  vmuxregsre0064 \cd/CNT_VGA/counter_1249__i11 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0064 \cd/CNT_VGA/counter_1249__i10 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module cd_CNT_VGA_SLICE_354 ( input C1, A1, D0, C0, DI1, DI0, LSR, CLK, 
    output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  lut40071 \cd/CNT_VGA/i4318_2_lut ( .A(A1), .B(GNDI), .C(C1), .D(GNDI), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40069 \cd/CNT_VGA/i4317_2_lut ( .A(GNDI), .B(GNDI), .C(C0), .D(D0), 
    .Z(F0));
  vmuxregsre0064 \cd/CNT_VGA/counter_1249__i13 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0064 \cd/CNT_VGA/counter_1249__i12 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module cd_CNT_VGA_SLICE_355 ( input C1, B1, D0, B0, DI1, DI0, LSR, CLK, 
    output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  lut40067 \cd/CNT_VGA/i4320_2_lut ( .A(GNDI), .B(B1), .C(C1), .D(GNDI), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40074 \cd/CNT_VGA/i4319_2_lut ( .A(GNDI), .B(B0), .C(GNDI), .D(D0), 
    .Z(F0));
  vmuxregsre0064 \cd/CNT_VGA/counter_1249__i15 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0064 \cd/CNT_VGA/counter_1249__i14 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module cd_CNT_VGA_SLICE_356 ( input D1, B1, C0, B0, DI1, DI0, LSR, CLK, 
    output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  lut40072 \cd/CNT_VGA/i4322_2_lut ( .A(GNDI), .B(B1), .C(GNDI), .D(D1), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40067 \cd/CNT_VGA/i4321_2_lut ( .A(GNDI), .B(B0), .C(C0), .D(GNDI), 
    .Z(F0));
  vmuxregsre0064 \cd/CNT_VGA/counter_1249__i17 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0064 \cd/CNT_VGA/counter_1249__i16 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module cd_CNT_VGA_SLICE_357 ( input C1, A1, B0, A0, DI1, DI0, LSR, CLK, 
    output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  lut40065 \cd/CNT_VGA/i4324_2_lut ( .A(A1), .B(GNDI), .C(C1), .D(GNDI), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40066 \cd/CNT_VGA/i4323_2_lut ( .A(A0), .B(B0), .C(GNDI), .D(GNDI), 
    .Z(F0));
  vmuxregsre0064 \cd/CNT_VGA/counter_1249__i19 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0064 \cd/CNT_VGA/counter_1249__i18 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module cd_CNT_VGA_SLICE_358 ( input C1, A1, B0, A0, DI1, DI0, LSR, CLK, 
    output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  lut40065 \cd/CNT_VGA/i4326_2_lut ( .A(A1), .B(GNDI), .C(C1), .D(GNDI), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40066 \cd/CNT_VGA/i4325_2_lut ( .A(A0), .B(B0), .C(GNDI), .D(GNDI), 
    .Z(F0));
  vmuxregsre0064 \cd/CNT_VGA/counter_1249__i21 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0064 \cd/CNT_VGA/counter_1249__i20 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module cd_CNT_VGA_SLICE_359 ( input C1, A1, B0, A0, DI1, DI0, LSR, CLK, 
    output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  lut40065 \cd/CNT_VGA/i4328_2_lut ( .A(A1), .B(GNDI), .C(C1), .D(GNDI), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40070 \cd/CNT_VGA/i4327_2_lut ( .A(A0), .B(B0), .C(GNDI), .D(GNDI), 
    .Z(F0));
  vmuxregsre0064 \cd/CNT_VGA/counter_1249__i23 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0064 \cd/CNT_VGA/counter_1249__i22 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module cd_CNT_VGA_SLICE_360 ( input D1, B1, C0, B0, DI1, DI0, LSR, CLK, 
    output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  lut40072 \cd/CNT_VGA/i4330_2_lut ( .A(GNDI), .B(B1), .C(GNDI), .D(D1), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40067 \cd/CNT_VGA/i4329_2_lut ( .A(GNDI), .B(B0), .C(C0), .D(GNDI), 
    .Z(F0));
  vmuxregsre0064 \cd/CNT_VGA/counter_1249__i25 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0064 \cd/CNT_VGA/counter_1249__i24 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module cd_CNT_VGA_SLICE_361 ( input D1, B1, C0, B0, DI1, DI0, LSR, CLK, 
    output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  lut40072 \cd/CNT_VGA/i4332_2_lut ( .A(GNDI), .B(B1), .C(GNDI), .D(D1), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40067 \cd/CNT_VGA/i4331_2_lut ( .A(GNDI), .B(B0), .C(C0), .D(GNDI), 
    .Z(F0));
  vmuxregsre0064 \cd/CNT_VGA/counter_1249__i27 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0064 \cd/CNT_VGA/counter_1249__i26 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module cd_CNT_VGA_SLICE_362 ( input D1, B1, C0, B0, DI1, DI0, LSR, CLK, 
    output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  lut40072 \cd/CNT_VGA/i4334_2_lut ( .A(GNDI), .B(B1), .C(GNDI), .D(D1), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40067 \cd/CNT_VGA/i4333_2_lut ( .A(GNDI), .B(B0), .C(C0), .D(GNDI), 
    .Z(F0));
  vmuxregsre0064 \cd/CNT_VGA/counter_1249__i29 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0064 \cd/CNT_VGA/counter_1249__i28 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module cd_CNT_VGA_SLICE_363 ( input C1, B1, C0, B0, DI1, DI0, LSR, CLK, 
    output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  lut40143 \cd/CNT_VGA/i4336_2_lut ( .A(GNDI), .B(B1), .C(C1), .D(GNDI), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40143 \cd/CNT_VGA/i4335_2_lut ( .A(GNDI), .B(B0), .C(C0), .D(GNDI), 
    .Z(F0));
  vmuxregsre0064 \cd/CNT_VGA/counter_1249__i31 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0064 \cd/CNT_VGA/counter_1249__i30 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40143 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0C0C) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module cd_CLOCK_DIVIDER_CONFIG_SLICE_364 ( input D0, C0, DI0, CE, LSR, CLK, 
    output F0, Q0 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly, LSR_dly;

  lut40144 \cd/CLOCK_DIVIDER_CONFIG/i7545_2_lut ( .A(GNDI), .B(GNDI), .C(C0), 
    .D(D0), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \cd/CLOCK_DIVIDER_CONFIG/baudrate_reg_i0_i1 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40144 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h000F) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module cd_CLOCK_DIVIDER_CONFIG_SLICE_366 ( input D1, C1, D0, C0, DI1, DI0, CE, 
    CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40145 \cd/CLOCK_DIVIDER_CONFIG/i3139_2_lut ( .A(GNDI), .B(GNDI), .C(C1), 
    .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40144 \cd/CLOCK_DIVIDER_CONFIG/i7483_2_lut ( .A(GNDI), .B(GNDI), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0031 \cd/CLOCK_DIVIDER_CONFIG/baudrate_reg_i0_i4 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0045 \cd/CLOCK_DIVIDER_CONFIG/baudrate_reg_i0_i3 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40145 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0FF0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_367 ( input C0, A0, DI0, CE, LSR, CLK, output F0, Q0 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly, LSR_dly;

  lut40146 \vga/config1/i4242_2_lut_rep_236 ( .A(A0), .B(GNDI), .C(C0), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0125 \cd/CLOCK_DIVIDER_CONFIG/baudrate_reg_i0_i5 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (C0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40146 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0A0A) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_368 ( input D1, C1, B1, D0, C0, A0, DI0, M1, CE, CLK, output F0, 
    Q0, F1, Q1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, M1_dly, CE_dly;

  lut40147 \cd/CLOCK_DIVIDER_CONFIG/i3202_2_lut_3_lut ( .A(GNDI), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40148 \vga/config1/i4301_2_lut_3_lut ( .A(A0), .B(GNDI), .C(C0), .D(D0), 
    .Z(F0));
  vmuxregsre0031 \cd/CLOCK_DIVIDER_CONFIG/baudrate_reg_i0_i7 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0031 \cd/CLOCK_DIVIDER_CONFIG/baudrate_reg_i0_i6 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40147 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h000C) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40148 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFA0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_370 ( input C1, C0, B0, DI1, DI0, CE, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40149 \vga/config1/i1420_1_lut ( .A(GNDI), .B(GNDI), .C(C1), .D(GNDI), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40150 \cm/assignCM/i4148_2_lut ( .A(GNDI), .B(B0), .C(C0), .D(GNDI), 
    .Z(F0));
  vmuxregsre0045 \cd/CLOCK_DIVIDER_CONFIG/resolution_reg_i0_i1 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0045 \cd/CLOCK_DIVIDER_CONFIG/resolution_reg_i0_i0 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40149 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0F0F) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40150 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hF3F3) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_371 ( input B1, A1, B0, A0, DI0, M1, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, M1_dly;

  lut40151 i7547_2_lut_rep_161( .A(A1), .B(B1), .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40152 \cd/CNT_DB/clkout_I_0_2_lut ( .A(A0), .B(B0), .C(GNDI), .D(GNDI), 
    .Z(F0));
  vmuxregsre0031 \vga/config1/H_Count_Max_reg_i4 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0031 \cd/CNT_DB/clkout_17 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40151 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h4444) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40152 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h6666) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_372 ( input C1, A1, C0, A0, DI0, M1, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, M1_dly;

  lut40153 i7500_2_lut_rep_164( .A(A1), .B(GNDI), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40154 \cd/CNT_LM/clkout_I_0_2_lut ( .A(A0), .B(GNDI), .C(C0), .D(GNDI), 
    .Z(F0));
  vmuxregsre0031 \vga/config1/H_Left_Margin_reg_i5 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0031 \cd/CNT_LM/clkout_17 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40153 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h5050) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40154 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h5A5A) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_373 ( input D1, C1, B1, A1, D0, C0, A0, DI0, LSR, CLK, output F0, 
    Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, LSR_dly;

  lut40155 \FIFO_UART_CM/i479_2_lut_3_lut_4_lut_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40156 clkout_I_0_2_lut_3_lut( .A(A0), .B(GNDI), .C(C0), .D(D0), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0064 \cd/CNT_UART/clkout_17 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40155 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0100) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40156 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hA5AA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_374 ( input D1, C1, B1, A1, C0, A0, DI0, LSR, CLK, output F0, Q0, 
    F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, LSR_dly;

  lut40157 i2_3_lut_4_lut( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40154 \cd/CNT_VGA/clkout_I_0_2_lut ( .A(A0), .B(GNDI), .C(C0), .D(GNDI), 
    .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0064 \cd/CNT_VGA/clkout_17 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40157 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0040) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module cm_counterH_SLICE_375 ( input D1, B1, A1, D0, A0, DI0, CE, CLK, output 
    F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly;

  lut40158 \cm/counterH/i7527_2_lut_3_lut_3_lut ( .A(A1), .B(B1), .C(GNDI), 
    .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40159 \cm/counterH/i7472_2_lut_rep_168_2_lut ( .A(A0), .B(GNDI), .C(GNDI), 
    .D(D0), .Z(F0));
  vmuxregsre0031 \cm/counterH/Counter_Valid_reg_19 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40158 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFBB) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40159 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0055) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module cm_counterV_SLICE_376 ( input D1, C1, B1, C0, B0, DI0, CE, CLK, output 
    F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly;

  lut40116 \cm/counterV/i7524_2_lut_3_lut_3_lut ( .A(GNDI), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40160 \cm/counterV/i7475_2_lut_rep_167_2_lut ( .A(GNDI), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  vmuxregsre0031 \cm/counterV/Counter_Valid_reg_19 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40160 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0303) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module cm_assignCM_SLICE_378 ( input C1, A1, C0, A0, DI1, DI0, CE, CLK, 
    output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40161 \cm/assignCM/i4449_1_lut_2_lut ( .A(A1), .B(GNDI), .C(C1), .D(GNDI), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40162 \cm/assignCM/i4278_2_lut_rep_234 ( .A(A0), .B(GNDI), .C(C0), 
    .D(GNDI), .Z(F0));
  vmuxregsre0045 \cm/assignCM/H_BackPorch_reg_i0_i5 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0031 \cm/assignCM/H_BackPorch_reg_i0_i4 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40161 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0505) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40162 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFAFA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_379 ( input D0, A0, DI0, M1, CE, CLK, output F0, Q0, Q1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, M1_dly, CE_dly;

  lut40063 \vga/config1/i4241_2_lut_rep_230 ( .A(A0), .B(GNDI), .C(GNDI), 
    .D(D0), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0031 \cm/assignCM/H_BackPorch_reg_i0_i7 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0031 \cm/assignCM/H_BackPorch_reg_i0_i6 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module cm_assignCM_SLICE_381 ( input D0, C0, B0, A0, DI0, CE, CLK, output F0, 
    Q0 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly, CE_dly;

  lut40163 \cm/assignCM/i1484_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0031 \cm/assignCM/Current_Qudran_Config_reg_i0_i0 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40163 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hF4F0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module cm_assignCM_SLICE_407 ( input D0, C0, B0, A0, DI0, CE, CLK, output F0, 
    Q0 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly, CE_dly;

  lut40164 \cm/assignCM/i1804_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0031 \cm/assignCM/Current_Qudran_Config_reg_i0_i1 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40164 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hCCEC) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module cm_configCM_SLICE_422 ( input D1, A1, D0, C0, B0, A0, DI0, M0, CLK, 
    output OFX0, Q0 );
  wire   GNDI, \cm/configCM/SLICE_422/cm/configCM/SLICE_422_K1_H1 , 
         \cm/configCM/SLICE_422/cm/configCM/i7637/GATE_H0 , VCCI, DI0_dly, 
         CLK_dly;

  lut40165 \cm/configCM/SLICE_422_K1 ( .A(A1), .B(GNDI), .C(GNDI), .D(D1), 
    .Z(\cm/configCM/SLICE_422/cm/configCM/SLICE_422_K1_H1 ));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40166 \cm/configCM/i7637/GATE ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(\cm/configCM/SLICE_422/cm/configCM/i7637/GATE_H0 ));
  vmuxregsre0167 \cm/configCM/State_nxt_2__I_0_i1 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  selmux2 \cm/configCM/SLICE_422_K0K1MUX ( 
    .D0(\cm/configCM/SLICE_422/cm/configCM/i7637/GATE_H0 ), 
    .D1(\cm/configCM/SLICE_422/cm/configCM/SLICE_422_K1_H1 ), .SD(M0), 
    .Z(OFX0));

  specify
    (D1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40165 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h00AA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40166 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hA0BB) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module vmuxregsre0167 ( input D0, D1, SD, SP, CK, LSR, output Q );
  wire   GATE;

  AND2 INST50( .A(SP), .B(CK), .Z(GATE));
  FL1S1D INST01( .D0(D0), .D1(D1), .CK(GATE), .SD(SD), .CD(LSR), .Q(Q));
  defparam INST01.GSR = "DISABLED";
endmodule

module cm_configCM_SLICE_423 ( input D0, B0, A0, DI0, LSR, CLK, output F0, Q0 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, LSR_dly;

  lut40168 \cm/configCM/i4681_3_lut ( .A(A0), .B(B0), .C(GNDI), .D(D0), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0037 \cm/configCM/State_nxt_2__I_0_i2 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40168 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hAA33) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module cm_configCM_SLICE_424 ( input D1, B1, A1, D0, C0, B0, A0, DI0, CLK, 
    output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly;

  lut40169 \cm/configCM/i1_2_lut_3_lut_adj_41 ( .A(A1), .B(B1), .C(GNDI), 
    .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40170 \cm/configCM/i1_4_lut_4_lut_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  vmuxregsre0167 \cm/configCM/State_nxt_2__I_0_i3 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40169 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFDD) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40170 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h6602) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module cm_configCM_SLICE_425 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI0, LSR, 
    CLK, output F0, Q0, F1 );
  wire   VCCI, DI0_dly, CLK_dly, LSR_dly;

  lut40171 \cm/configCM/i20_3_lut_rep_185_4_lut_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40172 \cm/configCM/RXD_Data_reg_14__I_0_4_lut ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre \cm/configCM/Err_reg_144 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40171 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h11A8) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40172 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hEE2E) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_428 ( input D1, B1, A1, D0, C0, A0, DI1, DI0, LSR, CLK, output F0, 
    Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  lut40173 i4351_2_lut_3_lut( .A(A1), .B(B1), .C(GNDI), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40174 i4233_2_lut_3_lut( .A(A0), .B(GNDI), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0064 \cd/CNT_UART/counter_1250__i1 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0064 \cd/CNT_UART/counter_1250__i0 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40173 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hBB00) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40174 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hF050) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_429 ( input D1, B1, A1, D0, B0, A0, DI1, DI0, LSR, CLK, output F0, 
    Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  lut40173 i4353_2_lut_3_lut( .A(A1), .B(B1), .C(GNDI), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40175 i4352_2_lut_3_lut( .A(A0), .B(B0), .C(GNDI), .D(D0), .Z(F0));
  vmuxregsre0064 \cd/CNT_UART/counter_1250__i3 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0064 \cd/CNT_UART/counter_1250__i2 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40175 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h88CC) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_430 ( input D1, C1, B1, D0, B0, A0, DI1, DI0, LSR, CLK, output F0, 
    Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  lut40176 i4355_2_lut_3_lut( .A(GNDI), .B(B1), .C(C1), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40177 i4354_2_lut_3_lut( .A(A0), .B(B0), .C(GNDI), .D(D0), .Z(F0));
  vmuxregsre0064 \cd/CNT_UART/counter_1250__i5 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0064 \cd/CNT_UART/counter_1250__i4 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40176 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hF030) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40177 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hCC44) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_431 ( input D1, B1, A1, D0, B0, A0, DI1, DI0, LSR, CLK, output F0, 
    Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  lut40178 i4357_2_lut_3_lut( .A(A1), .B(B1), .C(GNDI), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40179 i4356_2_lut_3_lut( .A(A0), .B(B0), .C(GNDI), .D(D0), .Z(F0));
  vmuxregsre0064 \cd/CNT_UART/counter_1250__i7 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0064 \cd/CNT_UART/counter_1250__i6 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40178 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hDD00) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40179 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hAA22) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_432 ( input C1, B1, A1, D0, B0, A0, DI1, DI0, LSR, CLK, output F0, 
    Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  lut40180 i4359_2_lut_3_lut( .A(A1), .B(B1), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40177 i4358_2_lut_3_lut( .A(A0), .B(B0), .C(GNDI), .D(D0), .Z(F0));
  vmuxregsre0064 \cd/CNT_UART/counter_1250__i9 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0064 \cd/CNT_UART/counter_1250__i8 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40180 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hD0D0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_433 ( input D1, B1, A1, D0, B0, A0, DI1, DI0, LSR, CLK, output F0, 
    Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  lut40178 i4361_2_lut_3_lut( .A(A1), .B(B1), .C(GNDI), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40177 i4360_2_lut_3_lut( .A(A0), .B(B0), .C(GNDI), .D(D0), .Z(F0));
  vmuxregsre0064 \cd/CNT_UART/counter_1250__i11 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0064 \cd/CNT_UART/counter_1250__i10 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_434 ( input D1, B1, A1, D0, B0, A0, DI1, DI0, LSR, CLK, output F0, 
    Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  lut40177 i4363_2_lut_3_lut( .A(A1), .B(B1), .C(GNDI), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40181 i4362_2_lut_3_lut( .A(A0), .B(B0), .C(GNDI), .D(D0), .Z(F0));
  vmuxregsre0064 \cd/CNT_UART/counter_1250__i13 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0064 \cd/CNT_UART/counter_1250__i12 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40181 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h88AA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_435 ( input C1, B1, A1, C0, B0, A0, DI1, DI0, LSR, CLK, output F0, 
    Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  lut40182 i4365_2_lut_3_lut( .A(A1), .B(B1), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40183 i4364_2_lut_3_lut( .A(A0), .B(B0), .C(C0), .D(GNDI), .Z(F0));
  vmuxregsre0064 \cd/CNT_UART/counter_1250__i15 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0064 \cd/CNT_UART/counter_1250__i14 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40182 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h8C8C) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40183 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h8A8A) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_436 ( input D1, C1, B1, D0, C0, B0, DI1, DI0, LSR, CLK, output F0, 
    Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  lut40184 i4367_2_lut_3_lut( .A(GNDI), .B(B1), .C(C1), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40176 i4366_2_lut_3_lut( .A(GNDI), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0064 \cd/CNT_UART/counter_1250__i17 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0064 \cd/CNT_UART/counter_1250__i16 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40184 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hCC0C) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_437 ( input D1, C1, A1, D0, B0, A0, DI1, DI0, LSR, CLK, output F0, 
    Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  lut40185 i4369_2_lut_3_lut( .A(A1), .B(GNDI), .C(C1), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40175 i4368_2_lut_3_lut( .A(A0), .B(B0), .C(GNDI), .D(D0), .Z(F0));
  vmuxregsre0064 \cd/CNT_UART/counter_1250__i19 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0064 \cd/CNT_UART/counter_1250__i18 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40185 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hA0F0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_438 ( input C1, B1, A1, C0, B0, A0, DI1, DI0, LSR, CLK, output F0, 
    Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  lut40183 i4371_2_lut_3_lut( .A(A1), .B(B1), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40186 i4370_2_lut_3_lut( .A(A0), .B(B0), .C(C0), .D(GNDI), .Z(F0));
  vmuxregsre0064 \cd/CNT_UART/counter_1250__i21 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0064 \cd/CNT_UART/counter_1250__i20 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40186 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hB0B0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_439 ( input C1, B1, A1, C0, B0, A0, DI1, DI0, LSR, CLK, output F0, 
    Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  lut40187 i4373_2_lut_3_lut( .A(A1), .B(B1), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40187 i4372_2_lut_3_lut( .A(A0), .B(B0), .C(C0), .D(GNDI), .Z(F0));
  vmuxregsre0064 \cd/CNT_UART/counter_1250__i23 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0064 \cd/CNT_UART/counter_1250__i22 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40187 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hC4C4) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module uart_SAMPLER_SLICE_440 ( input D1, C1, A1, D0, C0, B0, A0, DI0, M0, CE, 
    CLK, output OFX0, Q0 );
  wire   GNDI, \uart/SAMPLER/SLICE_440/uart/SAMPLER/SLICE_440_K1_H1 , 
         \uart/SAMPLER/SLICE_440/uart/SAMPLER/nr_1_reg_3__I_0_i8/GATE_H0 , 
         VCCI, DI0_dly, CLK_dly, CE_dly;

  lut40188 \uart/SAMPLER/SLICE_440_K1 ( .A(A1), .B(GNDI), .C(C1), .D(D1), 
    .Z(\uart/SAMPLER/SLICE_440/uart/SAMPLER/SLICE_440_K1_H1 ));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40189 \uart/SAMPLER/nr_1_reg_3__I_0_i8/GATE ( .A(A0), .B(B0), .C(C0), 
    .D(D0), 
    .Z(\uart/SAMPLER/SLICE_440/uart/SAMPLER/nr_1_reg_3__I_0_i8/GATE_H0 ));
  vmuxregsre0031 \uart/SAMPLER/out_reg_44 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  selmux2 \uart/SAMPLER/SLICE_440_K0K1MUX ( 
    .D0(\uart/SAMPLER/SLICE_440/uart/SAMPLER/nr_1_reg_3__I_0_i8/GATE_H0 ), 
    .D1(\uart/SAMPLER/SLICE_440/uart/SAMPLER/SLICE_440_K1_H1 ), .SD(M0), 
    .Z(OFX0));

  specify
    (D1 => OFX0) = (0:0:0,0:0:0);
    (C1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40188 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h50F5) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40189 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0A8E) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module db_DB_DF_UART_SLICE_441 ( input D1, A1, D0, A0, DI1, DI0, CE, LSR, CLK, 
    output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40190 \db/DB_DF_UART/i7283_2_lut ( .A(A1), .B(GNDI), .C(GNDI), .D(D1), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40137 \db/DB_DF_UART/i7566_2_lut ( .A(A0), .B(GNDI), .C(GNDI), .D(D0), 
    .Z(F0));
  vmuxregsre \db/DB_DF_UART/ctr_ff_1255_1256__i2 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \db/DB_DF_UART/ctr_ff_1255_1256__i1 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40190 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFAA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module db_DB_DF_VGA_SLICE_442 ( input D1, A1, D0, A0, DI1, DI0, CE, LSR, CLK, 
    output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40191 \db/DB_DF_VGA/i7289_2_lut ( .A(A1), .B(GNDI), .C(GNDI), .D(D1), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40101 \db/DB_DF_VGA/i7575_2_lut ( .A(A0), .B(GNDI), .C(GNDI), .D(D0), 
    .Z(F0));
  vmuxregsre \db/DB_DF_VGA/ctr_ff_1257_1258__i2 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \db/DB_DF_VGA/ctr_ff_1257_1258__i1 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40191 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFAA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module db_DB_HS_SLICE_443 ( input B1, A1, C0, A0, DI1, DI0, CE, LSR, CLK, 
    output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40192 \db/DB_HS/i7277_2_lut ( .A(A1), .B(B1), .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40193 \db/DB_HS/i7580_2_lut ( .A(A0), .B(GNDI), .C(C0), .D(GNDI), .Z(F0));
  vmuxregsre \db/DB_HS/ctr_ff_1276_1277__i2 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \db/DB_HS/ctr_ff_1276_1277__i1 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40192 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hEEEE) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40193 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hF5F5) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module db_DB_VS_SLICE_444 ( input C1, A1, C0, A0, DI1, DI0, CE, LSR, CLK, 
    output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40162 \db/DB_VS/i7287_2_lut ( .A(A1), .B(GNDI), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40193 \db/DB_VS/i7561_2_lut ( .A(A0), .B(GNDI), .C(C0), .D(GNDI), .Z(F0));
  vmuxregsre \db/DB_VS/ctr_ff_1253_1254__i2 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \db/DB_VS/ctr_ff_1253_1254__i1 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module uart_SAMPLER_SLICE_445 ( input B1, A1, B0, A0, DI0, CE, CLK, output F0, 
    Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly;

  lut40194 \uart/SAMPLER/i6553_2_lut_rep_237 ( .A(A1), .B(B1), .C(GNDI), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40195 \uart/SAMPLER/i7573_2_lut ( .A(A0), .B(B0), .C(GNDI), .D(GNDI), 
    .Z(F0));
  vmuxregsre0031 \uart/SAMPLER/flag_reg_46 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40194 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h8888) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40195 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h1111) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module uart_UART_STATE_SLICE_454 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, 
    DI0, CE, LSR, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40196 \uart/UART_STATE/i1527_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40197 \uart/UART_STATE/i1_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0064 \uart/UART_STATE/state_reg_FSM__i3 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0064 \uart/UART_STATE/state_reg_FSM__i4 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40196 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hEAC0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40197 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h88C8) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_455 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, DI0, CE, LSR, 
    CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40198 i1_4_lut_adj_60( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40199 i146_3_lut_4_lut( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0200 \uart/UART_STATE/state_reg_FSM__i1 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0064 \uart/UART_STATE/state_reg_FSM__i2 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40198 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFEAA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40199 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0CAE) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module vmuxregsre0200 ( input D0, D1, SD, SP, CK, LSR, output Q );

  FL1P3BX INST01( .D0(D0), .D1(D1), .SP(SP), .CK(CK), .SD(SD), .PD(LSR), .Q(Q));
  defparam INST01.GSR = "DISABLED";
endmodule

module SLICE_456 ( input D1, C1, B1, A1, C0, B0, A0, DI0, CE, LSR, CLK, 
    output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly, LSR_dly;

  lut40201 i1_2_lut_3_lut_4_lut_adj_63( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40202 \uart/UART_STATE/i1_2_lut_3_lut ( .A(A0), .B(B0), .C(C0), .D(GNDI), 
    .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0064 \uart/UART_STATE/parity_check_reg_85 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40201 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h8C88) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40202 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h4848) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module uart_UART_STATE_SLICE_458 ( input D1, C1, A1, D0, A0, DI1, DI0, CE, LSR, 
    CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40203 \uart/UART_STATE/i4407_3_lut ( .A(A1), .B(GNDI), .C(C1), .D(D1), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40204 \uart/UART_STATE/i4249_2_lut ( .A(A0), .B(GNDI), .C(GNDI), .D(D0), 
    .Z(F0));
  vmuxregsre0064 \uart/UART_STATE/stop_iteration_step_reg_1259__i1 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0064 \uart/UART_STATE/stop_iteration_step_reg_1259__i0 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40203 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h50A0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40204 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h5500) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module uart_SAMPLER_SLICE_459 ( input B1, A1, A0, DI1, DI0, CE, LSR, CLK, 
    output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40152 \uart/SAMPLER/i6531_2_lut ( .A(A1), .B(B1), .C(GNDI), .D(GNDI), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40205 \uart/SAMPLER/i1_1_lut_rep_240 ( .A(A0), .B(GNDI), .C(GNDI), 
    .D(GNDI), .Z(F0));
  vmuxregsre \uart/SAMPLER/nr_0_reg_1263__i1 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \uart/SAMPLER/nr_0_reg_1263__i0 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40205 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h5555) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module uart_SAMPLER_SLICE_460 ( input D1, C1, B1, A1, D0, B0, A0, DI1, DI0, CE, 
    LSR, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40206 \uart/SAMPLER/i6545_3_lut_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40207 \uart/SAMPLER/i6538_2_lut_3_lut ( .A(A0), .B(B0), .C(GNDI), .D(D0), 
    .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \uart/SAMPLER/nr_0_reg_1263__i3 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \uart/SAMPLER/nr_0_reg_1263__i2 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40206 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h7F80) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40207 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h66AA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module uart_SAMPLER_SLICE_461 ( input C1, B1, A1, C0, A0, DI1, DI0, CE, LSR, 
    CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40208 \uart/SAMPLER/i6559_2_lut_3_lut ( .A(A1), .B(B1), .C(C1), .D(GNDI), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40209 \uart/SAMPLER/i6551_2_lut ( .A(A0), .B(GNDI), .C(C0), .D(GNDI), 
    .Z(F0));
  vmuxregsre \uart/SAMPLER/nr_1_reg_1262__i1 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \uart/SAMPLER/nr_1_reg_1262__i0 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40208 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h6A6A) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40209 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h5A5A) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module uart_SAMPLER_SLICE_462 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, DI0, 
    CE, LSR, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40210 \uart/SAMPLER/i6573_3_lut_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40211 \uart/SAMPLER/i6566_2_lut_3_lut_4_lut ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre \uart/SAMPLER/nr_1_reg_1262__i3 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \uart/SAMPLER/nr_1_reg_1262__i2 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40210 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h6AAA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40211 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h6AAA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module uart_SAMPLER_SLICE_463 ( input D1, A1, A0, DI1, DI0, CE, CLK, output F0, 
    Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40212 \uart/SAMPLER/i6502_2_lut ( .A(A1), .B(GNDI), .C(GNDI), .D(D1), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40205 \uart/SAMPLER/i6500_1_lut ( .A(A0), .B(GNDI), .C(GNDI), .D(GNDI), 
    .Z(F0));
  vmuxregsre0031 \uart/SAMPLER/val_reg_1264__i1 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0031 \uart/SAMPLER/val_reg_1264__i0 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40212 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h55AA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module uart_SAMPLER_SLICE_464 ( input D1, C1, B1, A1, D0, B0, A0, DI1, DI0, CE, 
    CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40213 \uart/SAMPLER/i6516_3_lut_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40214 \uart/SAMPLER/i6509_2_lut_3_lut ( .A(A0), .B(B0), .C(GNDI), .D(D0), 
    .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0031 \uart/SAMPLER/val_reg_1264__i3 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0031 \uart/SAMPLER/val_reg_1264__i2 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40213 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h7F80) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40214 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h66CC) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module uart_UART_STATE_SLICE_465 ( input C1, B1, A1, C0, A0, DI1, DI0, CE, LSR, 
    CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40215 \uart/UART_STATE/i4405_3_lut ( .A(A1), .B(B1), .C(C1), .D(GNDI), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40153 \uart/UART_STATE/i4248_2_lut ( .A(A0), .B(GNDI), .C(C0), .D(GNDI), 
    .Z(F0));
  vmuxregsre0064 \uart/UART_STATE/data_iteration_step_reg_1260__i1 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0064 \uart/UART_STATE/data_iteration_step_reg_1260__i0 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40215 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h6060) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module uart_UART_STATE_SLICE_466 ( input D1, C1, A1, D0, C0, B0, A0, DI0, CE, 
    LSR, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly, LSR_dly;

  lut40216 \uart/UART_STATE/i2_3_lut_adj_54 ( .A(A1), .B(GNDI), .C(C1), .D(D1), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40217 \uart/UART_STATE/i4406_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  vmuxregsre0064 \uart/UART_STATE/data_iteration_step_reg_1260__i2 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40216 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hA000) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40217 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h4888) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module uart_UART_STATE_SLICE_467 ( input D1, C1, A1, B0, A0, DI1, DI0, CE, LSR, 
    CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40218 \uart/UART_STATE/i1_4_lut_3_lut ( .A(A1), .B(GNDI), .C(C1), .D(D1), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40151 \uart/UART_STATE/i1_3_lut_4_lut_2_lut ( .A(A0), .B(B0), .C(GNDI), 
    .D(GNDI), .Z(F0));
  vmuxregsre0064 \uart/UART_STATE/wait_iteration_step_reg_1265__i1 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0064 \uart/UART_STATE/wait_iteration_step_reg_1265__i0 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40218 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h50A0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module uart_SAMPLER_SLICE_469 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI0, LSR, 
    CLK, output F0, Q0, F1 );
  wire   VCCI, DI0_dly, CLK_dly, LSR_dly;

  lut40219 \uart/SAMPLER/i31_3_lut_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40220 \uart/SAMPLER/i1_2_lut_rep_191_3_lut_4_lut ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre \uart/SAMPLER/valid_reg_45 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40219 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h666E) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40220 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h8000) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_470 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI0, CE, LSR, CLK, 
    output F0, Q0, F1 );
  wire   VCCI, DI0_dly, CLK_dly, CE_dly, LSR_dly;

  lut40221 \uart/SAMPLER/i1_3_lut_4_lut_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40222 i1_4_lut( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0064 \uart/UART_STATE/state_reg_FSM__i5 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40221 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hDC00) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40222 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hCE0A) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_494 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI0, CLK, output F0, 
    Q0, F1 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly;

  lut40223 i3_4_lut( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40224 \vga/assgncolor/i3_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0031 \vga/assgncolor/Active_reg_17 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40223 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFFE) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40224 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hE000) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module vga_config1_SLICE_498 ( input D0, C0, B0, DI0, CLK, output F0, Q0 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly;

  lut40225 \vga/config1/H_count_max_5__I_0_3_lut ( .A(GNDI), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0167 \vga/config1/H_Count_Max_nxt_11__I_0_i6 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40225 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h3F30) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_500 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, DI0, CLK, 
    output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  lut40226 \cm/assignCM/H_count_max_8__I_0_3_lut_4_lut ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40227 \vga/config1/H_count_max_7__I_0_3_lut_4_lut ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre0167 \vga/config1/H_Count_Max_nxt_11__I_0_i9 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0167 \vga/config1/H_Count_Max_nxt_11__I_0_i8 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40226 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h1F10) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40227 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0CAC) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module vga_config1_SLICE_501 ( input D1, C1, B1, A1, D0, C0, A0, DI1, DI0, CLK, 
    output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly;

  lut40228 \vga/config1/H_count_max_10__I_0_3_lut_4_lut ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40229 \vga/config1/H_count_max_9__I_0_3_lut ( .A(A0), .B(GNDI), .C(C0), 
    .D(D0), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0167 \vga/config1/H_Count_Max_nxt_11__I_0_i11 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0167 \vga/config1/H_Count_Max_nxt_11__I_0_i10 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40228 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h5C0C) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40229 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0AFA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module vga_config1_SLICE_502 ( input D0, C0, B0, A0, DI0, CLK, output F0, Q0 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly;

  lut40230 \vga/config1/H_count_max_11__I_0_3_lut_4_lut ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre0167 \vga/config1/H_Count_Max_nxt_11__I_0_i12 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40230 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h4F40) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module vga_config1_SLICE_504 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, DI0, 
    CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  lut40231 \vga/config1/H_left_margin_3__I_0_3_lut_4_lut ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40232 \vga/config1/H_left_margin_2__I_0_3_lut_4_lut ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre0167 \vga/config1/H_Left_Margin_nxt_8__I_0_i4 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0167 \vga/config1/H_Left_Margin_nxt_8__I_0_i3 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40231 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0ACA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40232 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h3A0A) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module vga_config1_SLICE_505 ( input D1, C1, B1, A1, C0, B0, A0, DI1, DI0, CLK, 
    output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly;

  lut40230 \vga/config1/H_left_margin_5__I_0_3_lut_4_lut ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40233 \vga/config1/H_left_margin_4__I_0_3_lut ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0167 \vga/config1/H_Left_Margin_nxt_8__I_0_i6 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0167 \vga/config1/H_Left_Margin_nxt_8__I_0_i5 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40233 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h3A3A) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module vga_config1_SLICE_506 ( input D1, C1, A1, D0, C0, B0, A0, DI1, DI0, CLK, 
    output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly;

  lut40234 \vga/config1/H_left_margin_7__I_0_3_lut ( .A(A1), .B(GNDI), .C(C1), 
    .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40235 \vga/config1/H_left_margin_6__I_0_3_lut_4_lut ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre0167 \vga/config1/H_Left_Margin_nxt_8__I_0_i8 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0167 \vga/config1/H_Left_Margin_nxt_8__I_0_i7 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40234 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h5F50) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40235 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h4F40) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module vga_config1_SLICE_507 ( input D0, C0, B0, A0, DI0, CLK, output F0, Q0 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly;

  lut40236 \vga/config1/H_left_margin_8__I_0_3_lut_4_lut ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre0167 \vga/config1/H_Left_Margin_nxt_8__I_0_i9 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40236 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h5C0C) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module vga_config1_SLICE_510 ( input D1, C1, B1, D0, C0, B0, A0, DI1, DI0, CLK, 
    output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly;

  lut40225 \vga/config1/H_right_margin_4__I_0_3_lut ( .A(GNDI), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40237 \vga/config1/H_right_margin_3__I_0_3_lut_4_lut ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre0167 \vga/config1/H_Right_Margin_nxt_10__I_0_i5 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0167 \vga/config1/H_Right_Margin_nxt_10__I_0_i4 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40237 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h6F60) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module vga_config1_SLICE_511 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, DI0, 
    CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  lut40235 \vga/config1/H_right_margin_6__I_0_3_lut_4_lut ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40238 \vga/config1/H_right_margin_5__I_0_3_lut_4_lut ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre0167 \vga/config1/H_Right_Margin_nxt_10__I_0_i7 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0167 \vga/config1/H_Right_Margin_nxt_10__I_0_i6 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40238 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h3ACA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module vga_config1_SLICE_512 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, DI0, 
    CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  lut40239 \vga/config1/H_right_margin_8__I_0_3_lut_4_lut ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40235 \vga/config1/H_right_margin_7__I_0_3_lut_4_lut ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre0167 \vga/config1/H_Right_Margin_nxt_10__I_0_i9 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0167 \vga/config1/H_Right_Margin_nxt_10__I_0_i8 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40239 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h3AFA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module vga_config1_SLICE_513 ( input D1, C1, B1, A1, D0, C0, A0, DI1, DI0, CLK, 
    output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly;

  lut40227 \vga/config1/H_right_margin_10__I_0_3_lut_4_lut ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40234 \vga/config1/H_right_margin_9__I_0_3_lut ( .A(A0), .B(GNDI), .C(C0), 
    .D(D0), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0167 \vga/config1/H_Right_Margin_nxt_10__I_0_i11 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0167 \vga/config1/H_Right_Margin_nxt_10__I_0_i10 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module vga_config1_SLICE_515 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, DI0, 
    CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  lut40240 \vga/config1/H_sync_pulse_2__I_0_3_lut_4_lut ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40241 \vga/config1/H_sync_pulse_1__I_0_3_lut_4_lut ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre0167 \vga/config1/H_Sync_Pulse_nxt_7__I_0_i3 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0167 \vga/config1/H_Sync_Pulse_nxt_7__I_0_i2 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40240 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h5CFC) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40241 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h7F70) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module vga_config1_SLICE_516 ( input C1, B1, A1, D0, C0, A0, DI1, DI0, CLK, 
    output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly;

  lut40242 \vga/config1/H_sync_pulse_4__I_0_3_lut ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40234 \vga/config1/H_sync_pulse_3__I_0_3_lut ( .A(A0), .B(GNDI), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0167 \vga/config1/H_Sync_Pulse_nxt_7__I_0_i5 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0167 \vga/config1/H_Sync_Pulse_nxt_7__I_0_i4 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40242 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h5C5C) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module vga_config1_SLICE_517 ( input D1, C1, B1, D0, C0, B0, A0, DI1, DI0, CLK, 
    output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly;

  lut40243 \vga/config1/H_sync_pulse_6__I_0_3_lut ( .A(GNDI), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40244 \vga/config1/H_sync_pulse_5__I_0_3_lut_4_lut ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre0167 \vga/config1/H_Sync_Pulse_nxt_7__I_0_i7 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0167 \vga/config1/H_Sync_Pulse_nxt_7__I_0_i6 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40243 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0CFC) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40244 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h2F20) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module vga_config1_SLICE_518 ( input D0, C0, B0, A0, DI0, CLK, output F0, Q0 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly;

  lut40236 \vga/config1/H_sync_pulse_7__I_0_3_lut_4_lut ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre0167 \vga/config1/H_Sync_Pulse_nxt_7__I_0_i8 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module vga_config1_SLICE_519 ( input D1, C1, B1, A1, C0, B0, DI0, LSR, CLK, 
    output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, LSR_dly;

  lut40245 \vga/config1/i7502_2_lut_2_lut_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40246 \vga/config1/i7491_2_lut_rep_213 ( .A(GNDI), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0167 \vga/config1/V_Left_Margin_nxt_5__N_981_I_0 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40245 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hF7FF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40246 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h3F3F) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module vga_config1_SLICE_521 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, DI0, 
    CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  lut40247 \vga/config1/V_count_max_2__I_0_3_lut_4_lut ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40227 \vga/config1/V_count_max_1__I_0_3_lut_4_lut ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre0167 \vga/config1/V_Count_Max_nxt_11__I_0_i3 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0167 \vga/config1/V_Count_Max_nxt_11__I_0_i2 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40247 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h3AFA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_522 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, DI0, CLK, 
    output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  lut40228 \vga/config1/V_count_max_4__I_0_3_lut_4_lut ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40248 \cm/assignCM/V_count_max_3__I_0_3_lut_4_lut ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre0167 \vga/config1/V_Count_Max_nxt_11__I_0_i5 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0167 \vga/config1/V_Count_Max_nxt_11__I_0_i4 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40248 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h1F10) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module vga_config1_SLICE_523 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, DI0, 
    CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  lut40232 \vga/config1/V_count_max_6__I_0_3_lut_4_lut ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40249 \vga/config1/V_count_max_5__I_0_3_lut_4_lut ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre0167 \vga/config1/V_Count_Max_nxt_11__I_0_i7 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0167 \vga/config1/V_Count_Max_nxt_11__I_0_i6 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40249 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h5CAC) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module vga_config1_SLICE_525 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, DI0, 
    CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  lut40250 \vga/config1/V_count_max_9__I_0_3_lut_4_lut ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40251 \vga/config1/V_count_max_8__I_0_3_lut_4_lut ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre0167 \vga/config1/V_Count_Max_nxt_11__I_0_i10 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0167 \vga/config1/V_Count_Max_nxt_11__I_0_i9 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40250 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h5CFC) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40251 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h3A0A) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module vga_config1_SLICE_527 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, DI0, 
    CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  lut40238 \vga/config1/V_left_margin_1__I_0_3_lut_4_lut ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40239 \vga/config1/V_left_margin_0__I_0_3_lut_4_lut ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre0167 \vga/config1/V_Left_Margin_nxt_5__I_0_i2 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0167 \vga/config1/V_Left_Margin_nxt_5__I_0_i1 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_528 ( input M1, M0, LSR, CLK, output F0, Q0, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, LSR_dly;

  lut40060 i2( .A(GNDI), .B(GNDI), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0037 \vga/config1/H_Count_Max_nxt_11__I_0_i1 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0037 \vga/config1/V_Left_Margin_nxt_5__I_0_i3 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module vga_config1_SLICE_529 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, DI0, 
    CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  lut40232 \vga/config1/V_left_margin_4__I_0_3_lut_4_lut ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40232 \vga/config1/V_left_margin_3__I_0_3_lut_4_lut ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre0167 \vga/config1/V_Left_Margin_nxt_5__I_0_i5 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0167 \vga/config1/V_Left_Margin_nxt_5__I_0_i4 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_530 ( input B1, A1, D0, C0, A0, DI0, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly;

  lut40152 LessThan_847_i11_2_lut_rep_222( .A(A1), .B(B1), .C(GNDI), .D(GNDI), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40229 \vga/config1/V_left_margin_5__I_0_3_lut ( .A(A0), .B(GNDI), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0167 \vga/config1/V_Left_Margin_nxt_5__I_0_i6 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module vga_config1_SLICE_531 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, DI0, 
    CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  lut40252 \vga/config1/V_right_margin_1__I_0_3_lut_4_lut ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40253 \vga/config1/V_right_margin_0__I_0_3_lut_4_lut ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre0167 \vga/config1/V_Right_Margin_nxt_9__I_0_i2 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0167 \vga/config1/V_Right_Margin_nxt_9__I_0_i1 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40252 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h6F60) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40253 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h7F70) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_532 ( input C1, B1, C0, B0, M1, M0, LSR, CLK, output F0, Q0, F1, 
    Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, LSR_dly;

  lut40096 \cm/assignCM/i1_2_lut ( .A(GNDI), .B(B1), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40254 LessThan_841_i13_2_lut_rep_232( .A(GNDI), .B(B0), .C(C0), .D(GNDI), 
    .Z(F0));
  vmuxregsre0037 \vga/config1/V_Right_Margin_nxt_9__I_0_i4 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0037 \vga/config1/V_Right_Margin_nxt_9__I_0_i3 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40254 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h3C3C) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module vga_config1_SLICE_533 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, DI0, 
    CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  lut40252 \vga/config1/V_right_margin_5__I_0_3_lut_4_lut ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40244 \vga/config1/V_right_margin_4__I_0_3_lut_4_lut ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre0167 \vga/config1/V_Right_Margin_nxt_9__I_0_i6 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0167 \vga/config1/V_Right_Margin_nxt_9__I_0_i5 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module vga_config1_SLICE_534 ( input D1, C1, A1, D0, C0, B0, A0, DI0, CLK, 
    output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly;

  lut40088 \vga/config1/i2_3_lut_rep_200 ( .A(A1), .B(GNDI), .C(C1), .D(D1), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40244 \vga/config1/V_right_margin_6__I_0_3_lut_4_lut ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre0167 \vga/config1/V_Right_Margin_nxt_9__I_0_i7 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_535 ( input D1, A1, C0, B0, M1, M0, LSR, CLK, output F0, Q0, F1, 
    Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, LSR_dly;

  lut40255 \vga/assgncolor/i2_2_lut ( .A(A1), .B(GNDI), .C(GNDI), .D(D1), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40254 LessThan_838_i13_2_lut_rep_226( .A(GNDI), .B(B0), .C(C0), .D(GNDI), 
    .Z(F0));
  vmuxregsre0037 \vga/config1/H_Count_Max_nxt_11__I_0_i2 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0037 \vga/config1/V_Right_Margin_nxt_9__I_0_i8 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40255 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hAA00) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module vga_config1_SLICE_536 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, DI0, 
    CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  lut40253 \vga/config1/V_right_margin_9__I_0_3_lut_4_lut ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40227 \vga/config1/V_right_margin_8__I_0_3_lut_4_lut ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre0167 \vga/config1/V_Right_Margin_nxt_9__I_0_i10 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0167 \vga/config1/V_Right_Margin_nxt_9__I_0_i9 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_537 ( input D1, C1, B1, A1, B0, A0, M1, M0, LSR, CLK, output F0, 
    Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, LSR_dly;

  lut40256 \uart/SAMPLER/i7485_3_lut_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40195 \uart/UART_STATE/i7570_2_lut_rep_204 ( .A(A0), .B(B0), .C(GNDI), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0037 \vga/config1/H_Count_Max_nxt_11__I_0_i3 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0037 \vga/config1/V_Sync_Pulse_nxt_7__I_0_i1 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40256 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h7DBE) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module vga_config1_SLICE_538 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, DI0, 
    CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  lut40231 \vga/config1/V_sync_pulse_2__I_0_3_lut_4_lut ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40232 \vga/config1/V_sync_pulse_1__I_0_3_lut_4_lut ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre0167 \vga/config1/V_Sync_Pulse_nxt_7__I_0_i3 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0167 \vga/config1/V_Sync_Pulse_nxt_7__I_0_i2 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_539 ( input D1, C1, B1, A1, D0, B0, M1, M0, LSR, CLK, output F0, 
    Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, LSR_dly;

  lut40257 LessThan_838_i4_4_lut( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40117 \db/DB_DF_UART/i4409_2_lut ( .A(GNDI), .B(B0), .C(GNDI), .D(D0), 
    .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0037 \vga/config1/V_Sync_Pulse_nxt_7__I_0_i5 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0037 \vga/config1/V_Sync_Pulse_nxt_7__I_0_i4 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40257 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h22B2) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_540 ( input C1, B1, D0, A0, M1, M0, LSR, CLK, output F0, Q0, F1, 
    Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, LSR_dly;

  lut40258 \db/DB_DF_VGA/i4429_2_lut ( .A(GNDI), .B(B1), .C(C1), .D(GNDI), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40255 \db/DB_HS/i4427_2_lut ( .A(A0), .B(GNDI), .C(GNDI), .D(D0), .Z(F0));
  vmuxregsre0037 \vga/config1/V_Sync_Pulse_nxt_7__I_0_i7 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0037 \vga/config1/V_Sync_Pulse_nxt_7__I_0_i6 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40258 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hC0C0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_541 ( input D1, A1, D0, A0, M1, M0, LSR, CLK, output F0, Q0, F1, 
    Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, LSR_dly;

  lut40255 \db/DB_VS/i4296_2_lut ( .A(A1), .B(GNDI), .C(GNDI), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40259 LessThan_847_i5_2_lut( .A(A0), .B(GNDI), .C(GNDI), .D(D0), .Z(F0));
  vmuxregsre0037 \vga/config1/H_Count_Max_nxt_11__I_0_i4 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0037 \vga/config1/V_Sync_Pulse_nxt_7__I_0_i8 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40259 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h55AA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_542 ( input D1, C1, B1, A1, D0, DI0, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly;

  lut40260 i1_2_lut_3_lut_4_lut_adj_62( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40261 \FIFO_UART_error/w_en_I_0_1_lut_rep_202 ( .A(GNDI), .B(GNDI), 
    .C(GNDI), .D(D0), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0045 \FIFO_UART_error/w_empty_reg_21 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40260 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0008) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40261 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h00FF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module LessThan_841_i16_SLICE_543 ( input D1, C1, B1, A1, D0, C0, B0, M0, 
    output OFX0 );
  wire   \LessThan_841_i16/SLICE_543/LessThan_841_i16/SLICE_543_K1_H1 , GNDI, 
         \LessThan_841_i16/SLICE_543/LessThan_841_i16/GATE_H0 ;

  lut40262 \LessThan_841_i16/SLICE_543_K1 ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(\LessThan_841_i16/SLICE_543/LessThan_841_i16/SLICE_543_K1_H1 ));
  lut40263 \LessThan_841_i16/GATE ( .A(GNDI), .B(B0), .C(C0), .D(D0), 
    .Z(\LessThan_841_i16/SLICE_543/LessThan_841_i16/GATE_H0 ));
  gnd DRIVEGND( .PWR0(GNDI));
  selmux2 \LessThan_841_i16/SLICE_543_K0K1MUX ( 
    .D0(\LessThan_841_i16/SLICE_543/LessThan_841_i16/GATE_H0 ), 
    .D1(\LessThan_841_i16/SLICE_543/LessThan_841_i16/SLICE_543_K1_H1 ), 
    .SD(M0), .Z(OFX0));

  specify
    (D1 => OFX0) = (0:0:0,0:0:0);
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40262 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFB40) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40263 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hC0FC) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module LessThan_838_i16_SLICE_544 ( input D1, C1, B1, A1, D0, B0, A0, M0, 
    output OFX0 );
  wire   \LessThan_838_i16/SLICE_544/LessThan_838_i16/SLICE_544_K1_H1 , GNDI, 
         \LessThan_838_i16/SLICE_544/LessThan_838_i16/GATE_H0 ;

  lut40264 \LessThan_838_i16/SLICE_544_K1 ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(\LessThan_838_i16/SLICE_544/LessThan_838_i16/SLICE_544_K1_H1 ));
  lut40265 \LessThan_838_i16/GATE ( .A(A0), .B(B0), .C(GNDI), .D(D0), 
    .Z(\LessThan_838_i16/SLICE_544/LessThan_838_i16/GATE_H0 ));
  gnd DRIVEGND( .PWR0(GNDI));
  selmux2 \LessThan_838_i16/SLICE_544_K0K1MUX ( 
    .D0(\LessThan_838_i16/SLICE_544/LessThan_838_i16/GATE_H0 ), 
    .D1(\LessThan_838_i16/SLICE_544/LessThan_838_i16/SLICE_544_K1_H1 ), 
    .SD(M0), .Z(OFX0));

  specify
    (D1 => OFX0) = (0:0:0,0:0:0);
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40264 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFD08) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40265 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hDD44) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module LessThan_847_i12_SLICE_545 ( input D1, B1, A1, C0, B0, A0, M0, output 
    OFX0 );
  wire   GNDI, \LessThan_847_i12/SLICE_545/LessThan_847_i12/SLICE_545_K1_H1 , 
         \LessThan_847_i12/SLICE_545/LessThan_847_i12/GATE_H0 ;

  lut40266 \LessThan_847_i12/SLICE_545_K1 ( .A(A1), .B(B1), .C(GNDI), .D(D1), 
    .Z(\LessThan_847_i12/SLICE_545/LessThan_847_i12/SLICE_545_K1_H1 ));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40267 \LessThan_847_i12/GATE ( .A(A0), .B(B0), .C(C0), .D(GNDI), 
    .Z(\LessThan_847_i12/SLICE_545/LessThan_847_i12/GATE_H0 ));
  selmux2 \LessThan_847_i12/SLICE_545_K0K1MUX ( 
    .D0(\LessThan_847_i12/SLICE_545/LessThan_847_i12/GATE_H0 ), 
    .D1(\LessThan_847_i12/SLICE_545/LessThan_847_i12/SLICE_545_K1_H1 ), 
    .SD(M0), .Z(OFX0));

  specify
    (D1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40266 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h88EE) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40267 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hB2B2) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module cm_configCM_i7676_SLICE_546 ( input D1, C1, B1, A1, D0, C0, A0, M0, 
    output OFX0 );
  wire   \cm/configCM/i7676/SLICE_546/cm/configCM/i7676/SLICE_546_K1_H1 , GNDI, 
         \cm/configCM/i7676/SLICE_546/cm/configCM/i7676/GATE_H0 ;

  lut40268 \cm/configCM/i7676/SLICE_546_K1 ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(\cm/configCM/i7676/SLICE_546/cm/configCM/i7676/SLICE_546_K1_H1 ));
  lut40269 \cm/configCM/i7676/GATE ( .A(A0), .B(GNDI), .C(C0), .D(D0), 
    .Z(\cm/configCM/i7676/SLICE_546/cm/configCM/i7676/GATE_H0 ));
  gnd DRIVEGND( .PWR0(GNDI));
  selmux2 \cm/configCM/i7676/SLICE_546_K0K1MUX ( 
    .D0(\cm/configCM/i7676/SLICE_546/cm/configCM/i7676/GATE_H0 ), 
    .D1(\cm/configCM/i7676/SLICE_546/cm/configCM/i7676/SLICE_546_K1_H1 ), 
    .SD(M0), .Z(OFX0));

  specify
    (D1 => OFX0) = (0:0:0,0:0:0);
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40268 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h20A8) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40269 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h00A0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module cm_assignCM_mux_742_i2_SLICE_547 ( input D1, C1, B1, A1, C0, B0, A0, M0, 
    output OFX0 );
  wire   
         \cm/assignCM/mux_742_i2/SLICE_547/cm/assignCM/mux_742_i2/SLICE_547_K1_H1 
         , GNDI, 
         \cm/assignCM/mux_742_i2/SLICE_547/cm/assignCM/mux_742_i2/GATE_H0 ;

  lut40270 \cm/assignCM/mux_742_i2/SLICE_547_K1 ( .A(A1), .B(B1), .C(C1), 
    .D(D1), 
    .Z(\cm/assignCM/mux_742_i2/SLICE_547/cm/assignCM/mux_742_i2/SLICE_547_K1_H1 ));
  lut40271 \cm/assignCM/mux_742_i2/GATE ( .A(A0), .B(B0), .C(C0), .D(GNDI), 
    .Z(\cm/assignCM/mux_742_i2/SLICE_547/cm/assignCM/mux_742_i2/GATE_H0 ));
  gnd DRIVEGND( .PWR0(GNDI));
  selmux2 \cm/assignCM/mux_742_i2/SLICE_547_K0K1MUX ( 
    .D0(\cm/assignCM/mux_742_i2/SLICE_547/cm/assignCM/mux_742_i2/GATE_H0 ), 
    .D1(\cm/assignCM/mux_742_i2/SLICE_547/cm/assignCM/mux_742_i2/SLICE_547_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (D1 => OFX0) = (0:0:0,0:0:0);
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40270 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h2AAA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40271 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hB8B8) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module cm_assignCM_mux_742_i11_SLICE_548 ( input D1, C1, B1, A1, D0, C0, B0, 
    M0, output OFX0 );
  wire   
         \cm/assignCM/mux_742_i11/SLICE_548/cm/assignCM/mux_742_i11/SLICE_548_K1_H1 
         , GNDI, 
         \cm/assignCM/mux_742_i11/SLICE_548/cm/assignCM/mux_742_i11/GATE_H0 ;

  lut40272 \cm/assignCM/mux_742_i11/SLICE_548_K1 ( .A(A1), .B(B1), .C(C1), 
    .D(D1), 
    .Z(\cm/assignCM/mux_742_i11/SLICE_548/cm/assignCM/mux_742_i11/SLICE_548_K1_H1 )
    );
  lut40076 \cm/assignCM/mux_742_i11/GATE ( .A(GNDI), .B(B0), .C(C0), .D(D0), 
    .Z(\cm/assignCM/mux_742_i11/SLICE_548/cm/assignCM/mux_742_i11/GATE_H0 ));
  gnd DRIVEGND( .PWR0(GNDI));
  selmux2 \cm/assignCM/mux_742_i11/SLICE_548_K0K1MUX ( 
    .D0(\cm/assignCM/mux_742_i11/SLICE_548/cm/assignCM/mux_742_i11/GATE_H0 ), 
    .D1(\cm/assignCM/mux_742_i11/SLICE_548/cm/assignCM/mux_742_i11/SLICE_548_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (D1 => OFX0) = (0:0:0,0:0:0);
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40272 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h4CCC) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module cm_assignCM_mux_742_i10_SLICE_549 ( input D1, C1, B1, A1, D0, C0, B0, 
    M0, output OFX0 );
  wire   
         \cm/assignCM/mux_742_i10/SLICE_549/cm/assignCM/mux_742_i10/SLICE_549_K1_H1 
         , GNDI, 
         \cm/assignCM/mux_742_i10/SLICE_549/cm/assignCM/mux_742_i10/GATE_H0 ;

  lut40273 \cm/assignCM/mux_742_i10/SLICE_549_K1 ( .A(A1), .B(B1), .C(C1), 
    .D(D1), 
    .Z(\cm/assignCM/mux_742_i10/SLICE_549/cm/assignCM/mux_742_i10/SLICE_549_K1_H1 )
    );
  lut40274 \cm/assignCM/mux_742_i10/GATE ( .A(GNDI), .B(B0), .C(C0), .D(D0), 
    .Z(\cm/assignCM/mux_742_i10/SLICE_549/cm/assignCM/mux_742_i10/GATE_H0 ));
  gnd DRIVEGND( .PWR0(GNDI));
  selmux2 \cm/assignCM/mux_742_i10/SLICE_549_K0K1MUX ( 
    .D0(\cm/assignCM/mux_742_i10/SLICE_549/cm/assignCM/mux_742_i10/GATE_H0 ), 
    .D1(\cm/assignCM/mux_742_i10/SLICE_549/cm/assignCM/mux_742_i10/SLICE_549_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (D1 => OFX0) = (0:0:0,0:0:0);
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40273 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h70F0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40274 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFC0C) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module cm_assignCM_mux_742_i9_SLICE_550 ( input D1, C1, B1, A1, D0, C0, A0, M0, 
    output OFX0 );
  wire   
         \cm/assignCM/mux_742_i9/SLICE_550/cm/assignCM/mux_742_i9/SLICE_550_K1_H1 
         , GNDI, 
         \cm/assignCM/mux_742_i9/SLICE_550/cm/assignCM/mux_742_i9/GATE_H0 ;

  lut40275 \cm/assignCM/mux_742_i9/SLICE_550_K1 ( .A(A1), .B(B1), .C(C1), 
    .D(D1), 
    .Z(\cm/assignCM/mux_742_i9/SLICE_550/cm/assignCM/mux_742_i9/SLICE_550_K1_H1 ));
  lut40276 \cm/assignCM/mux_742_i9/GATE ( .A(A0), .B(GNDI), .C(C0), .D(D0), 
    .Z(\cm/assignCM/mux_742_i9/SLICE_550/cm/assignCM/mux_742_i9/GATE_H0 ));
  gnd DRIVEGND( .PWR0(GNDI));
  selmux2 \cm/assignCM/mux_742_i9/SLICE_550_K0K1MUX ( 
    .D0(\cm/assignCM/mux_742_i9/SLICE_550/cm/assignCM/mux_742_i9/GATE_H0 ), 
    .D1(\cm/assignCM/mux_742_i9/SLICE_550/cm/assignCM/mux_742_i9/SLICE_550_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (D1 => OFX0) = (0:0:0,0:0:0);
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40275 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h2AAA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40276 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hAFA0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module cm_assignCM_mux_742_i7_SLICE_551 ( input D1, C1, B1, A1, D0, C0, B0, M0, 
    output OFX0 );
  wire   
         \cm/assignCM/mux_742_i7/SLICE_551/cm/assignCM/mux_742_i7/SLICE_551_K1_H1 
         , GNDI, 
         \cm/assignCM/mux_742_i7/SLICE_551/cm/assignCM/mux_742_i7/GATE_H0 ;

  lut40277 \cm/assignCM/mux_742_i7/SLICE_551_K1 ( .A(A1), .B(B1), .C(C1), 
    .D(D1), 
    .Z(\cm/assignCM/mux_742_i7/SLICE_551/cm/assignCM/mux_742_i7/SLICE_551_K1_H1 ));
  lut40278 \cm/assignCM/mux_742_i7/GATE ( .A(GNDI), .B(B0), .C(C0), .D(D0), 
    .Z(\cm/assignCM/mux_742_i7/SLICE_551/cm/assignCM/mux_742_i7/GATE_H0 ));
  gnd DRIVEGND( .PWR0(GNDI));
  selmux2 \cm/assignCM/mux_742_i7/SLICE_551_K0K1MUX ( 
    .D0(\cm/assignCM/mux_742_i7/SLICE_551/cm/assignCM/mux_742_i7/GATE_H0 ), 
    .D1(\cm/assignCM/mux_742_i7/SLICE_551/cm/assignCM/mux_742_i7/SLICE_551_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (D1 => OFX0) = (0:0:0,0:0:0);
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40277 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h2AAA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40278 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hF3C0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module cm_assignCM_mux_742_i6_SLICE_552 ( input D1, C1, B1, A1, D0, C0, A0, M0, 
    output OFX0 );
  wire   
         \cm/assignCM/mux_742_i6/SLICE_552/cm/assignCM/mux_742_i6/SLICE_552_K1_H1 
         , GNDI, 
         \cm/assignCM/mux_742_i6/SLICE_552/cm/assignCM/mux_742_i6/GATE_H0 ;

  lut40279 \cm/assignCM/mux_742_i6/SLICE_552_K1 ( .A(A1), .B(B1), .C(C1), 
    .D(D1), 
    .Z(\cm/assignCM/mux_742_i6/SLICE_552/cm/assignCM/mux_742_i6/SLICE_552_K1_H1 ));
  lut40280 \cm/assignCM/mux_742_i6/GATE ( .A(A0), .B(GNDI), .C(C0), .D(D0), 
    .Z(\cm/assignCM/mux_742_i6/SLICE_552/cm/assignCM/mux_742_i6/GATE_H0 ));
  gnd DRIVEGND( .PWR0(GNDI));
  selmux2 \cm/assignCM/mux_742_i6/SLICE_552_K0K1MUX ( 
    .D0(\cm/assignCM/mux_742_i6/SLICE_552/cm/assignCM/mux_742_i6/GATE_H0 ), 
    .D1(\cm/assignCM/mux_742_i6/SLICE_552/cm/assignCM/mux_742_i6/SLICE_552_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (D1 => OFX0) = (0:0:0,0:0:0);
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40279 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h4CCC) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40280 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFA0A) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module cm_assignCM_mux_742_i3_SLICE_553 ( input D1, C1, B1, A1, D0, C0, B0, M0, 
    output OFX0 );
  wire   
         \cm/assignCM/mux_742_i3/SLICE_553/cm/assignCM/mux_742_i3/SLICE_553_K1_H1 
         , GNDI, 
         \cm/assignCM/mux_742_i3/SLICE_553/cm/assignCM/mux_742_i3/GATE_H0 ;

  lut40277 \cm/assignCM/mux_742_i3/SLICE_553_K1 ( .A(A1), .B(B1), .C(C1), 
    .D(D1), 
    .Z(\cm/assignCM/mux_742_i3/SLICE_553/cm/assignCM/mux_742_i3/SLICE_553_K1_H1 ));
  lut40076 \cm/assignCM/mux_742_i3/GATE ( .A(GNDI), .B(B0), .C(C0), .D(D0), 
    .Z(\cm/assignCM/mux_742_i3/SLICE_553/cm/assignCM/mux_742_i3/GATE_H0 ));
  gnd DRIVEGND( .PWR0(GNDI));
  selmux2 \cm/assignCM/mux_742_i3/SLICE_553_K0K1MUX ( 
    .D0(\cm/assignCM/mux_742_i3/SLICE_553/cm/assignCM/mux_742_i3/GATE_H0 ), 
    .D1(\cm/assignCM/mux_742_i3/SLICE_553/cm/assignCM/mux_742_i3/SLICE_553_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (D1 => OFX0) = (0:0:0,0:0:0);
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module cm_assignCM_i7593_SLICE_554 ( input C1, A1, D0, C0, B0, A0, M0, output 
    OFX0 );
  wire   GNDI, \cm/assignCM/i7593/SLICE_554/cm/assignCM/i7593/SLICE_554_K1_H1 , 
         \cm/assignCM/i7593/SLICE_554/cm/assignCM/i7593/GATE_H0 ;

  lut40281 \cm/assignCM/i7593/SLICE_554_K1 ( .A(A1), .B(GNDI), .C(C1), 
    .D(GNDI), 
    .Z(\cm/assignCM/i7593/SLICE_554/cm/assignCM/i7593/SLICE_554_K1_H1 ));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40282 \cm/assignCM/i7593/GATE ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(\cm/assignCM/i7593/SLICE_554/cm/assignCM/i7593/GATE_H0 ));
  selmux2 \cm/assignCM/i7593/SLICE_554_K0K1MUX ( 
    .D0(\cm/assignCM/i7593/SLICE_554/cm/assignCM/i7593/GATE_H0 ), 
    .D1(\cm/assignCM/i7593/SLICE_554/cm/assignCM/i7593/SLICE_554_K1_H1 ), 
    .SD(M0), .Z(OFX0));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40281 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hAFAF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40282 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h4CCC) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module cm_assignCM_i7674_SLICE_555 ( input D1, C1, B1, A1, D0, C0, A0, M0, 
    output OFX0 );
  wire   \cm/assignCM/i7674/SLICE_555/cm/assignCM/i7674/SLICE_555_K1_H1 , GNDI, 
         \cm/assignCM/i7674/SLICE_555/cm/assignCM/i7674/GATE_H0 ;

  lut40283 \cm/assignCM/i7674/SLICE_555_K1 ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(\cm/assignCM/i7674/SLICE_555/cm/assignCM/i7674/SLICE_555_K1_H1 ));
  lut40284 \cm/assignCM/i7674/GATE ( .A(A0), .B(GNDI), .C(C0), .D(D0), 
    .Z(\cm/assignCM/i7674/SLICE_555/cm/assignCM/i7674/GATE_H0 ));
  gnd DRIVEGND( .PWR0(GNDI));
  selmux2 \cm/assignCM/i7674/SLICE_555_K0K1MUX ( 
    .D0(\cm/assignCM/i7674/SLICE_555/cm/assignCM/i7674/GATE_H0 ), 
    .D1(\cm/assignCM/i7674/SLICE_555/cm/assignCM/i7674/SLICE_555_K1_H1 ), 
    .SD(M0), .Z(OFX0));

  specify
    (D1 => OFX0) = (0:0:0,0:0:0);
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40283 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0007) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40284 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h005F) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i7672_SLICE_556 ( input B1, D0, C0, B0, A0, M0, output OFX0 );
  wire   GNDI, \i7672/SLICE_556/i7672/SLICE_556_K1_H1 , 
         \i7672/SLICE_556/i7672/GATE_H0 ;

  lut40285 \i7672/SLICE_556_K1 ( .A(GNDI), .B(B1), .C(GNDI), .D(GNDI), 
    .Z(\i7672/SLICE_556/i7672/SLICE_556_K1_H1 ));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40286 \i7672/GATE ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(\i7672/SLICE_556/i7672/GATE_H0 ));
  selmux2 \i7672/SLICE_556_K0K1MUX ( .D0(\i7672/SLICE_556/i7672/GATE_H0 ), 
    .D1(\i7672/SLICE_556/i7672/SLICE_556_K1_H1 ), .SD(M0), .Z(OFX0));

  specify
    (B1 => OFX0) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40285 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h3333) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40286 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h3363) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i111_SLICE_557 ( input D1, C1, B1, A1, D0, C0, B0, A0, M0, output OFX0 );
  wire   \i111/SLICE_557/i111/SLICE_557_K1_H1 , \i111/SLICE_557/i111/GATE_H0 ;

  lut40287 \i111/SLICE_557_K1 ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(\i111/SLICE_557/i111/SLICE_557_K1_H1 ));
  lut40288 \i111/GATE ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(\i111/SLICE_557/i111/GATE_H0 ));
  selmux2 \i111/SLICE_557_K0K1MUX ( .D0(\i111/SLICE_557/i111/GATE_H0 ), 
    .D1(\i111/SLICE_557/i111/SLICE_557_K1_H1 ), .SD(M0), .Z(OFX0));

  specify
    (D1 => OFX0) = (0:0:0,0:0:0);
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40287 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0800) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40288 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hE020) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_558 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40289 i1_2_lut_rep_160_3_lut_4_lut( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40290 i3695_4_lut( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40289 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0400) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40290 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hE4A0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module uart_UART_STATE_SLICE_559 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    output F0, F1 );

  lut40291 \uart/UART_STATE/i168_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40292 \uart/UART_STATE/i1_2_lut_rep_182_3_lut_4_lut ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40291 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h8F0F) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40292 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFF7B) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module cm_configCM_SLICE_560 ( input D1, C1, B1, A1, D0, C0, B0, A0, M1, M0, 
    CE, LSR, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly, LSR_dly;

  lut40293 \cm/configCM/i1_4_lut_adj_52 ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40294 \cm/configCM/i1_4_lut_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  vmuxregsre \cm/configCM/RXD_Data_reg_i5 ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \cm/configCM/RXD_Data_reg_i4 ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40293 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hA030) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40294 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h4008) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module cm_configCM_SLICE_561 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, 
    F1 );

  lut40295 \cm/configCM/i1_2_lut_rep_170_3_lut_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40296 \cm/configCM/i2_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40295 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hB1FD) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40296 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0002) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module cm_configCM_SLICE_562 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, 
    F1 );

  lut40297 \cm/configCM/i2_2_lut_rep_181_3_lut_4_lut_4_lut ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40298 \cm/configCM/i7327_3_lut_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40297 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0020) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40298 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFEF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module cm_configCM_SLICE_563 ( input C1, B1, A1, D0, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40299 \cm/configCM/i1_2_lut_rep_193_3_lut ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40300 \cm/configCM/i2_3_lut_4_lut_adj_31 ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40299 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h6060) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40300 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0010) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module cm_configCM_SLICE_564 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, 
    F1 );

  lut40301 \cm/configCM/i1_4_lut_adj_36 ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40302 \cm/configCM/i7533_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40301 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hF010) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40302 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0031) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module cm_configCM_SLICE_565 ( input D1, C1, B1, A1, D0, C0, B0, A0, M1, M0, 
    CE, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40303 \cm/configCM/i1_2_lut_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40304 \cm/configCM/i1_4_lut_adj_39 ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  vmuxregsre0031 \cm/configCM/c_data_reg_i13 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0031 \cm/configCM/c_data_reg_i12 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40303 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hA088) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40304 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hDC50) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module cm_assignCM_SLICE_566 ( input D1, C1, B1, A1, D0, C0, B0, A0, M1, M0, 
    CE, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40305 \cm/assignCM/i7477_2_lut_3_lut_4_lut_4_lut_4_lut_4_lut ( .A(A1), 
    .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40306 \cm/assignCM/i3_4_lut_adj_26 ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  vmuxregsre0031 \cm/assignCM/Left_DOWN_reg_i0_i7 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0031 \cm/assignCM/Left_DOWN_reg_i0_i6 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40305 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFEFA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40306 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0800) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_567 ( input D1, C1, B1, A1, D0, C0, B0, A0, M1, M0, CLK, output 
    F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  lut40307 \cd/CLOCK_DIVIDER_CONFIG/i2_3_lut_rep_194_4_lut ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40308 i1_2_lut_3_lut_4_lut( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0031 \db/DB_VS/button_ff_19 ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0031 \db/DB_HS/button_ff_19 ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40307 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFDF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40308 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h1000) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_568 ( input D1, C1, B1, A1, D0, C0, B0, M0, CE, CLK, output F0, 
    Q0, F1 );
  wire   GNDI, VCCI, M0_dly, CLK_dly, CE_dly;

  lut40309 \cd/CLOCK_DIVIDER_CONFIG/i3203_2_lut_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40310 i1_2_lut_rep_159_3_lut( .A(GNDI), .B(B0), .C(C0), .D(D0), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0031 \db/DB_VS/sync_ff_18 ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40309 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0040) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40310 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h3000) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_569 ( input D1, C1, D0, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40145 LessThan_841_i9_2_lut_rep_235( .A(GNDI), .B(GNDI), .C(C1), .D(D1), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40311 i7548_4_lut( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40311 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFF2) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_570 ( input D1, A1, D0, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40212 LessThan_838_i9_2_lut_rep_228( .A(A1), .B(GNDI), .C(GNDI), .D(D1), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40312 i7504_4_lut( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40312 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFAE) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_571 ( input C1, B1, D0, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40254 LessThan_847_i9_2_lut_rep_224( .A(GNDI), .B(B1), .C(C1), .D(GNDI), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40313 i7484_4_lut( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40313 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFF01) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_572 ( input D1, C1, B1, A1, D0, C0, output F0, F1 );
  wire   GNDI;

  lut40314 i1_4_lut_adj_66( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40069 i1_2_lut_rep_201( .A(GNDI), .B(GNDI), .C(C0), .D(D0), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40314 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h00E0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_573 ( input D1, A1, D0, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40255 \uart/SAMPLER/i1_2_lut_rep_216 ( .A(A1), .B(GNDI), .C(GNDI), .D(D1), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40315 i1_2_lut_rep_178_3_lut_4_lut( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40315 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0800) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_574 ( input D1, C1, B1, A1, D0, C0, B0, output F0, F1 );
  wire   GNDI;

  lut40102 \uart/UART_STATE/i1_2_lut_3_lut_4_lut_4_lut ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40316 i7564_2_lut_rep_183_3_lut( .A(GNDI), .B(B0), .C(C0), .D(D0), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40316 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFCF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_575 ( input C1, B1, D0, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40067 i4169_2_lut_rep_166( .A(GNDI), .B(B1), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40317 i2_2_lut_3_lut_4_lut( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40317 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h1000) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_576 ( input D1, B1, A1, D0, C0, B0, A0, M0, CE, CLK, output F0, 
    Q0, F1 );
  wire   GNDI, VCCI, M0_dly, CLK_dly, CE_dly;

  lut40318 i1_2_lut_rep_190_3_lut( .A(A1), .B(B1), .C(GNDI), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40319 i1_2_lut_3_lut_4_lut_adj_61( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0031 \db/DB_HS/sync_ff_18 ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40318 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hDDCC) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40319 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h2000) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_577 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40320 \uart/SAMPLER/i1_3_lut_4_lut_4_lut_adj_53 ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40321 i1_2_lut_rep_163_3_lut_4_lut( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40320 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hB0A0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40321 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0008) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_578 ( input D1, A1, D0, C0, B0, A0, M1, M0, CE, CLK, output F0, 
    Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40255 \uart/SAMPLER/i1360_2_lut_rep_215 ( .A(A1), .B(GNDI), .C(GNDI), 
    .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40322 \FIFO_UART_error/i1_2_lut_3_lut_4_lut_4_lut ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre0031 \FIFO_CM_error/r_data_reg_i0_i3 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0031 \FIFO_CM_error/r_data_reg_i0_i2 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40322 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h2000) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_579 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40323 i3_4_lut_adj_65( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40324 i7285_2_lut_rep_162_3_lut_4_lut( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40323 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h4440) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40324 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFEFF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module uart_SLICE_580 ( input D1, C1, B1, A1, D0, B0, M0, CE, CLK, output F0, 
    Q0, F1 );
  wire   GNDI, VCCI, M0_dly, CLK_dly, CE_dly;

  lut40325 \uart/UART_CONFIG/i1_2_lut_3_lut_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40326 \uart/UART_STATE/data_I_0_100_2_lut_rep_229 ( .A(GNDI), .B(B0), 
    .C(GNDI), .D(D0), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0031 \uart/UART_CONFIG/parity_bit_reg_i0_i0 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40325 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hC8CC) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40326 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h33CC) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module uart_SLICE_581 ( input D1, C1, B1, A1, D0, A0, M0, CE, CLK, output F0, 
    Q0, F1 );
  wire   GNDI, VCCI, M0_dly, CLK_dly, CE_dly;

  lut40327 \uart/UART_STATE/i1_2_lut_3_lut_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40190 \uart/UART_STATE/equal_20_i3_2_lut_rep_239 ( .A(A0), .B(GNDI), 
    .C(GNDI), .D(D0), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0031 \uart/UART_CONFIG/stop_bit_reg_20 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40327 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0600) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module uart_UART_STATE_SLICE_582 ( input D1, C1, B1, D0, C0, B0, A0, output F0, 
    F1 );
  wire   GNDI;

  lut40328 \uart/UART_STATE/i4246_2_lut_rep_198_3_lut ( .A(GNDI), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40329 \uart/UART_STATE/i7465_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40328 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFC00) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40329 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hF7B3) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module uart_UART_STATE_SLICE_583 ( input D1, C1, B1, A1, D0, C0, output F0, F1 );
  wire   GNDI;

  lut40330 \uart/UART_STATE/n473_bdd_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40331 \uart/UART_STATE/n150_bdd_2_lut_7703 ( .A(GNDI), .B(GNDI), .C(C0), 
    .D(D0), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40330 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hAFAB) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40331 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hF000) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_584 ( input D1, C1, B1, A1, C0, A0, output F0, F1 );
  wire   GNDI;

  lut40332 \cd/CLOCK_DIVIDER_CONFIG/i1_2_lut_rep_171_3_lut_4_lut ( .A(A1), 
    .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40071 \uart/UART_CONFIG/i1_2_lut ( .A(A0), .B(GNDI), .C(C0), .D(GNDI), 
    .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40332 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0020) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module uart_SAMPLER_SLICE_585 ( input D1, C1, D0, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40073 \uart/SAMPLER/n8938_bdd_2_lut ( .A(GNDI), .B(GNDI), .C(C1), .D(D1), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40333 \uart/SAMPLER/in_c_bdd_4_lut_7583 ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40333 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h37EC) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_586 ( input D1, C1, B1, D0, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40334 i7556_2_lut_rep_165_3_lut( .A(GNDI), .B(B1), .C(C1), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40335 \uart/SAMPLER/i3_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40334 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0300) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40335 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hBFFF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_587 ( input D1, C1, A1, D0, C0, A0, CE, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, CE_dly, CLK_dly;

  lut40336 LessThan_838_i12_3_lut_3_lut( .A(A1), .B(GNDI), .C(C1), .D(D1), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40337 LessThan_838_i10_3_lut_3_lut( .A(A0), .B(GNDI), .C(C0), .D(D0), 
    .Z(F0));
  vmuxregsre0045 \FIFO_CM_error/r_empty_reg_23 ( .D0(GNDI), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40336 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hA0FA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40337 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hF550) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_588 ( input D1, C1, B1, A1, D0, C0, B0, A0, M1, M0, CLK, output 
    F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  lut40338 \cd/CLOCK_DIVIDER_CONFIG/i2_3_lut_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40339 \vga/config1/i2_3_lut_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  vmuxregsre0031 \vga/config1/H_Count_Max_reg_i11 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0031 \vga/config1/H_Count_Max_reg_i10 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40338 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0040) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40339 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0070) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_589 ( input D1, C1, A1, C0, B0, A0, M1, M0, CE, CLK, output F0, 
    Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40340 LessThan_841_i12_3_lut_3_lut( .A(A1), .B(GNDI), .C(C1), .D(D1), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40341 LessThan_841_i10_3_lut_3_lut( .A(A0), .B(B0), .C(C0), .D(GNDI), 
    .Z(F0));
  vmuxregsre0031 \FIFO_UART_CM/r_data_reg_i0_i7 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0031 \FIFO_UART_CM/r_data_reg_i0_i6 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40340 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hA0FA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40341 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h8E8E) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module cm_configCM_SLICE_590 ( input D1, B1, A1, D0, C0, B0, A0, M1, M0, CE, 
    LSR, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly, LSR_dly;

  lut40342 \cm/configCM/i7521_2_lut_rep_187_3_lut ( .A(A1), .B(B1), .C(GNDI), 
    .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40343 \cm/configCM/i1_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre \cm/configCM/RXD_Data_reg_i3 ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \cm/configCM/RXD_Data_reg_i2 ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40342 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFF77) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40343 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0131) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module cm_configCM_SLICE_591 ( input D1, C1, B1, A1, C0, B0, A0, M1, M0, CE, 
    CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40344 \cm/configCM/i3588_3_lut_rep_174_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40345 \cm/configCM/i1_3_lut_rep_241 ( .A(A0), .B(B0), .C(C0), .D(GNDI), 
    .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0031 \cm/configCM/RXD_Data_reg_i15 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0031 \cm/configCM/RXD_Data_reg_i14 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40344 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h4C7C) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40345 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h5454) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module cm_configCM_SLICE_592 ( input D1, A1, D0, C0, B0, A0, M1, M0, CLK, 
    output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly;

  lut40255 \cm/configCM/i1766_2_lut_rep_217 ( .A(A1), .B(GNDI), .C(GNDI), 
    .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40346 \cm/configCM/i2_3_lut_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  vmuxregsre0031 \cm/configCM/State_reg_i1 ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0031 \cm/configCM/State_reg_i0 ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40346 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFBFF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module cm_configCM_SLICE_593 ( input D1, C1, B1, A1, D0, C0, B0, A0, M1, M0, 
    CE, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40347 \cm/configCM/i1_4_lut_adj_48 ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40348 \cm/configCM/i1_3_lut_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  vmuxregsre0031 \cm/configCM/RXD_Data_reg_i13 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0031 \cm/configCM/RXD_Data_reg_i12 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40347 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h2203) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40348 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hF0B0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module cm_configCM_SLICE_594 ( input C1, B1, A1, D0, C0, B0, A0, M1, M0, CE, 
    LSR, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly, LSR_dly;

  lut40349 \cm/configCM/i1_3_lut ( .A(A1), .B(B1), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40350 \cm/configCM/i1_4_lut_4_lut_adj_30 ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  vmuxregsre \cm/configCM/RXD_Data_reg_i7 ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \cm/configCM/RXD_Data_reg_i6 ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40349 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hB1B1) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40350 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h00CD) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module cm_configCM_SLICE_595 ( input D1, C1, B1, A1, D0, C0, B0, A0, M1, M0, 
    CE, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40351 \cm/configCM/i1_4_lut_adj_40 ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40352 \cm/configCM/i1_4_lut_4_lut_adj_32 ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  vmuxregsre0031 \cm/configCM/RXD_Data_reg_i9 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0031 \cm/configCM/RXD_Data_reg_i8 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40351 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFEFA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40352 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h2202) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module cm_SLICE_596 ( input D1, A1, D0, C0, B0, A0, M1, M0, CE, CLK, output F0, 
    Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40063 \cm/configCM/i1_2_lut_rep_205 ( .A(A1), .B(GNDI), .C(GNDI), .D(D1), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40353 \cm/configCM/i1_2_lut_3_lut_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  vmuxregsre0031 \cm/assignCM/Right_UP_reg_i0_i7 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0031 \cm/assignCM/Right_UP_reg_i0_i6 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40353 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hB3FF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module cm_configCM_SLICE_597 ( input D1, C1, B1, A1, D0, C0, B0, A0, M1, M0, 
    CE, LSR, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly, LSR_dly;

  lut40354 \cm/configCM/i1_4_lut_adj_46 ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40355 \cm/configCM/i1_2_lut_rep_173_4_lut ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre \cm/configCM/RXD_Data_reg_i1 ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \cm/configCM/RXD_Data_reg_i0 ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40354 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h7020) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40355 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hA280) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module cm_SLICE_598 ( input D1, C1, B1, A1, D0, C0, B0, A0, M1, M0, CE, CLK, 
    output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40356 \cm/configCM/n1618_bdd_4_lut_7704 ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40357 \cm/configCM/i1_2_lut_3_lut_4_lut_adj_33 ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0031 \cm/assignCM/Right_UP_reg_i0_i9 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0031 \cm/assignCM/Right_UP_reg_i0_i8 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40356 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hE444) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40357 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h8000) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module cm_configCM_SLICE_599 ( input D1, C1, D0, C0, B0, A0, M1, M0, CE, CLK, 
    output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40069 \cm/configCM/i1_2_lut_rep_206 ( .A(GNDI), .B(GNDI), .C(C1), .D(D1), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40358 \cm/configCM/i1_3_lut_3_lut_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  vmuxregsre0031 \cm/configCM/RXD_Data_reg_i11 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0031 \cm/configCM/RXD_Data_reg_i10 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40358 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hA080) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module cm_configCM_SLICE_600 ( input D1, B1, A1, D0, C0, B0, A0, M1, M0, CE, 
    CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40359 \cm/configCM/mux_231_Mux_8_i1_3_lut_rep_218 ( .A(A1), .B(B1), 
    .C(GNDI), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40360 \cm/configCM/i1_4_lut_adj_43 ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  vmuxregsre0031 \cm/configCM/c_data_reg_i4 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0031 \cm/configCM/c_data_reg_i3 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40359 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hDD88) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40360 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hF575) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module cm_configCM_SLICE_601 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, 
    F1 );

  lut40361 \cm/configCM/i7321_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40362 \cm/configCM/i7279_2_lut_3_lut_4_lut_4_lut ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40361 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hEEFA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40362 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hBFFF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module cm_SLICE_602 ( input D1, B1, D0, C0, B0, A0, M0, CE, CLK, output F0, Q0, 
    F1 );
  wire   GNDI, VCCI, M0_dly, CLK_dly, CE_dly;

  lut40363 \cm/configCM/i1_2_lut_adj_47 ( .A(GNDI), .B(B1), .C(GNDI), .D(D1), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40364 \cm/configCM/i2920_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0031 \cm/assignCM/VGA_Notification_reg_i0_i1 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40363 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hCC00) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40364 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFBC8) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module cm_configCM_SLICE_603 ( input C1, B1, D0, C0, B0, A0, M1, M0, CE, CLK, 
    output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40365 \cm/configCM/i2633_2_lut_rep_212 ( .A(GNDI), .B(B1), .C(C1), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40366 \cm/configCM/i2904_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0031 \cm/configCM/c_data_reg_i8 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0031 \cm/configCM/c_data_reg_i7 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40365 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h3C3C) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40366 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0ACC) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_604 ( input D1, C1, B1, A1, D0, C0, B0, A0, M1, M0, CE, CLK, 
    output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40367 \cd/CLOCK_DIVIDER_CONFIG/i4172_2_lut_rep_172_4_lut ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40368 \cm/assignCM/i1_2_lut_3_lut_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  vmuxregsre0031 \cm/assignCM/Left_DOWN_reg_i0_i1 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0031 \cm/assignCM/Left_DOWN_reg_i0_i0 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40367 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFFE) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40368 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0008) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module cm_assignCM_SLICE_605 ( input D1, B1, A1, D0, C0, B0, A0, M1, M0, CE, 
    CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40369 \cm/assignCM/i7275_2_lut_3_lut ( .A(A1), .B(B1), .C(GNDI), .D(D1), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40370 \cm/assignCM/i3_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0031 \cm/assignCM/Left_DOWN_reg_i0_i5 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0031 \cm/assignCM/Left_DOWN_reg_i0_i4 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40369 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hBBFF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40370 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0200) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module cm_assignCM_SLICE_606 ( input D1, C1, B1, A1, D0, A0, M1, M0, CE, CLK, 
    output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40371 \cm/assignCM/mux_742_i4_4_lut_4_lut_4_lut_4_lut_4_lut ( .A(A1), 
    .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40255 \cm/assignCM/i7467_4_lut_rep_199_2_lut ( .A(A0), .B(GNDI), .C(GNDI), 
    .D(D0), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0031 \cm/assignCM/Left_UP_reg_i0_i1 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0031 \cm/assignCM/Left_UP_reg_i0_i0 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40371 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h7F20) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_607 ( input D1, B1, A1, D0, C0, B0, A0, M1, M0, CE, CLK, output 
    F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40158 \cd/CLOCK_DIVIDER_CONFIG/i1_2_lut_rep_195_3_lut ( .A(A1), .B(B1), 
    .C(GNDI), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40372 \cm/assignCM/i7582_2_lut_3_lut_4_lut ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0031 \cm/assignCM/Left_UP_reg_i0_i3 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0031 \cm/assignCM/Left_UP_reg_i0_i2 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40372 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h5504) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_608 ( input D1, C1, B1, A1, D0, B0, M0, CE, CLK, output F0, Q0, 
    F1 );
  wire   GNDI, VCCI, M0_dly, CLK_dly, CE_dly;

  lut40373 \cd/CLOCK_DIVIDER_CONFIG/i2403_2_lut_3_lut_4_lut ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40374 \cm/assignCM/Horizontal_Split_I_0_2_lut ( .A(GNDI), .B(B0), 
    .C(GNDI), .D(D0), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0045 \cm/assignCM/H_BackPorch_reg_i0_i3 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40373 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0002) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40374 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFCC) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_609 ( input D1, C1, B1, A1, D0, C0, B0, A0, CE, CLK, output F0, 
    Q0, F1 );
  wire   GNDI, VCCI, CE_dly, CLK_dly;

  lut40375 \cd/CLOCK_DIVIDER_CONFIG/i2_3_lut_rep_189_4_lut ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40376 \cd/CLOCK_DIVIDER_CONFIG/i3_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  vmuxregsre0045 \FIFO_UART_error/r_empty_reg_23 ( .D0(GNDI), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  gnd DRIVEGND( .PWR0(GNDI));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40375 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFEF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40376 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0800) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module cm_configCM_SLICE_610 ( input D1, C1, B1, A1, D0, C0, B0, A0, M1, M0, 
    CE, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40377 \cm/configCM/i1_2_lut_rep_176_3_lut_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40378 \cm/configCM/i20_3_lut_4_lut_4_lut_4_lut ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0031 \cm/configCM/c_data_reg_i6 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0031 \cm/configCM/c_data_reg_i5 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40377 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hBEAA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40378 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hAE00) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module cm_configCM_SLICE_611 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, 
    F1 );

  lut40379 \cm/configCM/i2903_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40380 \cm/configCM/n3200_bdd_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40379 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h4F40) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40380 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h4F40) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module cm_assignCM_SLICE_612 ( input D1, C1, B1, A1, D0, C0, B0, A0, M1, M0, 
    CE, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40381 \cm/assignCM/i1_2_lut_3_lut_4_lut_adj_28 ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40382 \cm/assignCM/i7494_2_lut_3_lut_4_lut ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0031 \cm/assignCM/Left_UP_reg_i0_i11 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0031 \cm/assignCM/Left_UP_reg_i0_i10 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40381 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0004) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40382 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0001) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module uart_UART_STATE_SLICE_613 ( input D1, C1, B1, D0, C0, B0, output F0, F1 );
  wire   GNDI;

  lut40383 \uart/UART_STATE/i1_2_lut_rep_197_3_lut ( .A(GNDI), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40384 \uart/UART_STATE/i2_3_lut ( .A(GNDI), .B(B0), .C(C0), .D(D0), 
    .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40383 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFCFF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40384 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0C0F) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_614 ( input D1, C1, B1, A1, D0, C0, B0, A0, M1, M0, CLK, output 
    F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  lut40385 \cd/CLOCK_DIVIDER_CONFIG/i1_3_lut_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40386 \vga/config1/i1_2_lut_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  vmuxregsre0031 \vga/config1/H_Count_Max_reg_i1 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0031 \vga/config1/H_Count_Max_reg_i0 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40385 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h2000) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40386 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hBFFF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_615 ( input D1, C1, B1, A1, D0, B0, A0, M1, M0, CE, CLK, output 
    F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40387 i7332_3_lut_4_lut( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40388 LessThan_838_i6_3_lut_3_lut( .A(A0), .B(B0), .C(GNDI), .D(D0), 
    .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0031 \FIFO_UART_CM/r_data_reg_i0_i5 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0031 \FIFO_UART_CM/r_data_reg_i0_i4 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40387 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h8241) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40388 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h88EE) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_616 ( input D1, C1, B1, A1, D0, B0, A0, M1, M0, CE, CLK, output 
    F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40389 i7372_3_lut_4_lut( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40390 LessThan_841_i6_3_lut_3_lut( .A(A0), .B(B0), .C(GNDI), .D(D0), 
    .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0031 \FIFO_UART_CM/w_data_reg_i0_i3 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0031 \FIFO_UART_CM/w_data_reg_i0_i2 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40389 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h8421) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40390 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hBB22) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module cm_configCM_SLICE_617 ( input D1, C1, B1, A1, C0, B0, A0, M0, CLK, 
    output F0, Q0, F1 );
  wire   GNDI, VCCI, M0_dly, CLK_dly;

  lut40391 \cm/configCM/i1_2_lut_4_lut_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40392 \cm/configCM/i2_3_lut_4_lut_3_lut_3_lut ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0031 \cm/configCM/State_reg_i2 ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40391 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h4051) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40392 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0101) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module cm_SLICE_618 ( input D1, C1, B1, A1, D0, C0, B0, A0, M0, CE, CLK, 
    output F0, Q0, F1 );
  wire   VCCI, GNDI, M0_dly, CLK_dly, CE_dly;

  lut40393 \cm/configCM/i1_2_lut_rep_175_3_lut_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40394 \cm/configCM/i1_2_lut_3_lut_4_lut_adj_37 ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0045 \cm/assignCM/V_BackPorch_reg_i0_i1 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40393 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h2000) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40394 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h2000) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module cm_configCM_SLICE_619 ( input D1, B1, A1, D0, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40395 \cm/configCM/i7542_2_lut_rep_188_3_lut ( .A(A1), .B(B1), .C(GNDI), 
    .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40396 \cm/configCM/i7480_2_lut_3_lut_4_lut ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40395 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0011) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40396 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0001) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module cm_SLICE_620 ( input D1, C1, B1, A1, D0, C0, A0, M1, M0, CE, CLK, 
    output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40397 \cm/configCM/i2_4_lut_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40398 \cm/configCM/i2_2_lut_3_lut ( .A(A0), .B(GNDI), .C(C0), .D(D0), 
    .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0031 \cm/assignCM/Previous_Qudran_Config_reg_i0_i1 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0031 \cm/assignCM/Previous_Qudran_Config_reg_i0_i0 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40397 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hD0F0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40398 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0A00) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module cm_assignCM_SLICE_621 ( input D1, C1, B1, A1, D0, C0, B0, A0, M1, M0, 
    CE, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40399 \cm/assignCM/i23_4_lut_4_lut_4_lut_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40400 \cm/assignCM/i1_2_lut_3_lut_4_lut_adj_27 ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0031 \cm/assignCM/Left_DOWN_reg_i0_i11 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0031 \cm/assignCM/Left_DOWN_reg_i0_i10 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40399 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h74F0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40400 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0EEE) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_622 ( input D1, C1, B1, A1, D0, C0, B0, A0, M1, M0, CE, CLK, 
    output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40401 LessThan_841_i4_4_lut( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40402 LessThan_847_i4_4_lut( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0031 \FIFO_UART_CM/w_data_reg_i0_i5 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0031 \FIFO_UART_CM/w_data_reg_i0_i4 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40401 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h7310) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40402 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hC4FD) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_623 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40403 i3186_3_lut_4_lut( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40404 i3176_3_lut_4_lut( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40403 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0048) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40404 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0440) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_624 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40405 i3185_3_lut_4_lut( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40406 i3184_3_lut_4_lut( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40405 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0060) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40406 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h1200) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_625 ( input D1, C1, B1, A1, D0, C0, B0, M0, CE, CLK, output F0, 
    Q0, F1 );
  wire   GNDI, VCCI, M0_dly, CLK_dly, CE_dly;

  lut40407 \FIFO_UART_info/i7503_2_lut_3_lut_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40408 i1338_2_lut_3_lut( .A(GNDI), .B(B0), .C(C0), .D(D0), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0031 \db/DB_DF_UART/sync_ff_18 ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40407 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0008) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40408 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h00C0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_626 ( input D1, C1, B1, A1, D0, C0, A0, M1, M0, CLK, output F0, 
    Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly;

  lut40409 \FIFO_CM_error/i7506_2_lut_3_lut_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40410 i1333_2_lut_3_lut( .A(A0), .B(GNDI), .C(C0), .D(D0), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0031 \db/DB_DF_VGA/button_ff_19 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0031 \db/DB_DF_UART/button_ff_19 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40409 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h1000) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40410 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0A00) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_627 ( input D1, C1, B1, A1, D0, C0, B0, M0, CE, CLK, output F0, 
    Q0, F1 );
  wire   GNDI, VCCI, M0_dly, CLK_dly, CE_dly;

  lut40411 \uart/UART_STATE/i7508_2_lut_3_lut_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40412 i1339_2_lut_3_lut( .A(GNDI), .B(B0), .C(C0), .D(D0), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0031 \db/DB_DF_VGA/sync_ff_18 ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40411 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0010) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40412 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h00C0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_628 ( input D1, C1, A1, D0, B0, A0, M1, M0, CE, CLK, output F0, 
    Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40413 \FIFO_UART_info/i7449_2_lut_rep_192_3_lut ( .A(A1), .B(GNDI), 
    .C(C1), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40414 \FIFO_UART_CM/i7441_2_lut_rep_184_3_lut ( .A(A0), .B(B0), .C(GNDI), 
    .D(D0), .Z(F0));
  vmuxregsre0031 \FIFO_CM_error/r_data_reg_i0_i1 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0031 \FIFO_CM_error/r_data_reg_i0_i0 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40413 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0555) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40414 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h3311) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_629 ( input D1, B1, A1, D0, B0, M1, M0, CE, CLK, output F0, Q0, 
    F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40415 LessThan_847_i6_3_lut_3_lut( .A(A1), .B(B1), .C(GNDI), .D(D1), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40326 LessThan_847_i7_2_lut_rep_223( .A(GNDI), .B(B0), .C(GNDI), .D(D0), 
    .Z(F0));
  vmuxregsre0031 \FIFO_UART_CM/w_data_reg_i0_i7 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0031 \FIFO_UART_CM/w_data_reg_i0_i6 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40415 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hBB22) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_630 ( input D1, C1, B1, A1, D0, C0, M1, M0, CE, CLK, output F0, 
    Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40416 i7343_2_lut_3_lut_4_lut( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40145 LessThan_838_i11_2_lut_rep_225( .A(GNDI), .B(GNDI), .C(C0), .D(D0), 
    .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0031 \FIFO_UART_CM/r_data_reg_i0_i1 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0031 \FIFO_UART_CM/r_data_reg_i0_i0 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40416 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h8241) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_631 ( input D1, C1, A1, D0, C0, M1, M0, CE, CLK, output F0, Q0, 
    F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40417 i7505_2_lut_3_lut( .A(A1), .B(GNDI), .C(C1), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40418 LessThan_838_i15_2_lut_rep_227( .A(GNDI), .B(GNDI), .C(C0), .D(D0), 
    .Z(F0));
  vmuxregsre0031 \FIFO_UART_CM/r_data_reg_i0_i3 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0031 \FIFO_UART_CM/r_data_reg_i0_i2 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40417 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hF5FA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40418 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0FF0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_632 ( input D1, C1, B1, A1, D0, A0, CE, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, CE_dly, CLK_dly;

  lut40419 i7383_2_lut_3_lut_4_lut( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40212 LessThan_841_i11_2_lut_rep_231( .A(A0), .B(GNDI), .C(GNDI), .D(D0), 
    .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0045 \FIFO_UART_CM/r_empty_reg_23 ( .D0(GNDI), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40419 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h8241) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_633 ( input C1, B1, A1, C0, B0, M1, M0, CE, CLK, output F0, Q0, 
    F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40420 i7549_2_lut_3_lut( .A(A1), .B(B1), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40254 LessThan_841_i15_2_lut_rep_233( .A(GNDI), .B(B0), .C(C0), .D(GNDI), 
    .Z(F0));
  vmuxregsre0031 \FIFO_UART_CM/w_data_reg_i0_i1 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0031 \FIFO_UART_CM/w_data_reg_i0_i0 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40420 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hF6F6) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module cm_configCM_SLICE_634 ( input C1, B1, D0, C0, B0, A0, M1, M0, CE, CLK, 
    output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40143 \cm/configCM/i1_2_lut_adj_50 ( .A(GNDI), .B(B1), .C(C1), .D(GNDI), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40421 \cm/configCM/i1_4_lut_adj_38 ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  vmuxregsre0031 \cm/configCM/c_data_reg_i11 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0031 \cm/configCM/c_data_reg_i10 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40421 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h5140) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module cm_SLICE_635 ( input B1, A1, B0, A0, M1, M0, CE, CLK, output F0, Q0, F1, 
    Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40422 \cm/configCM/i1_2_lut_adj_51 ( .A(A1), .B(B1), .C(GNDI), .D(GNDI), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40423 \cm/configCM/i1_2_lut_2_lut ( .A(A0), .B(B0), .C(GNDI), .D(GNDI), 
    .Z(F0));
  vmuxregsre0031 \cm/assignCM/Right_UP_reg_i0_i5 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0031 \cm/assignCM/Right_UP_reg_i0_i4 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40422 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hDDDD) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40423 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hBBBB) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module cm_assignCM_SLICE_636 ( input D1, C1, B1, A1, D0, C0, B0, A0, M1, M0, 
    CE, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40424 \cm/assignCM/mux_742_i1_4_lut_4_lut_4_lut_4_lut_4_lut ( .A(A1), 
    .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40425 \cm/assignCM/i31_4_lut_4_lut_4_lut_4_lut ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0031 \cm/assignCM/Left_DOWN_reg_i0_i3 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0031 \cm/assignCM/Left_DOWN_reg_i0_i2 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40424 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h72F0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40425 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hCAAA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_637 ( input D1, C1, D0, C0, M1, M0, CE, CLK, output F0, Q0, F1, 
    Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40331 \cd/CLOCK_DIVIDER_CONFIG/i3207_2_lut ( .A(GNDI), .B(GNDI), .C(C1), 
    .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40073 \cd/CLOCK_DIVIDER_CONFIG/i3205_2_lut ( .A(GNDI), .B(GNDI), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0031 \FIFO_UART_error/r_data_reg_i0_i1 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0031 \FIFO_UART_error/r_data_reg_i0_i0 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module vga_assgncolor_SLICE_638 ( input D1, B1, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40363 \vga/assgncolor/i4192_2_lut ( .A(GNDI), .B(B1), .C(GNDI), .D(D1), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40426 \vga/assgncolor/i4270_2_lut ( .A(A0), .B(B0), .C(GNDI), .D(GNDI), 
    .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40426 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h8888) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module vga_assgncolor_SLICE_639 ( input D1, B1, D0, B0, output F0, F1 );
  wire   GNDI;

  lut40363 \vga/assgncolor/i4272_2_lut ( .A(GNDI), .B(B1), .C(GNDI), .D(D1), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40363 \vga/assgncolor/i4277_2_lut ( .A(GNDI), .B(B0), .C(GNDI), .D(D0), 
    .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module vga_assgncolor_SLICE_640 ( input C1, B1, C0, B0, output F0, F1 );
  wire   GNDI;

  lut40096 \vga/assgncolor/i4273_2_lut ( .A(GNDI), .B(B1), .C(C1), .D(GNDI), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40096 \vga/assgncolor/i4271_2_lut ( .A(GNDI), .B(B0), .C(C0), .D(GNDI), 
    .Z(F0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module vga_assgncolor_SLICE_641 ( input D1, B1, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40117 \vga/assgncolor/i4274_2_lut ( .A(GNDI), .B(B1), .C(GNDI), .D(D1), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40426 \vga/assgncolor/i4194_2_lut ( .A(A0), .B(B0), .C(GNDI), .D(GNDI), 
    .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module vga_assgncolor_SLICE_642 ( input C1, A1, D0, A0, output F0, F1 );
  wire   GNDI;

  lut40427 \vga/assgncolor/i4193_2_lut ( .A(A1), .B(GNDI), .C(C1), .D(GNDI), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40255 \vga/assgncolor/i4276_2_lut ( .A(A0), .B(GNDI), .C(GNDI), .D(D0), 
    .Z(F0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40427 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hA0A0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module vga_assgncolor_SLICE_643 ( input C1, B1, C0, B0, output F0, F1 );
  wire   GNDI;

  lut40096 \vga/assgncolor/i4269_2_lut ( .A(GNDI), .B(B1), .C(C1), .D(GNDI), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40096 \vga/assgncolor/i4275_2_lut ( .A(GNDI), .B(B0), .C(C0), .D(GNDI), 
    .Z(F0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICE_644 ( input C1, B1, A1, C0, B0, A0, M1, M0, CE, LSR, CLK, output 
    F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly, LSR_dly;

  lut40428 \cm/configCM/i3878_3_lut ( .A(A1), .B(B1), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40429 \lm/leds_UART_info_7__I_0_i1_3_lut ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  vmuxregsre \lm/CM_error/leds_reg__i1 ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \lm/CM_error/leds_reg__i0 ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40428 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h8B8B) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40429 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hE2E2) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lm_SLICE_645 ( input B1, A1, D0, C0, B0, M1, M0, CE, LSR, CLK, output 
    F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly, LSR_dly;

  lut40423 \lm/i1446_2_lut ( .A(A1), .B(B1), .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40430 \lm/leds_UART_info_7__I_0_i2_3_lut ( .A(GNDI), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre \lm/CM_error/leds_reg__i3 ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \lm/CM_error/leds_reg__i2 ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40430 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFC30) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lm_SLICE_646 ( input D1, C1, B1, D0, C0, B0, M1, M0, CE, LSR, CLK, 
    output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly, LSR_dly;

  lut40431 \lm/leds_UART_info_7__I_0_i6_3_lut ( .A(GNDI), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40432 \lm/leds_UART_info_7__I_0_i3_3_lut ( .A(GNDI), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre \lm/UART_error/leds_reg__i1 ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \lm/UART_error/leds_reg__i0 ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40431 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hCFC0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40432 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFC0C) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lm_SLICE_647 ( input D1, C1, A1, D0, C0, A0, M1, M0, CE, LSR, CLK, 
    output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly, LSR_dly;

  lut40433 \lm/leds_UART_info_7__I_0_i5_3_lut ( .A(A1), .B(GNDI), .C(C1), 
    .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40136 \lm/leds_UART_info_7__I_0_i4_3_lut ( .A(A0), .B(GNDI), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre \lm/UART_info/leds_reg__i1 ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \lm/UART_info/leds_reg__i0 ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40433 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hF0AA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module cm_configCM_SLICE_648 ( input B1, A1, C0, B0, output F0, F1 );
  wire   GNDI;

  lut40423 \cm/configCM/i1_2_lut_adj_49 ( .A(A1), .B(B1), .C(GNDI), .D(GNDI), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40246 \cm/configCM/i7552_2_lut ( .A(GNDI), .B(B0), .C(C0), .D(GNDI), 
    .Z(F0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module cm_configCM_SLICE_649 ( input C1, A1, D0, C0, output F0, F1 );
  wire   GNDI;

  lut40434 \cm/configCM/i7559_2_lut ( .A(A1), .B(GNDI), .C(C1), .D(GNDI), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40435 \cm/configCM/i7578_2_lut ( .A(GNDI), .B(GNDI), .C(C0), .D(D0), 
    .Z(F0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40434 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h5F5F) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40435 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0FFF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module cm_configCM_SLICE_650 ( input D1, B1, A1, D0, C0, B0, A0, M0, CE, CLK, 
    output F0, Q0, F1 );
  wire   GNDI, VCCI, M0_dly, CLK_dly, CE_dly;

  lut40436 \cm/configCM/i4238_2_lut_3_lut ( .A(A1), .B(B1), .C(GNDI), .D(D1), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40437 \cm/configCM/i2910_3_lut_4_lut_4_lut ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0031 \cm/configCM/c_data_reg_i9 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40436 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h66FF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40437 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h40F7) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module cm_assignCM_SLICE_651 ( input B1, A1, D0, C0, M1, M0, CE, CLK, output 
    F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40438 \cm/assignCM/i7436_2_lut ( .A(A1), .B(B1), .C(GNDI), .D(GNDI), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40091 \cm/assignCM/i7269_2_lut ( .A(GNDI), .B(GNDI), .C(C0), .D(D0), 
    .Z(F0));
  vmuxregsre0031 \cm/assignCM/Left_DOWN_reg_i0_i9 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0031 \cm/assignCM/Left_DOWN_reg_i0_i8 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40438 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h6666) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_652 ( input D1, C1, B1, A1, D0, A0, M1, M0, CLK, output F0, Q0, 
    F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly;

  lut40439 mux_8_i1_4_lut( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40204 \FIFO_CM_error/i7463_2_lut_rep_196 ( .A(A0), .B(GNDI), .C(GNDI), 
    .D(D0), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0031 \vga/config1/H_Count_Max_reg_i3 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0031 \vga/config1/H_Count_Max_reg_i2 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40439 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hCAC0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module BLUE_3_ ( input PADDO, output BLUE3 );
  wire   GNDI;

  se5iobuf BLUE_pad_3( .I(PADDO), .T(GNDI), .PAD(BLUE3));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => BLUE3) = (0:0:0,0:0:0);
  endspecify

endmodule

module se5iobuf ( input I, T, output PAD );

  OBZPD INST5( .I(I), .T(T), .O(PAD));
endmodule

module GREEN_0_ ( input PADDO, output GREEN0 );
  wire   GNDI;

  se5iobuf0440 GREEN_pad_0( .I(PADDO), .T(GNDI), .PAD(GREEN0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => GREEN0) = (0:0:0,0:0:0);
  endspecify

endmodule

module se5iobuf0440 ( input I, T, output PAD );

  OBZPU INST5( .I(I), .T(T), .O(PAD));
endmodule

module GREEN_1_ ( input PADDO, output GREEN1 );
  wire   GNDI;

  se5iobuf0440 GREEN_pad_1( .I(PADDO), .T(GNDI), .PAD(GREEN1));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => GREEN1) = (0:0:0,0:0:0);
  endspecify

endmodule

module GREEN_2_ ( input PADDO, output GREEN2 );
  wire   GNDI;

  se5iobuf0440 GREEN_pad_2( .I(PADDO), .T(GNDI), .PAD(GREEN2));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => GREEN2) = (0:0:0,0:0:0);
  endspecify

endmodule

module GREEN_3_ ( input PADDO, output GREEN3 );
  wire   GNDI;

  se5iobuf GREEN_pad_3( .I(PADDO), .T(GNDI), .PAD(GREEN3));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => GREEN3) = (0:0:0,0:0:0);
  endspecify

endmodule

module RED_0_ ( input PADDO, output RED0 );
  wire   GNDI;

  se5iobuf0440 RED_pad_0( .I(PADDO), .T(GNDI), .PAD(RED0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => RED0) = (0:0:0,0:0:0);
  endspecify

endmodule

module RED_1_ ( input PADDO, output RED1 );
  wire   GNDI;

  se5iobuf0440 RED_pad_1( .I(PADDO), .T(GNDI), .PAD(RED1));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => RED1) = (0:0:0,0:0:0);
  endspecify

endmodule

module RED_2_ ( input PADDO, output RED2 );
  wire   GNDI;

  se5iobuf0440 RED_pad_2( .I(PADDO), .T(GNDI), .PAD(RED2));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => RED2) = (0:0:0,0:0:0);
  endspecify

endmodule

module RED_3_ ( input PADDO, output RED3 );
  wire   GNDI;

  se5iobuf RED_pad_3( .I(PADDO), .T(GNDI), .PAD(RED3));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => RED3) = (0:0:0,0:0:0);
  endspecify

endmodule

module LEDS_0_ ( input PADDO, output LEDS0 );
  wire   GNDI;

  se5iobuf0440 LEDS_pad_0( .I(PADDO), .T(GNDI), .PAD(LEDS0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => LEDS0) = (0:0:0,0:0:0);
  endspecify

endmodule

module LEDS_1_ ( input PADDO, output LEDS1 );
  wire   GNDI;

  se5iobuf0440 LEDS_pad_1( .I(PADDO), .T(GNDI), .PAD(LEDS1));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => LEDS1) = (0:0:0,0:0:0);
  endspecify

endmodule

module LEDS_2_ ( input PADDO, output LEDS2 );
  wire   GNDI;

  se5iobuf0440 LEDS_pad_2( .I(PADDO), .T(GNDI), .PAD(LEDS2));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => LEDS2) = (0:0:0,0:0:0);
  endspecify

endmodule

module LEDS_3_ ( input PADDO, output LEDS3 );
  wire   GNDI;

  se5iobuf0440 LEDS_pad_3( .I(PADDO), .T(GNDI), .PAD(LEDS3));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => LEDS3) = (0:0:0,0:0:0);
  endspecify

endmodule

module LEDS_4_ ( input PADDO, output LEDS4 );
  wire   GNDI;

  se5iobuf0440 LEDS_pad_4( .I(PADDO), .T(GNDI), .PAD(LEDS4));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => LEDS4) = (0:0:0,0:0:0);
  endspecify

endmodule

module LEDS_5_ ( input PADDO, output LEDS5 );
  wire   GNDI;

  se5iobuf0440 LEDS_pad_5( .I(PADDO), .T(GNDI), .PAD(LEDS5));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => LEDS5) = (0:0:0,0:0:0);
  endspecify

endmodule

module LEDS_6_ ( input PADDO, output LEDS6 );
  wire   GNDI;

  se5iobuf0440 LEDS_pad_6( .I(PADDO), .T(GNDI), .PAD(LEDS6));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => LEDS6) = (0:0:0,0:0:0);
  endspecify

endmodule

module LEDS_7_ ( input PADDO, output LEDS7 );
  wire   GNDI;

  se5iobuf0440 LEDS_pad_7( .I(PADDO), .T(GNDI), .PAD(LEDS7));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => LEDS7) = (0:0:0,0:0:0);
  endspecify

endmodule

module VSYNC ( input PADDO, output VSYNC );
  wire   GNDI;

  se5iobuf0440 VSYNC_pad( .I(PADDO), .T(GNDI), .PAD(VSYNC));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => VSYNC) = (0:0:0,0:0:0);
  endspecify

endmodule

module HSYNC ( input PADDO, output HSYNC );
  wire   GNDI;

  se5iobuf0440 HSYNC_pad( .I(PADDO), .T(GNDI), .PAD(HSYNC));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => HSYNC) = (0:0:0,0:0:0);
  endspecify

endmodule

module out ( input PADDO, output out );
  wire   GNDI;

  se5iobuf0440 out_pad( .I(PADDO), .T(GNDI), .PAD(out));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => out) = (0:0:0,0:0:0);
  endspecify

endmodule

module BLUE_2_ ( input PADDO, output BLUE2 );
  wire   GNDI;

  se5iobuf BLUE_pad_2( .I(PADDO), .T(GNDI), .PAD(BLUE2));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => BLUE2) = (0:0:0,0:0:0);
  endspecify

endmodule

module BLUE_1_ ( input PADDO, output BLUE1 );
  wire   GNDI;

  se5iobuf0440 BLUE_pad_1( .I(PADDO), .T(GNDI), .PAD(BLUE1));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => BLUE1) = (0:0:0,0:0:0);
  endspecify

endmodule

module BLUE_0_ ( input PADDO, output BLUE0 );
  wire   GNDI;

  se5iobuf0440 BLUE_pad_0( .I(PADDO), .T(GNDI), .PAD(BLUE0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => BLUE0) = (0:0:0,0:0:0);
  endspecify

endmodule

module clk ( output PADDI, input clk );

  se5iobuf0441 clk_pad( .Z(PADDI), .PAD(clk));

  specify
    (clk => PADDI) = (0:0:0,0:0:0);
    $width (posedge clk, 0:0:0);
    $width (negedge clk, 0:0:0);
  endspecify

endmodule

module se5iobuf0441 ( output Z, input PAD );

  IB INST1( .I(PAD), .O(Z));
endmodule

module rst_n ( output PADDI, input rst_n );

  se5iobuf0442 rst_n_pad( .Z(PADDI), .PAD(rst_n));

  specify
    (rst_n => PADDI) = (0:0:0,0:0:0);
    $width (posedge rst_n, 0:0:0);
    $width (negedge rst_n, 0:0:0);
  endspecify

endmodule

module se5iobuf0442 ( output Z, input PAD );

  IBPD INST1( .I(PAD), .O(Z));
endmodule

module btnHS ( output PADDI, input btnHS );

  se5iobuf0443 btnHS_pad( .Z(PADDI), .PAD(btnHS));

  specify
    (btnHS => PADDI) = (0:0:0,0:0:0);
    $width (posedge btnHS, 0:0:0);
    $width (negedge btnHS, 0:0:0);
  endspecify

endmodule

module se5iobuf0443 ( output Z, input PAD );

  IBPU INST1( .I(PAD), .O(Z));
endmodule

module btnVS ( output PADDI, input btnVS );

  se5iobuf0443 btnVS_pad( .Z(PADDI), .PAD(btnVS));

  specify
    (btnVS => PADDI) = (0:0:0,0:0:0);
    $width (posedge btnVS, 0:0:0);
    $width (negedge btnVS, 0:0:0);
  endspecify

endmodule

module btnUART ( output PADDI, input btnUART );

  se5iobuf0443 btnUART_pad( .Z(PADDI), .PAD(btnUART));

  specify
    (btnUART => PADDI) = (0:0:0,0:0:0);
    $width (posedge btnUART, 0:0:0);
    $width (negedge btnUART, 0:0:0);
  endspecify

endmodule

module btnVGA ( output PADDI, input btnVGA );

  se5iobuf0443 btnVGA_pad( .Z(PADDI), .PAD(btnVGA));

  specify
    (btnVGA => PADDI) = (0:0:0,0:0:0);
    $width (posedge btnVGA, 0:0:0);
    $width (negedge btnVGA, 0:0:0);
  endspecify

endmodule

module in ( output PADDI, input in );

  se5iobuf0443 in_pad( .Z(PADDI), .PAD(in));

  specify
    (in => PADDI) = (0:0:0,0:0:0);
    $width (posedge in, 0:0:0);
    $width (negedge in, 0:0:0);
  endspecify

endmodule

module GSR_INST ( input GSRNET );

  GSR5MODE GSR_INST_GSRMODE( .GSR(GSRNET));

  specify
  endspecify

endmodule

module GSR5MODE ( input GSR );
  wire   GSRMODE;

  BUFBA INST10( .A(GSR), .Z(GSRMODE));
  GSR INST20( .GSR(GSRMODE));
endmodule
